(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/common/http'), require('@ant-design/icons-angular'), require('@ant-design/icons-angular/icons'), require('@angular/animations'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/keycodes'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/forms'), require('@angular/cdk/observers'), require('@angular/router'), require('@angular/cdk/platform'), require('date-fns/parse'), require('@angular/cdk/a11y'), require('date-fns/set_month'), require('date-fns/add_days'), require('date-fns/difference_in_calendar_days'), require('date-fns/difference_in_calendar_months'), require('date-fns/difference_in_calendar_weeks'), require('date-fns/end_of_month'), require('date-fns/is_same_day'), require('date-fns/is_same_month'), require('date-fns/is_same_year'), require('date-fns/is_this_month'), require('date-fns/is_this_year'), require('date-fns/set_year'), require('date-fns/start_of_month'), require('date-fns/start_of_week'), require('date-fns/start_of_year'), require('@angular/platform-browser'), require('date-fns/add_months'), require('date-fns/add_years'), require('date-fns/set_day'), require('@angular/cdk/layout'), require('@angular/cdk/bidi')) :
    typeof define === 'function' && define.amd ? define('ng-zorro-antd', ['exports', '@angular/common', '@angular/core', '@angular/cdk/coercion', '@angular/common/http', '@ant-design/icons-angular', '@ant-design/icons-angular/icons', '@angular/animations', 'rxjs', 'rxjs/operators', '@angular/cdk/keycodes', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/forms', '@angular/cdk/observers', '@angular/router', '@angular/cdk/platform', 'date-fns/parse', '@angular/cdk/a11y', 'date-fns/set_month', 'date-fns/add_days', 'date-fns/difference_in_calendar_days', 'date-fns/difference_in_calendar_months', 'date-fns/difference_in_calendar_weeks', 'date-fns/end_of_month', 'date-fns/is_same_day', 'date-fns/is_same_month', 'date-fns/is_same_year', 'date-fns/is_this_month', 'date-fns/is_this_year', 'date-fns/set_year', 'date-fns/start_of_month', 'date-fns/start_of_week', 'date-fns/start_of_year', '@angular/platform-browser', 'date-fns/add_months', 'date-fns/add_years', 'date-fns/set_day', '@angular/cdk/layout', '@angular/cdk/bidi'], factory) :
    (factory((global['ng-zorro-antd'] = {}),global.ng.common,global.ng.core,global.ng.cdk.coercion,global.ng.common.http,global.iconsAngular,global.icons,global.ng.animations,global.rxjs,global.rxjs.operators,global.ng.cdk.keycodes,global.ng.cdk.overlay,global.ng.cdk.portal,global.ng.forms,global.ng.cdk.observers,global.ng.router,global.ng.cdk.platform,global.parse,global.ng.cdk.a11y,global.setMonth,global.addDays,global.differenceInCalendarDays,global.differenceInCalendarMonths,global.differenceInCalendarWeeks,global.endOfMonth,global.isSameDay,global.isSameMonth,global.isSameYear,global.isThisMonth,global.isThisYear,global.setYear,global.startOfMonth,global.startOfWeek,global.startOfYear,global.ng.platformBrowser,global.addMonths,global.addYears,global.setDay,global.ng.cdk.layout,global.ng.cdk.bidi));
}(this, (function (exports,i3,i0,coercion,i2,iconsAngular,icons,animations,rxjs,operators,keycodes,i2$1,portal,forms,observers,router,platform,parse,a11y,setMonth,addDays,differenceInCalendarDays,differenceInCalendarMonths,differenceInCalendarWeeks,endOfMonth,isSameDay,isSameMonth,isSameYear,isThisMonth,isThisYear,setYear,startOfMonth,startOfWeek,startOfYear,platformBrowser,addMonths,addYears,setDay,layout,bidi) { 'use strict';

    parse = parse && parse.hasOwnProperty('default') ? parse['default'] : parse;
    setMonth = setMonth && setMonth.hasOwnProperty('default') ? setMonth['default'] : setMonth;
    addDays = addDays && addDays.hasOwnProperty('default') ? addDays['default'] : addDays;
    differenceInCalendarDays = differenceInCalendarDays && differenceInCalendarDays.hasOwnProperty('default') ? differenceInCalendarDays['default'] : differenceInCalendarDays;
    differenceInCalendarMonths = differenceInCalendarMonths && differenceInCalendarMonths.hasOwnProperty('default') ? differenceInCalendarMonths['default'] : differenceInCalendarMonths;
    differenceInCalendarWeeks = differenceInCalendarWeeks && differenceInCalendarWeeks.hasOwnProperty('default') ? differenceInCalendarWeeks['default'] : differenceInCalendarWeeks;
    endOfMonth = endOfMonth && endOfMonth.hasOwnProperty('default') ? endOfMonth['default'] : endOfMonth;
    isSameDay = isSameDay && isSameDay.hasOwnProperty('default') ? isSameDay['default'] : isSameDay;
    isSameMonth = isSameMonth && isSameMonth.hasOwnProperty('default') ? isSameMonth['default'] : isSameMonth;
    isSameYear = isSameYear && isSameYear.hasOwnProperty('default') ? isSameYear['default'] : isSameYear;
    isThisMonth = isThisMonth && isThisMonth.hasOwnProperty('default') ? isThisMonth['default'] : isThisMonth;
    isThisYear = isThisYear && isThisYear.hasOwnProperty('default') ? isThisYear['default'] : isThisYear;
    setYear = setYear && setYear.hasOwnProperty('default') ? setYear['default'] : setYear;
    startOfMonth = startOfMonth && startOfMonth.hasOwnProperty('default') ? startOfMonth['default'] : startOfMonth;
    startOfWeek = startOfWeek && startOfWeek.hasOwnProperty('default') ? startOfWeek['default'] : startOfWeek;
    startOfYear = startOfYear && startOfYear.hasOwnProperty('default') ? startOfYear['default'] : startOfYear;
    addMonths = addMonths && addMonths.hasOwnProperty('default') ? addMonths['default'] : addMonths;
    addYears = addYears && addYears.hasOwnProperty('default') ? addYears['default'] : addYears;
    setDay = setDay && setDay.hasOwnProperty('default') ? setDay['default'] : setDay;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var availablePrefixs = ['moz', 'ms', 'webkit'];
    /**
     * @return {?}
     */
    function requestAnimationFramePolyfill() {
        /** @type {?} */
        var lastTime = 0;
        return function (callback) {
            /** @type {?} */
            var currTime = new Date().getTime();
            /** @type {?} */
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            /** @type {?} */
            var id = window.setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
    }
    /**
     * @return {?}
     */
    function getRequestAnimationFrame() {
        if (typeof window === 'undefined') {
            return function () { return null; };
        }
        if (window.requestAnimationFrame) {
            // https://github.com/vuejs/vue/issues/4465
            return window.requestAnimationFrame.bind(window);
        }
        /** @type {?} */
        var prefix = availablePrefixs.filter(function (key) { return key + "RequestAnimationFrame" in window; })[0];
        return prefix
            ? window[prefix + "RequestAnimationFrame"]
            : requestAnimationFramePolyfill();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    function cancelRequestAnimationFrame(id) {
        if (typeof window === 'undefined') {
            return null;
        }
        if (window.cancelAnimationFrame) {
            return window.cancelAnimationFrame(id);
        }
        /** @type {?} */
        var prefix = availablePrefixs.filter(function (key) {
            return key + "CancelAnimationFrame" in window || key + "CancelRequestAnimationFrame" in window;
        })[0];
        return prefix ?
            (( /** @type {?} */(window))[prefix + "CancelAnimationFrame"] ||
                ( /** @type {?} */(window))[prefix + "CancelRequestAnimationFrame"]).call(this, id) : clearTimeout(id);
    }
    /** @type {?} */
    var reqAnimFrame = getRequestAnimationFrame();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} t
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function easeInOutCubic(t, b, c, d) {
        /** @type {?} */
        var cc = c - b;
        /** @type {?} */
        var tt = t / (d / 2);
        if (tt < 1) {
            return cc / 2 * tt * tt * tt + b;
        }
        else {
            return cc / 2 * ((tt -= 2) * tt * tt + 2) + b;
        }
    }
    var NzScrollService = /** @class */ (function () {
        /* tslint:disable-next-line:no-any */
        function NzScrollService(doc) {
            this.doc = doc;
        }
        /** 设置 `el` 滚动条位置 */
        /**
         * 设置 `el` 滚动条位置
         * @param {?} el
         * @param {?=} topValue
         * @return {?}
         */
        NzScrollService.prototype.setScrollTop = /**
         * 设置 `el` 滚动条位置
         * @param {?} el
         * @param {?=} topValue
         * @return {?}
         */
            function (el, topValue) {
                if (topValue === void 0) {
                    topValue = 0;
                }
                if (el === window) {
                    this.doc.body.scrollTop = topValue;
                    this.doc.documentElement.scrollTop = topValue;
                }
                else {
                    ( /** @type {?} */(el)).scrollTop = topValue;
                }
            };
        /** 获取 `el` 相对于视窗距离 */
        /**
         * 获取 `el` 相对于视窗距离
         * @param {?} el
         * @return {?}
         */
        NzScrollService.prototype.getOffset = /**
         * 获取 `el` 相对于视窗距离
         * @param {?} el
         * @return {?}
         */
            function (el) {
                /** @type {?} */
                var ret = {
                    top: 0,
                    left: 0
                };
                if (!el || !el.getClientRects().length)
                    return ret;
                /** @type {?} */
                var rect = el.getBoundingClientRect();
                if (rect.width || rect.height) {
                    /** @type {?} */
                    var doc = el.ownerDocument.documentElement;
                    ret.top = rect.top - doc.clientTop;
                    ret.left = rect.left - doc.clientLeft;
                }
                else {
                    ret.top = rect.top;
                    ret.left = rect.left;
                }
                return ret;
            };
        /** 获取 `el` 滚动条位置 */
        // TODO: remove '| Window' as the fallback already happens here
        /**
         * 获取 `el` 滚动条位置
         * @param {?=} el
         * @param {?=} top
         * @return {?}
         */
        NzScrollService.prototype.getScroll = /**
         * 获取 `el` 滚动条位置
         * @param {?=} el
         * @param {?=} top
         * @return {?}
         */
            function (el, top) {
                if (top === void 0) {
                    top = true;
                }
                /** @type {?} */
                var target = el ? el : window;
                /** @type {?} */
                var prop = top ? 'pageYOffset' : 'pageXOffset';
                /** @type {?} */
                var method = top ? 'scrollTop' : 'scrollLeft';
                /** @type {?} */
                var isWindow = target === window;
                /** @type {?} */
                var ret = isWindow ? target[prop] : target[method];
                if (isWindow && typeof ret !== 'number') {
                    ret = this.doc.documentElement[method];
                }
                return ret;
            };
        /**
         * 使用动画形式将 `el` 滚动至某位置
         *
         * @param containerEl 容器，默认 `window`
         * @param targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部
         * @param easing 动作算法，默认：`easeInOutCubic`
         * @param callback 动画结束后回调
         */
        /**
         * 使用动画形式将 `el` 滚动至某位置
         *
         * @param {?} containerEl 容器，默认 `window`
         * @param {?=} targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部
         * @param {?=} easing 动作算法，默认：`easeInOutCubic`
         * @param {?=} callback 动画结束后回调
         * @return {?}
         */
        NzScrollService.prototype.scrollTo = /**
         * 使用动画形式将 `el` 滚动至某位置
         *
         * @param {?} containerEl 容器，默认 `window`
         * @param {?=} targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部
         * @param {?=} easing 动作算法，默认：`easeInOutCubic`
         * @param {?=} callback 动画结束后回调
         * @return {?}
         */
            function (containerEl, targetTopValue, easing, callback) {
                var _this = this;
                if (targetTopValue === void 0) {
                    targetTopValue = 0;
                }
                /** @type {?} */
                var target = containerEl ? containerEl : window;
                /** @type {?} */
                var scrollTop = this.getScroll(target);
                /** @type {?} */
                var startTime = Date.now();
                /** @type {?} */
                var frameFunc = function () {
                    /** @type {?} */
                    var timestamp = Date.now();
                    /** @type {?} */
                    var time = timestamp - startTime;
                    _this.setScrollTop(target, (easing || easeInOutCubic)(time, scrollTop, targetTopValue, 450));
                    if (time < 450) {
                        reqAnimFrame(frameFunc);
                    }
                    else {
                        if (callback)
                            callback();
                    }
                };
                reqAnimFrame(frameFunc);
            };
        NzScrollService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        NzScrollService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] }
            ];
        };
        return NzScrollService;
    }());
    /**
     * @param {?} doc
     * @param {?} scrollService
     * @return {?}
     */
    function SCROLL_SERVICE_PROVIDER_FACTORY(doc, scrollService) {
        return scrollService || new NzScrollService(doc);
    }
    /** @type {?} */
    var SCROLL_SERVICE_PROVIDER = {
        provide: NzScrollService,
        useFactory: SCROLL_SERVICE_PROVIDER_FACTORY,
        deps: [i3.DOCUMENT, [new i0.Optional(), new i0.SkipSelf(), NzScrollService]]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isNotNil(value) {
        return (typeof (value) !== 'undefined') && value !== null;
    }
    /**
     * 校验对象是否相等
     * @param {?} objA
     * @param {?} objB
     * @return {?}
     */
    function shallowEqual(objA, objB) {
        if (objA === objB) {
            return true;
        }
        if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {
            return false;
        }
        /** @type {?} */
        var keysA = Object.keys(objA);
        /** @type {?} */
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
            return false;
        }
        /** @type {?} */
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        // tslint:disable-next-line:prefer-for-of
        for (var idx = 0; idx < keysA.length; idx++) {
            /** @type {?} */
            var key = keysA[idx];
            if (!bHasOwnProperty(key)) {
                return false;
            }
            if (objA[key] !== objB[key]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isInteger(value) {
        return typeof value === 'number' &&
            isFinite(value) &&
            Math.floor(value) === value;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    function isEmpty(element) {
        /** @type {?} */
        var nodes = element.childNodes;
        for (var i = 0; i < nodes.length; i++) {
            if (filterNotEmptyNode(nodes.item(i))) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function filterNotEmptyNode(node) {
        if (node) {
            if ((node.nodeType === 1) && (( /** @type {?} */(node)).outerHTML.toString().trim().length !== 0)) {
                // ELEMENT_NODE
                return node;
            }
            else if ((node.nodeType === 3) && (node.textContent.toString().trim().length !== 0)) {
                // TEXT_NODE
                return node;
            }
            return null;
        }
        return null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNonEmptyString(value) {
        // tslint:disable-line:no-any
        return typeof value === 'string' && value !== '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isTemplateRef(value) {
        // tslint:disable-line:no-any
        return value instanceof i0.TemplateRef;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isComponent(value) {
        // tslint:disable-line:no-any
        return value instanceof i0.Type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function toBoolean(value) {
        return coercion.coerceBooleanProperty(value);
    }
    /**
     * @template D
     * @param {?} value
     * @param {?} fallback
     * @return {?}
     */
    function toNumber(value, fallback) {
        return coercion.coerceNumberProperty(value, fallback);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function toCssPixel(value) {
        return coercion.coerceCssPixelValue(value);
    }
    /**
     * @template T
     * @param {?} prop
     * @param {...?} args
     * @return {?}
     */
    function valueFunctionProp(prop) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // tslint:disable-line: no-any
        return typeof prop === 'function' ? prop.apply(void 0, __spread(args)) : prop;
    }
    /**
     * @template T, D
     * @param {?} name
     * @param {?} fallback
     * @return {?}
     */
    function propDecoratorFactory(name, fallback) {
        /**
         * @param {?} target
         * @param {?} propName
         * @return {?}
         */
        function propDecorator(target, propName) {
            /** @type {?} */
            var privatePropName = "$$__" + propName;
            if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
                console.warn("The prop \"" + privatePropName + "\" is already exist, it will be overrided by " + name + " decorator.");
            }
            Object.defineProperty(target, privatePropName, {
                configurable: true,
                writable: true
            });
            Object.defineProperty(target, propName, {
                get: /**
                 * @return {?}
                 */ function () {
                    return this[privatePropName]; // tslint:disable-line:no-invalid-this
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */ function (value) {
                    this[privatePropName] = fallback(value); // tslint:disable-line:no-invalid-this
                }
            });
        }
        return propDecorator;
    }
    /**
     * Input decorator that handle a prop to do get/set automatically with toBoolean
     *
     * Why not using \@InputBoolean alone without \@Input? AOT needs \@Input to be visible
     *
     * \@howToUse
     * ```
     * \@Input() \@InputBoolean() visible: boolean = false;
     *
     * // Act as below:
     * // \@Input()
     * // get visible() { return this.__visibile; }
     * // set visible(value) { this.__visible = value; }
     * // __visible = false;
     * ```
     * @return {?}
     */
    function InputBoolean() {
        // tslint:disable-line: no-any
        return propDecoratorFactory('InputBoolean', toBoolean);
    }
    /**
     * @return {?}
     */
    function InputCssPixel() {
        // tslint:disable-line: no-any
        return propDecoratorFactory('InputCssPixel', toCssPixel);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} fn
     * @return {?}
     */
    function throttleByAnimationFrame(fn) {
        /** @type {?} */
        var requestId;
        /** @type {?} */
        var later = function (args) {
            return function () {
                requestId = null;
                fn.apply(void 0, __spread(args));
            };
        };
        /** @type {?} */
        var throttled = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (requestId == null) {
                requestId = reqAnimFrame(later(args));
            }
        };
        // tslint:disable-next-line:no-non-null-assertion
        ( /** @type {?} */(throttled)).cancel = function () { return cancelRequestAnimationFrame(/** @type {?} */ ((requestId))); };
        return throttled;
    }
    /**
     * @return {?}
     */
    function throttleByAnimationFrameDecorator() {
        return function (target, key, descriptor) {
            /** @type {?} */
            var fn = descriptor.value;
            /** @type {?} */
            var definingProperty = false;
            return {
                configurable: true,
                get: /**
                 * @return {?}
                 */ function () {
                    if (definingProperty || this === target.prototype || this.hasOwnProperty(key)) {
                        return fn;
                    }
                    /** @type {?} */
                    var boundFn = throttleByAnimationFrame(fn.bind(this));
                    definingProperty = true;
                    Object.defineProperty(this, key, {
                        value: boundFn,
                        configurable: true,
                        writable: true
                    });
                    definingProperty = false;
                    return boundFn;
                }
            };
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAffixComponent = /** @class */ (function () {
        // tslint:disable-next-line:no-any
        function NzAffixComponent(scrollSrv, _el, doc, cd) {
            this.scrollSrv = scrollSrv;
            this._el = _el;
            this.doc = doc;
            this.cd = cd;
            this.nzChange = new i0.EventEmitter();
            this.events = [
                'resize',
                'scroll',
                'touchstart',
                'touchmove',
                'touchend',
                'pageshow',
                'load'
            ];
            this._target = window;
        }
        Object.defineProperty(NzAffixComponent.prototype, "nzTarget", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.clearEventListeners();
                this._target = typeof value === 'string' ? this.doc.querySelector(value) : value || window;
                this.setTargetEventListeners();
                this.updatePosition({});
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAffixComponent.prototype, "nzOffsetTop", {
            get: /**
             * @return {?}
             */ function () {
                return this._offsetTop;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (typeof value === 'undefined') {
                    return;
                }
                this._offsetTop = toNumber(value, null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAffixComponent.prototype, "nzOffsetBottom", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (typeof value === 'undefined') {
                    return;
                }
                this._offsetBottom = toNumber(value, null);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzAffixComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.timeout = setTimeout(function () {
                    _this.setTargetEventListeners();
                    _this.updatePosition({});
                });
            };
        /**
         * @return {?}
         */
        NzAffixComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clearEventListeners();
                clearTimeout(this.timeout);
                // tslint:disable-next-line:no-any
                ( /** @type {?} */(this.updatePosition)).cancel();
            };
        /**
         * @param {?} element
         * @param {?} target
         * @return {?}
         */
        NzAffixComponent.prototype.getOffset = /**
         * @param {?} element
         * @param {?} target
         * @return {?}
         */
            function (element, target) {
                /** @type {?} */
                var elemRect = element.getBoundingClientRect();
                /** @type {?} */
                var targetRect = this.getTargetRect(target);
                /** @type {?} */
                var scrollTop = this.scrollSrv.getScroll(target, true);
                /** @type {?} */
                var scrollLeft = this.scrollSrv.getScroll(target, false);
                /** @type {?} */
                var docElem = this.doc.body;
                /** @type {?} */
                var clientTop = docElem.clientTop || 0;
                /** @type {?} */
                var clientLeft = docElem.clientLeft || 0;
                return {
                    top: elemRect.top - targetRect.top + scrollTop - clientTop,
                    left: elemRect.left - targetRect.left + scrollLeft - clientLeft,
                    width: elemRect.width,
                    height: elemRect.height
                };
            };
        /**
         * @return {?}
         */
        NzAffixComponent.prototype.setTargetEventListeners = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.clearEventListeners();
                this.events.forEach(function (eventName) {
                    _this._target.addEventListener(eventName, _this.updatePosition, false);
                });
            };
        /**
         * @return {?}
         */
        NzAffixComponent.prototype.clearEventListeners = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.events.forEach(function (eventName) {
                    _this._target.removeEventListener(eventName, _this.updatePosition, false);
                });
            };
        /**
         * @param {?} target
         * @return {?}
         */
        NzAffixComponent.prototype.getTargetRect = /**
         * @param {?} target
         * @return {?}
         */
            function (target) {
                return target !== window ?
                    ( /** @type {?} */(target)).getBoundingClientRect() : /** @type {?} */ ({ top: 0, left: 0, bottom: 0 });
            };
        /**
         * @param {?} affixStyle
         * @return {?}
         */
        NzAffixComponent.prototype.genStyle = /**
         * @param {?} affixStyle
         * @return {?}
         */
            function (affixStyle) {
                if (affixStyle == null) {
                    return '';
                }
                return Object.keys(affixStyle).map(function (key) {
                    /** @type {?} */
                    var val = affixStyle[key];
                    return key + ":" + (typeof val === 'string' ? val : val + 'px');
                }).join(';');
            };
        /**
         * @param {?} e
         * @param {?} affixStyle
         * @return {?}
         */
        NzAffixComponent.prototype.setAffixStyle = /**
         * @param {?} e
         * @param {?} affixStyle
         * @return {?}
         */
            function (e, affixStyle) {
                /** @type {?} */
                var originalAffixStyle = this.affixStyle;
                /** @type {?} */
                var isWindow = this._target === window;
                if (e.type === 'scroll' && originalAffixStyle && affixStyle && isWindow) {
                    return;
                }
                if (shallowEqual(originalAffixStyle, affixStyle)) {
                    return;
                }
                /** @type {?} */
                var fixed = !!affixStyle;
                /** @type {?} */
                var wrapEl = /** @type {?} */ (this.wrap.nativeElement);
                wrapEl.style.cssText = this.genStyle(affixStyle);
                this.affixStyle = affixStyle;
                /** @type {?} */
                var cls = 'ant-affix';
                if (fixed) {
                    wrapEl.classList.add(cls);
                }
                else {
                    wrapEl.classList.remove(cls);
                }
                if ((affixStyle && !originalAffixStyle) || (!affixStyle && originalAffixStyle)) {
                    this.nzChange.emit(fixed);
                }
            };
        /**
         * @param {?} placeholderStyle
         * @return {?}
         */
        NzAffixComponent.prototype.setPlaceholderStyle = /**
         * @param {?} placeholderStyle
         * @return {?}
         */
            function (placeholderStyle) {
                /** @type {?} */
                var originalPlaceholderStyle = this.placeholderStyle;
                if (shallowEqual(placeholderStyle, originalPlaceholderStyle)) {
                    return;
                }
                ( /** @type {?} */(this._el.nativeElement)).style.cssText = this.genStyle(placeholderStyle);
                this.placeholderStyle = placeholderStyle;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        // tslint:disable-next-line:no-any
        NzAffixComponent.prototype.updatePosition = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var targetNode = this._target;
                /** @type {?} */
                var offsetTop = this.nzOffsetTop;
                /** @type {?} */
                var scrollTop = this.scrollSrv.getScroll(targetNode, true);
                /** @type {?} */
                var affixNode = /** @type {?} */ (this._el.nativeElement);
                /** @type {?} */
                var elemOffset = this.getOffset(affixNode, targetNode);
                /** @type {?} */
                var elemSize = {
                    width: affixNode.offsetWidth,
                    height: affixNode.offsetHeight
                };
                /** @type {?} */
                var offsetMode = {
                    top: false,
                    bottom: false
                };
                // Default to `offsetTop=0`.
                if (typeof offsetTop !== 'number' && typeof this._offsetBottom !== 'number') {
                    offsetMode.top = true;
                    offsetTop = 0;
                }
                else {
                    offsetMode.top = typeof offsetTop === 'number';
                    offsetMode.bottom = typeof this._offsetBottom === 'number';
                }
                /** @type {?} */
                var targetRect = this.getTargetRect(targetNode);
                /** @type {?} */
                var targetInnerHeight = ( /** @type {?} */(targetNode)).innerHeight || ( /** @type {?} */(targetNode)).clientHeight;
                if (scrollTop > elemOffset.top - ( /** @type {?} */(offsetTop)) && offsetMode.top) {
                    /** @type {?} */
                    var width = elemOffset.width;
                    /** @type {?} */
                    var top_1 = targetRect.top + ( /** @type {?} */(offsetTop));
                    this.setAffixStyle(e, {
                        position: 'fixed',
                        top: top_1,
                        left: targetRect.left + elemOffset.left,
                        maxHeight: "calc(100vh - " + top_1 + "px)",
                        width: width
                    });
                    this.setPlaceholderStyle({
                        width: width,
                        height: elemSize.height
                    });
                }
                else if (scrollTop < elemOffset.top + elemSize.height + ( /** @type {?} */(this._offsetBottom)) - targetInnerHeight &&
                    offsetMode.bottom) {
                    /** @type {?} */
                    var targetBottomOffet = targetNode === window ? 0 : (window.innerHeight - targetRect.bottom);
                    /** @type {?} */
                    var width = elemOffset.width;
                    this.setAffixStyle(e, {
                        position: 'fixed',
                        bottom: targetBottomOffet + ( /** @type {?} */(this._offsetBottom)),
                        left: targetRect.left + elemOffset.left,
                        width: width
                    });
                    this.setPlaceholderStyle({
                        width: width,
                        height: elemOffset.height
                    });
                }
                else {
                    if (e.type === 'resize' && this.affixStyle && this.affixStyle.position === 'fixed' && affixNode.offsetWidth) {
                        this.setAffixStyle(e, __assign({}, this.affixStyle, { width: affixNode.offsetWidth }));
                    }
                    else {
                        this.setAffixStyle(e, null);
                    }
                    this.setPlaceholderStyle(null);
                }
            };
        NzAffixComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-affix',
                        template: "<div #wrap>\n  <ng-content></ng-content>\n</div>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: ["\n    nz-affix {\n      display: block;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzAffixComponent.ctorParameters = function () {
            return [
                { type: NzScrollService },
                { type: i0.ElementRef },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzAffixComponent.propDecorators = {
            nzTarget: [{ type: i0.Input }],
            nzOffsetTop: [{ type: i0.Input }],
            nzOffsetBottom: [{ type: i0.Input }],
            nzChange: [{ type: i0.Output }],
            wrap: [{ type: i0.ViewChild, args: ['wrap',] }]
        };
        __decorate([
            throttleByAnimationFrameDecorator()
            // tslint:disable-next-line:no-any
            ,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], NzAffixComponent.prototype, "updatePosition", null);
        return NzAffixComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAffixModule = /** @class */ (function () {
        function NzAffixModule() {
        }
        NzAffixModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzAffixComponent],
                        exports: [NzAffixComponent],
                        imports: [i3.CommonModule],
                        providers: [SCROLL_SERVICE_PROVIDER]
                    },] }
        ];
        return NzAffixModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzStringTemplateOutletDirective = /** @class */ (function () {
        function NzStringTemplateOutletDirective(viewContainer, defaultTemplate) {
            this.viewContainer = viewContainer;
            this.defaultTemplate = defaultTemplate;
            this.inputTemplate = null;
            this.inputViewRef = null;
            this.defaultViewRef = null;
        }
        Object.defineProperty(NzStringTemplateOutletDirective.prototype, "nzStringTemplateOutlet", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value instanceof i0.TemplateRef) {
                    this.isTemplate = true;
                    this.inputTemplate = value;
                }
                else {
                    this.isTemplate = false;
                }
                this.updateView();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzStringTemplateOutletDirective.prototype.updateView = /**
         * @return {?}
         */
            function () {
                if (!this.isTemplate) {
                    /** use default template when input is string **/
                    if (!this.defaultViewRef) {
                        this.viewContainer.clear();
                        this.inputViewRef = null;
                        if (this.defaultTemplate) {
                            this.defaultViewRef = this.viewContainer.createEmbeddedView(this.defaultTemplate);
                        }
                    }
                }
                else {
                    /** use input template when input is templateRef **/
                    if (!this.inputViewRef) {
                        this.viewContainer.clear();
                        this.defaultViewRef = null;
                        if (this.inputTemplate) {
                            this.inputViewRef = this.viewContainer.createEmbeddedView(this.inputTemplate);
                        }
                    }
                }
            };
        NzStringTemplateOutletDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nzStringTemplateOutlet]'
                    },] }
        ];
        /** @nocollapse */
        NzStringTemplateOutletDirective.ctorParameters = function () {
            return [
                { type: i0.ViewContainerRef },
                { type: i0.TemplateRef }
            ];
        };
        NzStringTemplateOutletDirective.propDecorators = {
            nzStringTemplateOutlet: [{ type: i0.Input }]
        };
        return NzStringTemplateOutletDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAddOnModule = /** @class */ (function () {
        function NzAddOnModule() {
        }
        NzAddOnModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule],
                        exports: [NzStringTemplateOutletDirective],
                        declarations: [NzStringTemplateOutletDirective]
                    },] }
        ];
        return NzAddOnModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_ICONS$$1 = new i0.InjectionToken('nz_icons');
    /** @type {?} */
    var NZ_ICON_DEFAULT_TWOTONE_COLOR$$1 = new i0.InjectionToken('nz_icon_default_twotone_color');
    /** @type {?} */
    var DEFAULT_TWOTONE_COLOR$$1 = '#1890ff';
    /** @type {?} */
    var NZ_ICONS_USED_BY_ZORRO$$1 = [
        icons.CalendarOutline,
        icons.CheckCircleFill,
        icons.CheckCircleOutline,
        icons.CheckOutline,
        icons.ClockCircleOutline,
        icons.CloseCircleOutline,
        icons.CloseCircleFill,
        icons.CloseOutline,
        icons.DoubleLeftOutline,
        icons.DoubleRightOutline,
        icons.DownOutline,
        icons.ExclamationCircleFill,
        icons.ExclamationCircleOutline,
        icons.FilterFill,
        icons.InfoCircleFill,
        icons.InfoCircleOutline,
        icons.LeftOutline,
        icons.LoadingOutline,
        icons.PaperClipOutline,
        icons.QuestionCircleOutline,
        icons.RightOutline,
        icons.UploadOutline,
        icons.UpOutline
    ];
    /**
     * It should be a global singleton, otherwise registered icons could not be found.
     */
    var NzIconService$$1 = /** @class */ (function (_super) {
        __extends(NzIconService$$1, _super);
        function NzIconService$$1(rendererFactory, handler, 
        // tslint:disable-next-line:no-any
        document, icons$$1, defaultColor) {
            var _this = _super.call(this, rendererFactory, handler, document) || this;
            _this.rendererFactory = rendererFactory;
            _this.handler = handler;
            _this.document = document;
            _this.icons = icons$$1;
            _this.defaultColor = defaultColor;
            _this.iconfontCache = new Set();
            _this.warnedAboutAPI = false;
            _this.warnedAboutCross = false;
            _this.warnedAboutVertical = false;
            _this.addIcon.apply(_this, __spread(NZ_ICONS_USED_BY_ZORRO$$1, (_this.icons || [])));
            /** @type {?} */
            var primaryColor = DEFAULT_TWOTONE_COLOR$$1;
            if (_this.defaultColor) {
                if (_this.defaultColor.startsWith('#')) {
                    primaryColor = _this.defaultColor;
                }
                else {
                    console.warn('[NG-ZORRO]: twotone color must be a hex color!');
                }
            }
            _this.twoToneColor = { primaryColor: primaryColor };
            return _this;
        }
        /**
         * @param {?} type
         * @return {?}
         */
        NzIconService$$1.prototype.warnAPI = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                if (type === 'old' && !this.warnedAboutAPI) {
                    console.warn("<i class=\"anticon\"></i> would be deprecated soon. Please use <i nz-icon type=\"\"></i> API.");
                    this.warnedAboutAPI = true;
                }
                if (type === 'cross' && !this.warnedAboutCross) {
                    console.warn("'cross' icon is replaced by 'close' icon.");
                    this.warnedAboutCross = true;
                }
                if (type === 'vertical' && !this.warnedAboutVertical) {
                    console.warn("'verticle' is misspelled, would be corrected in the next major version.");
                    this.warnedAboutVertical = true;
                }
            };
        /**
         * @param {?} svg
         * @return {?}
         */
        NzIconService$$1.prototype.normalizeSvgElement = /**
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                if (!svg.getAttribute('viewBox')) {
                    this._renderer.setAttribute(svg, 'viewBox', '0 0 1024 1024');
                }
                if (!svg.getAttribute('width') || !svg.getAttribute('height')) {
                    this._renderer.setAttribute(svg, 'width', '1em');
                    this._renderer.setAttribute(svg, 'height', '1em');
                }
                if (!svg.getAttribute('fill')) {
                    this._renderer.setAttribute(svg, 'fill', 'currentColor');
                }
            };
        /**
         * @param {?} opt
         * @return {?}
         */
        NzIconService$$1.prototype.fetchFromIconfont = /**
         * @param {?} opt
         * @return {?}
         */
            function (opt) {
                var scriptUrl = opt.scriptUrl;
                if (this.document && !this.iconfontCache.has(scriptUrl)) {
                    /** @type {?} */
                    var script = this._renderer.createElement('script');
                    this._renderer.setAttribute(script, 'src', scriptUrl);
                    this._renderer.setAttribute(script, 'data-namespace', scriptUrl.replace(/^(https?|http):/g, ''));
                    this._renderer.appendChild(this.document.body, script);
                    this.iconfontCache.add(scriptUrl);
                }
            };
        /**
         * @param {?} type
         * @return {?}
         */
        NzIconService$$1.prototype.createIconfontIcon = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                return this._createSVGElementFromString("<svg><use xlink:href=\"" + type + "\"></svg>");
            };
        NzIconService$$1.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NzIconService$$1.ctorParameters = function () {
            return [
                { type: i0.RendererFactory2 },
                { type: i2.HttpBackend, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NZ_ICONS$$1,] }] },
                { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NZ_ICON_DEFAULT_TWOTONE_COLOR$$1,] }] }
            ];
        };
        /** @nocollapse */ NzIconService$$1.ngInjectableDef = i0.defineInjectable({ factory: function NzIconService_Factory() { return new NzIconService$$1(i0.inject(i0.RendererFactory2), i0.inject(i2.HttpBackend, 8), i0.inject(i3.DOCUMENT, 8), i0.inject(NZ_ICONS$$1, 8), i0.inject(NZ_ICON_DEFAULT_TWOTONE_COLOR$$1, 8)); }, token: NzIconService$$1, providedIn: "root" });
        return NzIconService$$1;
    }(iconsAngular.IconService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var iconTypeRE = /^anticon\-\w/;
    /** @type {?} */
    var getIconTypeClass = function (className) {
        if (!className) {
            return undefined;
        }
        else {
            /** @type {?} */
            var classArr = className.split(/\s/);
            /** @type {?} */
            var index = classArr.findIndex((function (cls) { return cls !== 'anticon' && cls !== 'anticon-spin' && !!cls.match(iconTypeRE); }));
            return index === -1 ? undefined : { name: classArr[index], index: index };
        }
    };
    /**
     * This directive extends IconDirective to provide:
     *
     * - IconFont support
     * - spinning
     * - old API compatibility
     */
    var NzIconDirective = /** @class */ (function (_super) {
        __extends(NzIconDirective, _super);
        function NzIconDirective(iconService, elementRef, renderer) {
            var _this = _super.call(this, iconService, elementRef, renderer) || this;
            _this.iconService = iconService;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.spin = false;
            _this.el = _this.elementRef.nativeElement;
            return _this;
        }
        /**
         * Replacement of `changeIcon` for more modifications.
         * @param {?=} oldAPI
         * @return {?}
         */
        NzIconDirective.prototype.changeIcon2 = /**
         * Replacement of `changeIcon` for more modifications.
         * @param {?=} oldAPI
         * @return {?}
         */
            function (oldAPI) {
                var _this = this;
                if (oldAPI === void 0) {
                    oldAPI = false;
                }
                if (!oldAPI) {
                    this.setClassName();
                }
                this._changeIcon().then(function (svg) {
                    _this.setSVGData(svg);
                    if (!oldAPI) {
                        _this.toggleSpin(svg);
                    }
                }).catch(function (err) {
                    if (err) {
                        console.error(err);
                        console.warn('[NG-ZORRO]', "You can find more about this error on http://ng.ant.design/components/icon/en");
                    }
                });
            };
        /**
         * @param {?} className
         * @return {?}
         */
        NzIconDirective.prototype.classChangeHandler = /**
         * @param {?} className
         * @return {?}
         */
            function (className) {
                /** @type {?} */
                var ret = getIconTypeClass(className);
                if (ret) {
                    /** @type {?} */
                    var type = ret.name.replace('anticon-', '');
                    if (type.includes('verticle')) {
                        type = type.replace('verticle', 'vertical');
                        this.iconService.warnAPI('cross');
                    }
                    if (type.startsWith('cross')) {
                        type = type.replace('cross', 'close');
                        this.iconService.warnAPI('vertical');
                    }
                    if (this.type !== type) {
                        this.type = type;
                        this.changeIcon2(true);
                    }
                }
            };
        /**
         * @param {?} svg
         * @return {?}
         */
        NzIconDirective.prototype.toggleSpin = /**
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                if ((this.spin || this.type === 'loading') && !this.elementRef.nativeElement.classList.contains('anticon-spin')) {
                    this.renderer.addClass(svg, 'anticon-spin');
                }
                else {
                    this.renderer.removeClass(svg, 'anticon-spin');
                }
            };
        /**
         * @return {?}
         */
        NzIconDirective.prototype.setClassName = /**
         * @return {?}
         */
            function () {
                if (typeof this.type === 'string') {
                    /** @type {?} */
                    var iconClassNameArr = this.el.className.split(/\s/);
                    /** @type {?} */
                    var ret = getIconTypeClass(this.el.className);
                    if (ret) {
                        iconClassNameArr.splice(ret.index, 1, "anticon-" + this.type);
                        this.renderer.setAttribute(this.el, 'class', iconClassNameArr.join(' '));
                    }
                    else {
                        this.renderer.addClass(this.el, "anticon-" + this.type);
                    }
                }
            };
        /**
         * @param {?} svg
         * @return {?}
         */
        NzIconDirective.prototype.setSVGData = /**
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                if (typeof this.type === 'string') {
                    this.renderer.setAttribute(svg, 'data-icon', this.type);
                    this.renderer.setAttribute(svg, 'aria-hidden', 'true');
                }
            };
        /**
         * @return {?}
         */
        NzIconDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (!this.iconfont) {
                    this.changeIcon2();
                }
                else {
                    this._setSVGElement(this.iconService.createIconfontIcon("#" + this.iconfont));
                }
            };
        /**
         * @return {?}
         */
        NzIconDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // If `this.type` is not specified and `classList` contains `anticon`, it should be an icon using old API.
                if (!this.type && this.el.classList.contains('anticon')) {
                    this.iconService.warnAPI('old');
                    // Get `type` from `className`. If not, initial rendering would be missed.
                    this.classChangeHandler(this.el.className);
                    // Add `class` mutation observer.
                    this.classNameObserver = new MutationObserver(function (mutations) {
                        mutations
                            .filter(function (mutation) { return mutation.attributeName === 'class'; })
                            .forEach(function (mutation) { return _this.classChangeHandler(( /** @type {?} */(mutation.target)).className); });
                    });
                    this.classNameObserver.observe(this.el, { attributes: true });
                }
                // If `classList` does not contain `anticon`, add it before other class names.
                if (!this.el.classList.contains('anticon')) {
                    this.renderer.setAttribute(this.el, 'class', ("anticon " + this.el.className).trim());
                }
            };
        /**
         * @return {?}
         */
        NzIconDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.classNameObserver) {
                    this.classNameObserver.disconnect();
                }
            };
        /**
         * If custom content is provided, try to normalize SVG elements.
         */
        /**
         * If custom content is provided, try to normalize SVG elements.
         * @return {?}
         */
        NzIconDirective.prototype.ngAfterContentChecked = /**
         * If custom content is provided, try to normalize SVG elements.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var children = this.el.children;
                /** @type {?} */
                var length = children.length;
                if (!this.type && children.length) {
                    while (length--) {
                        /** @type {?} */
                        var child = children[length];
                        if (child.tagName.toLowerCase() === 'svg') {
                            this.iconService.normalizeSvgElement(/** @type {?} */ (child));
                        }
                    }
                }
            };
        NzIconDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'i.anticon, [nz-icon]'
                    },] }
        ];
        /** @nocollapse */
        NzIconDirective.ctorParameters = function () {
            return [
                { type: NzIconService$$1 },
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzIconDirective.propDecorators = {
            spin: [{ type: i0.Input }],
            iconfont: [{ type: i0.Input }]
        };
        return NzIconDirective;
    }(iconsAngular.IconDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzIconModule = /** @class */ (function () {
        function NzIconModule() {
        }
        NzIconModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [NzIconDirective],
                        declarations: [NzIconDirective]
                    },] }
        ];
        return NzIconModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var fadeAnimation = animations.trigger('fadeAnimation', [
        animations.state('void', animations.style({ opacity: 0 })),
        animations.state('true', animations.style({ opacity: 1 })),
        animations.state('false', animations.style({ opacity: 0 })),
        animations.transition('* => true', animations.animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
        animations.transition('* => void', animations.animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAlertComponent = /** @class */ (function () {
        function NzAlertComponent() {
            this.display = true;
            this.isTypeSet = false;
            this.isShowIconSet = false;
            this.iconType = 'info-circle';
            this.iconTheme = 'fill';
            this.nzOnClose = new i0.EventEmitter();
            this.nzCloseable = false;
            this.nzShowIcon = false;
            this.nzBanner = false;
            this.nzType = 'info';
        }
        /**
         * @return {?}
         */
        NzAlertComponent.prototype.closeAlert = /**
         * @return {?}
         */
            function () {
                this.display = false;
            };
        /**
         * @return {?}
         */
        NzAlertComponent.prototype.onFadeAnimationDone = /**
         * @return {?}
         */
            function () {
                if (!this.display) {
                    this.nzOnClose.emit(true);
                }
            };
        /**
         * @return {?}
         */
        NzAlertComponent.prototype.updateIconClassMap = /**
         * @return {?}
         */
            function () {
                switch (this.nzType) {
                    case 'error':
                        this.iconType = 'close-circle';
                        break;
                    case 'success':
                        this.iconType = 'check-circle';
                        break;
                    case 'info':
                        this.iconType = 'info-circle';
                        break;
                    case 'warning':
                        this.iconType = 'exclamation-circle';
                        break;
                }
                if (this.nzDescription) {
                    this.iconTheme = 'outline';
                }
                else {
                    this.iconTheme = "fill";
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzAlertComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzShowIcon"]) {
                    this.isShowIconSet = true;
                }
                if (changes["nzDescription"] || changes["nzType"]) {
                    this.updateIconClassMap();
                }
                if (changes["nzType"]) {
                    this.isTypeSet = true;
                }
                if (changes["nzBanner"]) {
                    if (!this.isTypeSet) {
                        this.nzType = 'warning';
                    }
                    if (!this.isShowIconSet) {
                        this.nzShowIcon = true;
                    }
                }
            };
        NzAlertComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-alert',
                        animations: [fadeAnimation],
                        template: "<div *ngIf=\"display\"\n  class=\"ant-alert\"\n  [class.ant-alert-success]=\"nzType === 'success'\"\n  [class.ant-alert-info]=\"nzType === 'info'\"\n  [class.ant-alert-warning]=\"nzType === 'warning'\"\n  [class.ant-alert-error]=\"nzType === 'error'\"\n  [class.ant-alert-no-icon]=\"!nzShowIcon\"\n  [class.ant-alert-banner]=\"nzBanner\"\n  [class.ant-alert-with-description]=\"!!nzDescription\"\n  [@fadeAnimation]\n  (@fadeAnimation.done)=\"onFadeAnimationDone()\">\n  <ng-container *ngIf=\"nzShowIcon\">\n    <i class=\"ant-alert-icon\" [ngClass]=\"nzIconType\" *ngIf=\"nzIconType; else iconTemplate\"></i>\n    <ng-template #iconTemplate>\n      <i nz-icon class=\"ant-alert-icon\" [type]=\"iconType\" [theme]=\"iconTheme\"></i>\n    </ng-template>\n  </ng-container>\n  <span class=\"ant-alert-message\" *ngIf=\"nzMessage\">\n    <ng-container *nzStringTemplateOutlet=\"nzMessage\">{{ nzMessage }}</ng-container>\n  </span>\n  <span class=\"ant-alert-description\" *ngIf=\"nzDescription\">\n    <ng-container *nzStringTemplateOutlet=\"nzDescription\">{{ nzDescription }}</ng-container>\n  </span>\n  <a *ngIf=\"nzCloseable || nzCloseText\"\n    class=\"ant-alert-close-icon\"\n    (click)=\"closeAlert()\">\n    <ng-template #closeDefaultTemplate>\n      <i nz-icon type=\"close\" class=\"anticon-close\"></i>\n    </ng-template>\n    <ng-container *ngIf=\"nzCloseText; else closeDefaultTemplate\">\n      <ng-container *nzStringTemplateOutlet=\"nzCloseText\">{{ nzCloseText }}</ng-container>\n    </ng-container>\n  </a>\n</div>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        styles: ["nz-alert {\n      display: block;\n    }"]
                    }] }
        ];
        NzAlertComponent.propDecorators = {
            nzOnClose: [{ type: i0.Output }],
            nzCloseable: [{ type: i0.Input }],
            nzShowIcon: [{ type: i0.Input }],
            nzBanner: [{ type: i0.Input }],
            nzCloseText: [{ type: i0.Input }],
            nzIconType: [{ type: i0.Input }],
            nzMessage: [{ type: i0.Input }],
            nzDescription: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzAlertComponent.prototype, "nzCloseable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzAlertComponent.prototype, "nzShowIcon", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzAlertComponent.prototype, "nzBanner", void 0);
        return NzAlertComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAlertModule = /** @class */ (function () {
        function NzAlertModule() {
        }
        NzAlertModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzAlertComponent],
                        exports: [NzAlertComponent],
                        imports: [i3.CommonModule, NzIconModule, NzAddOnModule]
                    },] }
        ];
        return NzAlertModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var sharpMatcherRegx = /#([^#]+)$/;
    var NzAnchorComponent = /** @class */ (function () {
        // endregion
        /* tslint:disable-next-line:no-any */
        function NzAnchorComponent(scrollSrv, doc, cd) {
            this.scrollSrv = scrollSrv;
            this.doc = doc;
            this.cd = cd;
            this.links = [];
            this.animating = false;
            this.target = null;
            this.scroll$ = null;
            this.visible = false;
            this.wrapperStyle = { 'max-height': '100vh' };
            this._affix = true;
            this._bounds = 5;
            this._showInkInFixed = false;
            this.nzClick = new i0.EventEmitter();
            this.nzScroll = new i0.EventEmitter();
        }
        Object.defineProperty(NzAnchorComponent.prototype, "nzAffix", {
            get: /**
             * @return {?}
             */ function () {
                return this._affix;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._affix = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAnchorComponent.prototype, "nzBounds", {
            get: /**
             * @return {?}
             */ function () {
                return this._bounds;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._bounds = toNumber(value, 5);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAnchorComponent.prototype, "nzOffsetTop", {
            get: /**
             * @return {?}
             */ function () {
                return this._offsetTop;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._offsetTop = toNumber(value, 0);
                this.wrapperStyle = {
                    'max-height': "calc(100vh - " + this._offsetTop + "px)"
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAnchorComponent.prototype, "nzShowInkInFixed", {
            get: /**
             * @return {?}
             */ function () {
                return this._showInkInFixed;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showInkInFixed = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAnchorComponent.prototype, "nzTarget", {
            set: /**
             * @param {?} el
             * @return {?}
             */ function (el) {
                this.target = typeof el === 'string' ? this.doc.querySelector(el) : el;
                this.registerScrollEvent();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} link
         * @return {?}
         */
        NzAnchorComponent.prototype.registerLink = /**
         * @param {?} link
         * @return {?}
         */
            function (link) {
                this.links.push(link);
            };
        /**
         * @param {?} link
         * @return {?}
         */
        NzAnchorComponent.prototype.unregisterLink = /**
         * @param {?} link
         * @return {?}
         */
            function (link) {
                this.links.splice(this.links.indexOf(link), 1);
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.getTarget = /**
         * @return {?}
         */
            function () {
                return this.target || window;
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.registerScrollEvent();
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeListen();
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.registerScrollEvent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.removeListen();
                this.scroll$ = rxjs.fromEvent(this.getTarget(), 'scroll')
                    .pipe(operators.throttleTime(50), operators.distinctUntilChanged())
                    .subscribe(function () { return _this.handleScroll(); });
                // 由于页面刷新时滚动条位置的记忆
                // 倒置在dom未渲染完成，导致计算不正确
                setTimeout(function () { return _this.handleScroll(); });
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.removeListen = /**
         * @return {?}
         */
            function () {
                if (this.scroll$) {
                    this.scroll$.unsubscribe();
                }
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NzAnchorComponent.prototype.getOffsetTop = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                if (!element || !element.getClientRects().length) {
                    return 0;
                }
                /** @type {?} */
                var rect = element.getBoundingClientRect();
                if (!rect.width && !rect.height) {
                    return rect.top;
                }
                return rect.top - element.ownerDocument.documentElement.clientTop;
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.handleScroll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.animating) {
                    return;
                }
                /** @type {?} */
                var sections = [];
                /** @type {?} */
                var scope = (this.nzOffsetTop || 0) + this.nzBounds;
                this.links.forEach(function (comp) {
                    /** @type {?} */
                    var sharpLinkMatch = sharpMatcherRegx.exec(comp.nzHref.toString());
                    if (!sharpLinkMatch) {
                        return;
                    }
                    /** @type {?} */
                    var target = _this.doc.getElementById(sharpLinkMatch[1]);
                    if (target && _this.getOffsetTop(target) < scope) {
                        /** @type {?} */
                        var top_1 = _this.getOffsetTop(target);
                        sections.push({
                            top: top_1,
                            comp: comp
                        });
                    }
                });
                this.visible = !!sections.length;
                if (!this.visible) {
                    this.clearActive();
                    this.cd.detectChanges();
                }
                else {
                    /** @type {?} */
                    var maxSection = sections.reduce(function (prev, curr) { return curr.top > prev.top ? curr : prev; });
                    this.handleActive(maxSection.comp);
                }
            };
        /**
         * @return {?}
         */
        NzAnchorComponent.prototype.clearActive = /**
         * @return {?}
         */
            function () {
                this.links.forEach(function (i) {
                    i.active = false;
                    i.markForCheck();
                });
            };
        /**
         * @param {?} comp
         * @return {?}
         */
        NzAnchorComponent.prototype.handleActive = /**
         * @param {?} comp
         * @return {?}
         */
            function (comp) {
                this.clearActive();
                comp.active = true;
                comp.markForCheck();
                /** @type {?} */
                var linkNode = /** @type {?} */ (( /** @type {?} */(comp.el.nativeElement)).querySelector('.ant-anchor-link-title'));
                this.ink.nativeElement.style.top = linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5 + "px";
                this.cd.detectChanges();
                this.nzScroll.emit(comp);
            };
        /**
         * @param {?} linkComp
         * @return {?}
         */
        NzAnchorComponent.prototype.handleScrollTo = /**
         * @param {?} linkComp
         * @return {?}
         */
            function (linkComp) {
                var _this = this;
                /** @type {?} */
                var el = this.doc.querySelector(linkComp.nzHref);
                if (!el) {
                    return;
                }
                this.animating = true;
                /** @type {?} */
                var containerScrollTop = this.scrollSrv.getScroll(this.getTarget());
                /** @type {?} */
                var elOffsetTop = this.scrollSrv.getOffset(el).top;
                /** @type {?} */
                var targetScrollTop = containerScrollTop + elOffsetTop - (this.nzOffsetTop || 0);
                this.scrollSrv.scrollTo(this.getTarget(), targetScrollTop, null, function () {
                    _this.animating = false;
                    _this.handleActive(linkComp);
                });
                this.nzClick.emit(linkComp.nzHref);
            };
        NzAnchorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-anchor',
                        preserveWhitespaces: false,
                        template: "<nz-affix *ngIf=\"nzAffix;else content\" [nzOffsetTop]=\"nzOffsetTop\">\n  <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n</nz-affix>\n<ng-template #content>\n  <div class=\"ant-anchor-wrapper\" [ngStyle]=\"wrapperStyle\">\n    <div class=\"ant-anchor\" [ngClass]=\"{'fixed': !nzAffix && !nzShowInkInFixed}\">\n      <div class=\"ant-anchor-ink\">\n        <div class=\"ant-anchor-ink-ball\" [class.visible]=\"visible\" #ink></div>\n      </div>\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>",
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzAnchorComponent.ctorParameters = function () {
            return [
                { type: NzScrollService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzAnchorComponent.propDecorators = {
            ink: [{ type: i0.ViewChild, args: ['ink',] }],
            nzAffix: [{ type: i0.Input }],
            nzBounds: [{ type: i0.Input }],
            nzOffsetTop: [{ type: i0.Input }],
            nzShowInkInFixed: [{ type: i0.Input }],
            nzTarget: [{ type: i0.Input }],
            nzClick: [{ type: i0.Output }],
            nzScroll: [{ type: i0.Output }]
        };
        return NzAnchorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAnchorLinkComponent = /** @class */ (function () {
        function NzAnchorLinkComponent(el, anchorComp, cdr) {
            this.el = el;
            this.anchorComp = anchorComp;
            this.cdr = cdr;
            this.nzHref = '#';
            this.titleStr = '';
            this.active = false;
        }
        Object.defineProperty(NzAnchorLinkComponent.prototype, "nzTitle", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value instanceof i0.TemplateRef) {
                    this.titleStr = null;
                    this.titleTpl = value;
                }
                else {
                    this.titleStr = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzAnchorLinkComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.anchorComp.registerLink(this);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzAnchorLinkComponent.prototype.goToClick = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.preventDefault();
                e.stopPropagation();
                this.anchorComp.handleScrollTo(this);
            };
        /**
         * @return {?}
         */
        NzAnchorLinkComponent.prototype.markForCheck = /**
         * @return {?}
         */
            function () {
                this.cdr.markForCheck();
            };
        /**
         * @return {?}
         */
        NzAnchorLinkComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.anchorComp.unregisterLink(this);
            };
        NzAnchorLinkComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-link',
                        preserveWhitespaces: false,
                        template: "<a (click)=\"goToClick($event)\" href=\"{{nzHref}}\" class=\"ant-anchor-link-title\" title=\"{{titleStr}}\">\n  <span *ngIf=\"titleStr; else (titleTpl || nzTemplate)\">{{ titleStr }}</span>\n</a>\n<ng-content></ng-content>",
                        host: {
                            '[class.ant-anchor-link]': 'true'
                        },
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    nz-link {\n      display: block;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzAnchorLinkComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NzAnchorComponent },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzAnchorLinkComponent.propDecorators = {
            nzHref: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzTemplate: [{ type: i0.ContentChild, args: ['nzTemplate',] }],
            active: [{ type: i0.HostBinding, args: ['class.ant-anchor-link-active',] }]
        };
        return NzAnchorLinkComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAnchorModule = /** @class */ (function () {
        function NzAnchorModule() {
        }
        NzAnchorModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzAnchorComponent, NzAnchorLinkComponent],
                        exports: [NzAnchorComponent, NzAnchorLinkComponent],
                        imports: [i3.CommonModule, NzAffixModule],
                        providers: [SCROLL_SERVICE_PROVIDER]
                    },] }
        ];
        return NzAnchorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAutocompleteOptgroupComponent = /** @class */ (function () {
        function NzAutocompleteOptgroupComponent() {
        }
        NzAutocompleteOptgroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-auto-optgroup',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<div class=\"ant-select-dropdown-menu-item-group-title\">\n  <ng-container *nzStringTemplateOutlet=\"nzLabel\">{{nzLabel}}</ng-container>\n</div>\n<ul class=\"ant-select-dropdown-menu-item-group-list\">\n  <ng-content select=\"nz-auto-option\"></ng-content>\n</ul>\n",
                        host: {
                            'role': 'group',
                            'class': 'ant-select-dropdown-menu-item-group'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzAutocompleteOptgroupComponent.ctorParameters = function () { return []; };
        NzAutocompleteOptgroupComponent.propDecorators = {
            nzLabel: [{ type: i0.Input }]
        };
        return NzAutocompleteOptgroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} node
     * @return {?}
     */
    function scrollIntoView(node) {
        // Non-standard
        /* tslint:disable-next-line:no-string-literal */
        if (node['scrollIntoViewIfNeeded']) {
            /* tslint:disable-next-line:no-string-literal */
            node['scrollIntoViewIfNeeded'](false);
            return;
        }
        if (node.scrollIntoView) {
            node.scrollIntoView(false);
            return;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzOptionSelectionChange = /** @class */ (function () {
        function NzOptionSelectionChange(source, isUserInput) {
            if (isUserInput === void 0) {
                isUserInput = false;
            }
            this.source = source;
            this.isUserInput = isUserInput;
        }
        return NzOptionSelectionChange;
    }());
    var NzAutocompleteOptionComponent = /** @class */ (function () {
        function NzAutocompleteOptionComponent(changeDetectorRef, element) {
            this.changeDetectorRef = changeDetectorRef;
            this.element = element;
            this.nzDisabled = false;
            this.selectionChange = new i0.EventEmitter();
            this.active = false;
            this.selected = false;
        }
        /**
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.select = /**
         * @return {?}
         */
            function () {
                this.selected = true;
                this.changeDetectorRef.markForCheck();
                this.emitSelectionChangeEvent();
            };
        /**
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.deselect = /**
         * @return {?}
         */
            function () {
                this.selected = false;
                this.changeDetectorRef.markForCheck();
                this.emitSelectionChangeEvent();
            };
        /** Git display label */
        /**
         * Git display label
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.getLabel = /**
         * Git display label
         * @return {?}
         */
            function () {
                return this.nzLabel || this.nzValue.toString();
            };
        /** Set active (only styles) */
        /**
         * Set active (only styles)
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.setActiveStyles = /**
         * Set active (only styles)
         * @return {?}
         */
            function () {
                if (!this.active) {
                    this.active = true;
                    this.changeDetectorRef.markForCheck();
                }
            };
        /** Unset active (only styles) */
        /**
         * Unset active (only styles)
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.setInactiveStyles = /**
         * Unset active (only styles)
         * @return {?}
         */
            function () {
                if (this.active) {
                    this.active = false;
                    this.changeDetectorRef.markForCheck();
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.scrollIntoViewIfNeeded = /**
         * @return {?}
         */
            function () {
                scrollIntoView(this.element.nativeElement);
            };
        /**
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.selectViaInteraction = /**
         * @return {?}
         */
            function () {
                if (!this.nzDisabled) {
                    this.selected = !this.selected;
                    if (this.selected) {
                        this.setActiveStyles();
                    }
                    else {
                        this.setInactiveStyles();
                    }
                    this.emitSelectionChangeEvent(true);
                    this.changeDetectorRef.markForCheck();
                }
            };
        /**
         * @param {?=} isUserInput
         * @return {?}
         */
        NzAutocompleteOptionComponent.prototype.emitSelectionChangeEvent = /**
         * @param {?=} isUserInput
         * @return {?}
         */
            function (isUserInput) {
                if (isUserInput === void 0) {
                    isUserInput = false;
                }
                this.selectionChange.emit(new NzOptionSelectionChange(this, isUserInput));
            };
        NzAutocompleteOptionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-auto-option',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<ng-content></ng-content>",
                        host: {
                            'role': 'menuitem',
                            'class': 'ant-select-dropdown-menu-item',
                            '[class.ant-select-dropdown-menu-item-selected]': 'selected',
                            '[class.ant-select-dropdown-menu-item-active]': 'active',
                            '[class.ant-select-dropdown-menu-item-disabled]': 'nzDisabled',
                            '[attr.aria-selected]': 'selected.toString()',
                            '[attr.aria-disabled]': 'nzDisabled.toString()',
                            '(click)': 'selectViaInteraction()'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzAutocompleteOptionComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: i0.ElementRef }
            ];
        };
        NzAutocompleteOptionComponent.propDecorators = {
            nzValue: [{ type: i0.Input }],
            nzLabel: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            selectionChange: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzAutocompleteOptionComponent.prototype, "nzDisabled", void 0);
        return NzAutocompleteOptionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_AUTOCOMPLETE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NzAutocompleteTriggerDirective; }),
        multi: true
    };
    /**
     * @return {?}
     */
    function getNzAutocompleteMissingPanelError() {
        return Error('Attempting to open an undefined instance of `nz-autocomplete`. ' +
            'Make sure that the id passed to the `nzAutocomplete` is correct and that ' +
            'you\'re attempting to open it after the ngAfterContentInit hook.');
    }
    var NzAutocompleteTriggerDirective = /** @class */ (function () {
        function NzAutocompleteTriggerDirective(elementRef, _overlay, viewContainerRef, 
        // tslint:disable-next-line:no-any
        document) {
            this.elementRef = elementRef;
            this._overlay = _overlay;
            this.viewContainerRef = viewContainerRef;
            this.document = document;
            this._onChange = function () { };
            this._onTouched = function () { };
            this.panelOpen = false;
        }
        Object.defineProperty(NzAutocompleteTriggerDirective.prototype, "activeOption", {
            /** Current active option */
            get: /**
             * Current active option
             * @return {?}
             */ function () {
                if (this.nzAutocomplete && this.nzAutocomplete.options.length) {
                    return this.nzAutocomplete.activeItem;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroyPanel();
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.setTriggerValue(value);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                /** @type {?} */
                var element = this.elementRef.nativeElement;
                element.disabled = isDisabled;
                this.closePanel();
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.openPanel = /**
         * @return {?}
         */
            function () {
                this.attachOverlay();
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.closePanel = /**
         * @return {?}
         */
            function () {
                if (this.panelOpen) {
                    this.nzAutocomplete.isOpen = this.panelOpen = false;
                    if (this.overlayRef && this.overlayRef.hasAttached()) {
                        this.selectionChangeSubscription.unsubscribe();
                        this.overlayBackdropClickSubscription.unsubscribe();
                        this.overlayPositionChangeSubscription.unsubscribe();
                        this.optionsChangeSubscription.unsubscribe();
                        this.overlayRef.detach();
                        this.overlayRef = null;
                        this.portal = null;
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.handleKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var keyCode = event.keyCode;
                /** @type {?} */
                var isArrowKey = keyCode === keycodes.UP_ARROW || keyCode === keycodes.DOWN_ARROW;
                if (keyCode === keycodes.ESCAPE) {
                    event.preventDefault();
                }
                if (this.panelOpen && (keyCode === keycodes.ESCAPE || keyCode === keycodes.TAB)) {
                    // Reset value when tab / ESC close
                    if (this.activeOption && this.activeOption.getLabel() !== this.previousValue) {
                        this.setTriggerValue(this.previousValue);
                    }
                    this.closePanel();
                }
                else if (this.panelOpen && keyCode === keycodes.ENTER) {
                    event.preventDefault();
                    if (this.nzAutocomplete.showPanel && this.activeOption) {
                        this.activeOption.selectViaInteraction();
                    }
                }
                else if (this.panelOpen && isArrowKey && this.nzAutocomplete.showPanel) {
                    event.stopPropagation();
                    if (keyCode === keycodes.UP_ARROW) {
                        this.nzAutocomplete.setPreviousItemActive();
                    }
                    else {
                        this.nzAutocomplete.setNextItemActive();
                    }
                    if (this.activeOption) {
                        this.activeOption.scrollIntoViewIfNeeded();
                    }
                    this.doBackfill();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.handleInput = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var target = /** @type {?} */ (event.target);
                /** @type {?} */
                var value = target.value;
                if (target.type === 'number') {
                    value = value === '' ? null : parseFloat(value);
                }
                if (this.canOpen() && document.activeElement === event.target &&
                    this.previousValue !== value) {
                    this.previousValue = value;
                    this._onChange(value);
                    this.openPanel();
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.handleFocus = /**
         * @return {?}
         */
            function () {
                if (this.canOpen()) {
                    this.previousValue = this.elementRef.nativeElement.value;
                    this.openPanel();
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.handleBlur = /**
         * @return {?}
         */
            function () {
                this._onTouched();
            };
        /**
         * Subscription data source changes event
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.subscribeOptionsChange = /**
         * Subscription data source changes event
         * @return {?}
         */
            function () {
                var _this = this;
                return this.nzAutocomplete.options.changes.pipe(operators.delay(0)).subscribe(function () {
                    _this.resetActiveItem();
                });
            };
        /**
         * Subscription option changes event and set the value
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.subscribeSelectionChange = /**
         * Subscription option changes event and set the value
         * @return {?}
         */
            function () {
                var _this = this;
                return this.nzAutocomplete.selectionChange
                    .subscribe(function (option) {
                    _this.setValueAndClose(option);
                });
            };
        /**
         * Subscription external click and close panel
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.subscribeOverlayBackdropClick = /**
         * Subscription external click and close panel
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.merge(rxjs.fromEvent(this.document, 'click'), rxjs.fromEvent(this.document, 'touchend'))
                    .subscribe(function (event) {
                    /** @type {?} */
                    var clickTarget = /** @type {?} */ (event.target);
                    // Make sure is not self
                    if (clickTarget !== _this.elementRef.nativeElement && !_this.overlayRef.overlayElement.contains(clickTarget) && _this.panelOpen) {
                        _this.closePanel();
                    }
                });
            };
        /**
         * Subscription overlay position changes and reset dropdown position
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.subscribeOverlayPositionChange = /**
         * Subscription overlay position changes and reset dropdown position
         * @return {?}
         */
            function () {
                var _this = this;
                return this.positionStrategy.positionChanges
                    .pipe(operators.map(function (position) { return position.connectionPair.originY; }), operators.distinct())
                    .subscribe(function (position) {
                    _this.nzAutocomplete.dropDownPosition = position;
                });
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.attachOverlay = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.nzAutocomplete) {
                    throw getNzAutocompleteMissingPanelError();
                }
                if (!this.portal) {
                    this.portal = new portal.TemplatePortal(this.nzAutocomplete.template, this.viewContainerRef);
                }
                if (!this.overlayRef) {
                    this.overlayRef = this._overlay.create(this.getOverlayConfig());
                }
                if (this.overlayRef && !this.overlayRef.hasAttached()) {
                    this.overlayRef.attach(this.portal);
                    this.overlayPositionChangeSubscription = this.subscribeOverlayPositionChange();
                    this.selectionChangeSubscription = this.subscribeSelectionChange();
                    this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();
                    this.optionsChangeSubscription = this.subscribeOptionsChange();
                }
                this.nzAutocomplete.isOpen = this.panelOpen = true;
                this.nzAutocomplete.setVisibility();
                this.overlayRef.updateSize({ width: this.nzAutocomplete.nzWidth || this.getHostWidth() });
                setTimeout(function () {
                    if (_this.overlayRef) {
                        _this.overlayRef.updatePosition();
                    }
                }, 150);
                this.resetActiveItem();
                if (this.activeOption) {
                    this.activeOption.scrollIntoViewIfNeeded();
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.destroyPanel = /**
         * @return {?}
         */
            function () {
                if (this.overlayRef) {
                    this.closePanel();
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.getOverlayConfig = /**
         * @return {?}
         */
            function () {
                return new i2$1.OverlayConfig({
                    positionStrategy: this.getOverlayPosition(),
                    scrollStrategy: this._overlay.scrollStrategies.reposition(),
                    // default host element width
                    width: this.nzAutocomplete.nzWidth || this.getHostWidth()
                });
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.getConnectedElement = /**
         * @return {?}
         */
            function () {
                return this.elementRef;
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.getHostWidth = /**
         * @return {?}
         */
            function () {
                return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.getOverlayPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var positions = [
                    new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
                    new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                ];
                this.positionStrategy = this._overlay.position()
                    .flexibleConnectedTo(this.getConnectedElement())
                    .withPositions(positions)
                    .withFlexibleDimensions(false)
                    .withPush(false);
                return this.positionStrategy;
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.resetActiveItem = /**
         * @return {?}
         */
            function () {
                if (this.nzAutocomplete.activeItem && this.nzAutocomplete.getOptionIndex(this.nzAutocomplete.activeItem)) {
                    this.nzAutocomplete.setActiveItem(this.nzAutocomplete.getOptionIndex(this.nzAutocomplete.activeItem));
                }
                else {
                    this.nzAutocomplete.setActiveItem(this.nzAutocomplete.nzDefaultActiveFirstOption ? 0 : -1);
                }
            };
        /**
         * @param {?} option
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.setValueAndClose = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                /** @type {?} */
                var value = option.nzValue;
                this.setTriggerValue(option.getLabel());
                this._onChange(value);
                this.elementRef.nativeElement.focus();
                this.closePanel();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.setTriggerValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.elementRef.nativeElement.value = value || '';
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.doBackfill = /**
         * @return {?}
         */
            function () {
                if (this.nzAutocomplete.nzBackfill && this.nzAutocomplete.activeItem) {
                    this.setTriggerValue(this.nzAutocomplete.activeItem.getLabel());
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteTriggerDirective.prototype.canOpen = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var element = this.elementRef.nativeElement;
                return !element.readOnly && !element.disabled;
            };
        NzAutocompleteTriggerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: "input[nzAutocomplete], textarea[nzAutocomplete]",
                        providers: [NZ_AUTOCOMPLETE_VALUE_ACCESSOR],
                        host: {
                            'autocomplete': 'off',
                            'aria-autocomplete': 'list',
                            '(focusin)': 'handleFocus()',
                            '(blur)': 'handleBlur()',
                            '(input)': 'handleInput($event)',
                            '(keydown)': 'handleKeydown($event)'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzAutocompleteTriggerDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i2$1.Overlay },
                { type: i0.ViewContainerRef },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i3.DOCUMENT,] }] }
            ];
        };
        NzAutocompleteTriggerDirective.propDecorators = {
            nzAutocomplete: [{ type: i0.Input }]
        };
        return NzAutocompleteTriggerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var dropDownAnimation = animations.trigger('dropDownAnimation', [
        animations.state('bottom', animations.style({
            opacity: 1,
            transform: 'scaleY(1)',
            transformOrigin: '0% 0%'
        })),
        animations.transition('void => bottom', [
            animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 0%'
            }),
            animations.animate('150ms cubic-bezier(0.23, 1, 0.32, 1)')
        ]),
        animations.transition('bottom => void', [
            animations.animate('150ms cubic-bezier(0.23, 1, 0.32, 1)', animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 0%'
            }))
        ]),
        animations.state('top', animations.style({
            opacity: 1,
            transform: 'scaleY(1)',
            transformOrigin: '0% 100%'
        })),
        animations.transition('void => top', [
            animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 100%'
            }),
            animations.animate('150ms cubic-bezier(0.23, 1, 0.32, 1)')
        ]),
        animations.transition('top => void', [
            animations.animate('150ms cubic-bezier(0.23, 1, 0.32, 1)', animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 100%'
            }))
        ])
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAutocompleteComponent = /** @class */ (function () {
        function NzAutocompleteComponent(changeDetectorRef, ngZone) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.ngZone = ngZone;
            this.nzDefaultActiveFirstOption = true;
            this.nzBackfill = false;
            this.selectionChange = new i0.EventEmitter();
            this.showPanel = false;
            this.isOpen = false;
            this.dropDownPosition = 'bottom';
            this.activeItemIndex = -1;
            this.selectionChangeSubscription = rxjs.Subscription.EMPTY;
            this.dataSourceChangeSubscription = rxjs.Subscription.EMPTY;
            /**
             * Options changes listener
             */
            this.optionSelectionChanges = rxjs.defer(function () {
                if (_this.options) {
                    return rxjs.merge.apply(void 0, __spread(_this.options.map(function (option) { return option.selectionChange; })));
                }
                return _this.ngZone.onStable
                    .asObservable()
                    .pipe(operators.take(1), operators.switchMap(function () { return _this.optionSelectionChanges; }));
            });
        }
        Object.defineProperty(NzAutocompleteComponent.prototype, "options", {
            /**
             * Options accessor, its source may be content or dataSource
             */
            get: /**
             * Options accessor, its source may be content or dataSource
             * @return {?}
             */ function () {
                // first dataSource
                if (this.nzDataSource) {
                    return this.fromDataSourceOptions;
                }
                else {
                    return this.fromContentOptions;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.optionsInit();
            };
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.dataSourceChangeSubscription.unsubscribe();
                this.selectionChangeSubscription.unsubscribe();
            };
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.setVisibility = /**
         * @return {?}
         */
            function () {
                this.showPanel = !!this.options.length;
                this.changeDetectorRef.markForCheck();
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NzAutocompleteComponent.prototype.setActiveItem = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                /** @type {?} */
                var activeItem = this.options.toArray()[index];
                if (activeItem && !activeItem.active) {
                    this.activeItem = activeItem;
                    this.activeItemIndex = index;
                    this.clearSelectedOptions(this.activeItem);
                    this.activeItem.setActiveStyles();
                    this.changeDetectorRef.markForCheck();
                }
            };
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.setNextItemActive = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var nextIndex = this.activeItemIndex + 1 <= this.options.length - 1 ? this.activeItemIndex + 1 : 0;
                this.setActiveItem(nextIndex);
            };
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.setPreviousItemActive = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var previousIndex = this.activeItemIndex - 1 < 0 ? this.options.length - 1 : this.activeItemIndex - 1;
                this.setActiveItem(previousIndex);
            };
        /**
         * @param {?} option
         * @return {?}
         */
        NzAutocompleteComponent.prototype.getOptionIndex = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                return this.options.reduce(function (result, current, index) {
                    return result === undefined ? (option === current ? index : undefined) : result;
                }, undefined);
            };
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.optionsInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.setVisibility();
                this.subscribeOptionChanges();
                /** @type {?} */
                var changes = this.nzDataSource ? this.fromDataSourceOptions.changes : this.fromContentOptions.changes;
                // async
                this.dataSourceChangeSubscription = changes.subscribe(function (e) {
                    if (!e.dirty && _this.isOpen) {
                        setTimeout(function () { return _this.setVisibility(); });
                    }
                    _this.subscribeOptionChanges();
                });
            };
        /**
         * Clear the status of options
         * @param {?=} skip
         * @param {?=} deselect
         * @return {?}
         */
        NzAutocompleteComponent.prototype.clearSelectedOptions = /**
         * Clear the status of options
         * @param {?=} skip
         * @param {?=} deselect
         * @return {?}
         */
            function (skip, deselect) {
                if (deselect === void 0) {
                    deselect = false;
                }
                this.options.forEach(function (option) {
                    if (option !== skip) {
                        if (deselect) {
                            option.deselect();
                        }
                        option.setInactiveStyles();
                    }
                });
            };
        /**
         * @return {?}
         */
        NzAutocompleteComponent.prototype.subscribeOptionChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectionChangeSubscription.unsubscribe();
                this.selectionChangeSubscription = this.optionSelectionChanges
                    .pipe(operators.filter(function (event) { return event.isUserInput; }))
                    .subscribe(function (event) {
                    event.source.select();
                    event.source.setActiveStyles();
                    _this.activeItem = event.source;
                    _this.activeItemIndex = _this.getOptionIndex(_this.activeItem);
                    _this.clearSelectedOptions(event.source, true);
                    _this.selectionChange.emit(event.source);
                });
            };
        NzAutocompleteComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-autocomplete',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<ng-template>\n  <div class=\"ant-select-dropdown ant-select-dropdown--single ant-select-dropdown-placement-bottomLeft\"\n    #panel\n    [@dropDownAnimation]=\"dropDownPosition\"\n    [class.ant-select-dropdown-hidden]=\"!showPanel\">\n    <div style=\"overflow: auto;\">\n      <ul class=\"ant-select-dropdown-menu  ant-select-dropdown-menu-root ant-select-dropdown-menu-vertical\"\n        role=\"menu\"\n        aria-activedescendant>\n        <ng-template *ngTemplateOutlet=\"nzDataSource ? optionsTemplate : contentTemplate\"></ng-template>\n      </ul>\n    </div>\n  </div>\n  <ng-template #contentTemplate>\n    <ng-content></ng-content>\n  </ng-template>\n  <ng-template #optionsTemplate>\n    <nz-auto-option *ngFor=\"let option of nzDataSource\" [nzValue]=\"option\">{{option}}</nz-auto-option>\n  </ng-template>\n</ng-template>",
                        animations: [
                            dropDownAnimation
                        ],
                        styles: ["\n      .ant-select-dropdown {\n        top: 100%;\n        left: 0;\n        position: relative;\n        width: 100%;\n        margin-top: 4px;\n        margin-bottom: 4px;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzAutocompleteComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: i0.NgZone }
            ];
        };
        NzAutocompleteComponent.propDecorators = {
            nzWidth: [{ type: i0.Input }],
            nzDefaultActiveFirstOption: [{ type: i0.Input }],
            nzBackfill: [{ type: i0.Input }],
            nzDataSource: [{ type: i0.Input }],
            selectionChange: [{ type: i0.Output }],
            fromContentOptions: [{ type: i0.ContentChildren, args: [NzAutocompleteOptionComponent, { descendants: true },] }],
            fromDataSourceOptions: [{ type: i0.ViewChildren, args: [NzAutocompleteOptionComponent,] }],
            template: [{ type: i0.ViewChild, args: [i0.TemplateRef,] }],
            panel: [{ type: i0.ViewChild, args: ['panel',] }],
            content: [{ type: i0.ViewChild, args: ['content',] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzAutocompleteComponent.prototype, "nzDefaultActiveFirstOption", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzAutocompleteComponent.prototype, "nzBackfill", void 0);
        return NzAutocompleteComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAutocompleteModule = /** @class */ (function () {
        function NzAutocompleteModule() {
        }
        NzAutocompleteModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzAutocompleteComponent, NzAutocompleteOptionComponent, NzAutocompleteTriggerDirective, NzAutocompleteOptgroupComponent],
                        exports: [NzAutocompleteComponent, NzAutocompleteOptionComponent, NzAutocompleteTriggerDirective, NzAutocompleteOptgroupComponent],
                        imports: [i3.CommonModule, i2$1.OverlayModule, forms.FormsModule, NzAddOnModule]
                    },] }
        ];
        return NzAutocompleteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzUpdateHostClassService = /** @class */ (function () {
        function NzUpdateHostClassService(renderer) {
            this.renderer = renderer;
            this.classMap = {};
        }
        /**
         * @param {?} el
         * @param {?} classMap
         * @return {?}
         */
        NzUpdateHostClassService.prototype.updateHostClass = /**
         * @param {?} el
         * @param {?} classMap
         * @return {?}
         */
            function (el, classMap) {
                this.removeClass(el, this.classMap, this.renderer);
                this.classMap = __assign({}, classMap);
                this.addClass(el, this.classMap, this.renderer);
            };
        /**
         * @param {?} el
         * @param {?} classMap
         * @param {?} renderer
         * @return {?}
         */
        NzUpdateHostClassService.prototype.removeClass = /**
         * @param {?} el
         * @param {?} classMap
         * @param {?} renderer
         * @return {?}
         */
            function (el, classMap, renderer) {
                for (var i in classMap) {
                    if (classMap.hasOwnProperty(i)) {
                        renderer.removeClass(el, i);
                    }
                }
            };
        /**
         * @param {?} el
         * @param {?} classMap
         * @param {?} renderer
         * @return {?}
         */
        NzUpdateHostClassService.prototype.addClass = /**
         * @param {?} el
         * @param {?} classMap
         * @param {?} renderer
         * @return {?}
         */
            function (el, classMap, renderer) {
                for (var i in classMap) {
                    if (classMap.hasOwnProperty(i)) {
                        if (classMap[i]) {
                            renderer.addClass(el, i);
                        }
                    }
                }
            };
        NzUpdateHostClassService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        NzUpdateHostClassService.ctorParameters = function () {
            return [
                { type: i0.Renderer2 }
            ];
        };
        return NzUpdateHostClassService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAvatarComponent = /** @class */ (function () {
        function NzAvatarComponent(elementRef, cd, updateHostClassService, renderer) {
            this.elementRef = elementRef;
            this.cd = cd;
            this.updateHostClassService = updateHostClassService;
            this.renderer = renderer;
            this.nzShape = 'circle';
            this.nzSize = 'default';
            this.oldAPIIcon = true; // Make the user defined icon compatible to old API. Should be removed in 2.0.
            this.hasText = false;
            this.hasSrc = true;
            this.hasIcon = false;
            this.el = this.elementRef.nativeElement;
            this.prefixCls = 'ant-avatar';
            this.sizeMap = { large: 'lg', small: 'sm' };
        }
        /**
         * @return {?}
         */
        NzAvatarComponent.prototype.setClass = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-" + this.sizeMap[this.nzSize]] = this.sizeMap[this.nzSize],
                    _a[this.prefixCls + "-" + this.nzShape] = this.nzShape,
                    _a[this.prefixCls + "-icon"] = this.nzIcon,
                    _a[this.prefixCls + "-image"] = this.hasSrc // downgrade after image error
                    ,
                        _a);
                this.updateHostClassService.updateHostClass(this.el, classMap);
                this.cd.detectChanges();
                return this;
            };
        /**
         * @return {?}
         */
        NzAvatarComponent.prototype.imgError = /**
         * @return {?}
         */
            function () {
                this.hasSrc = false;
                this.hasIcon = false;
                this.hasText = false;
                if (this.nzIcon) {
                    this.hasIcon = true;
                }
                else if (this.nzText) {
                    this.hasText = true;
                }
                this.setClass().notifyCalc();
                this.setSizeStyle();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzAvatarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.hasOwnProperty('nzIcon') && changes["nzIcon"].currentValue) {
                    this.oldAPIIcon = changes["nzIcon"].currentValue.indexOf('anticon') > -1;
                }
                this.hasText = !this.nzSrc && !!this.nzText;
                this.hasIcon = !this.nzSrc && !!this.nzIcon;
                this.hasSrc = !!this.nzSrc;
                this.setClass().notifyCalc();
                this.setSizeStyle();
            };
        /**
         * @return {?}
         */
        NzAvatarComponent.prototype.calcStringSize = /**
         * @return {?}
         */
            function () {
                if (!this.hasText) {
                    return;
                }
                /** @type {?} */
                var childrenWidth = this.textEl.nativeElement.offsetWidth;
                /** @type {?} */
                var avatarWidth = this.el.getBoundingClientRect().width;
                /** @type {?} */
                var scale = avatarWidth - 8 < childrenWidth ? (avatarWidth - 8) / childrenWidth : 1;
                this.textStyles = {
                    transform: "scale(" + scale + ") translateX(-50%)"
                };
                if (typeof this.nzSize === 'number') {
                    Object.assign(this.textStyles, {
                        lineHeight: this.nzSize + "px"
                    });
                }
                this.cd.detectChanges();
            };
        /**
         * @return {?}
         */
        NzAvatarComponent.prototype.notifyCalc = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // If use ngAfterViewChecked, always demands more computations, so......
                setTimeout(function () {
                    _this.calcStringSize();
                });
                return this;
            };
        /**
         * @return {?}
         */
        NzAvatarComponent.prototype.setSizeStyle = /**
         * @return {?}
         */
            function () {
                if (typeof this.nzSize === 'string') {
                    return;
                }
                this.renderer.setStyle(this.el, 'width', this.nzSize + "px");
                this.renderer.setStyle(this.el, 'height', this.nzSize + "px");
                this.renderer.setStyle(this.el, 'line-height', this.nzSize + "px");
                if (this.hasIcon) {
                    this.renderer.setStyle(this.el, 'font-size', this.nzSize / 2 + "px");
                }
            };
        NzAvatarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-avatar',
                        template: "<i nz-icon *ngIf=\"nzIcon && hasIcon\" [type]=\"!oldAPIIcon && nzIcon\" [ngClass]=\"oldAPIIcon && nzIcon\"></i>\n<img [src]=\"nzSrc\" *ngIf=\"nzSrc && hasSrc\" (error)=\"imgError()\"/>\n<span class=\"ant-avatar-string\" #textEl [ngStyle]=\"textStyles\" *ngIf=\"nzText && hasText\">{{ nzText }}</span>",
                        providers: [NzUpdateHostClassService],
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        NzAvatarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ChangeDetectorRef },
                { type: NzUpdateHostClassService },
                { type: i0.Renderer2 }
            ];
        };
        NzAvatarComponent.propDecorators = {
            nzShape: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzText: [{ type: i0.Input }],
            nzSrc: [{ type: i0.Input }],
            nzIcon: [{ type: i0.Input }],
            textEl: [{ type: i0.ViewChild, args: ['textEl',] }]
        };
        return NzAvatarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzAvatarModule = /** @class */ (function () {
        function NzAvatarModule() {
        }
        NzAvatarModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzAvatarComponent],
                        exports: [NzAvatarComponent],
                        imports: [i3.CommonModule, NzIconModule]
                    },] }
        ];
        return NzAvatarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzBackTopComponent = /** @class */ (function () {
        // tslint:disable-next-line:no-any
        function NzBackTopComponent(scrollSrv, doc, cd) {
            this.scrollSrv = scrollSrv;
            this.doc = doc;
            this.cd = cd;
            this.scroll$ = null;
            this.target = null;
            this.visible = false;
            this._visibilityHeight = 400;
            this.nzClick = new i0.EventEmitter();
        }
        Object.defineProperty(NzBackTopComponent.prototype, "nzVisibilityHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this._visibilityHeight;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._visibilityHeight = toNumber(value, 400);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzBackTopComponent.prototype, "nzTarget", {
            set: /**
             * @param {?} el
             * @return {?}
             */ function (el) {
                this.target = typeof el === 'string' ? this.doc.querySelector(el) : el;
                this.registerScrollEvent();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.scroll$) {
                    this.registerScrollEvent();
                }
            };
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.clickBackTop = /**
         * @return {?}
         */
            function () {
                this.scrollSrv.scrollTo(this.getTarget(), 0);
                this.nzClick.emit(true);
            };
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.getTarget = /**
         * @return {?}
         */
            function () {
                return this.target || window;
            };
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.handleScroll = /**
         * @return {?}
         */
            function () {
                if (this.visible === this.scrollSrv.getScroll(this.getTarget()) > this.nzVisibilityHeight) {
                    return;
                }
                this.visible = !this.visible;
                this.cd.detectChanges();
            };
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.removeListen = /**
         * @return {?}
         */
            function () {
                if (this.scroll$) {
                    this.scroll$.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.registerScrollEvent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.removeListen();
                this.handleScroll();
                this.scroll$ = rxjs.fromEvent(this.getTarget(), 'scroll').pipe(operators.throttleTime(50), operators.distinctUntilChanged())
                    .subscribe(function () { return _this.handleScroll(); });
            };
        /**
         * @return {?}
         */
        NzBackTopComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeListen();
            };
        NzBackTopComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-back-top',
                        animations: [
                            animations.trigger('enterLeave', [
                                animations.transition(':enter', [
                                    animations.style({ opacity: 0 }),
                                    animations.animate(300, animations.style({ opacity: 1 }))
                                ]),
                                animations.transition(':leave', [
                                    animations.style({ opacity: 1 }),
                                    animations.animate(300, animations.style({ opacity: 0 }))
                                ])
                            ])
                        ],
                        template: "<div class=\"ant-back-top\" (click)=\"clickBackTop()\" [@enterLeave] *ngIf=\"visible\">\n  <ng-template #defaultContent>\n    <div class=\"ant-back-top-content\">\n      <div class=\"ant-back-top-icon\"></div>\n    </div>\n  </ng-template>\n  <ng-template [ngTemplateOutlet]=\"nzTemplate || defaultContent\"></ng-template>\n</div>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        NzBackTopComponent.ctorParameters = function () {
            return [
                { type: NzScrollService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzBackTopComponent.propDecorators = {
            nzTemplate: [{ type: i0.Input }],
            nzVisibilityHeight: [{ type: i0.Input }],
            nzTarget: [{ type: i0.Input }],
            nzClick: [{ type: i0.Output }]
        };
        return NzBackTopComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzBackTopModule = /** @class */ (function () {
        function NzBackTopModule() {
        }
        NzBackTopModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzBackTopComponent],
                        exports: [NzBackTopComponent],
                        imports: [i3.CommonModule],
                        providers: [SCROLL_SERVICE_PROVIDER]
                    },] }
        ];
        return NzBackTopModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AnimationCurves = /** @class */ (function () {
        function AnimationCurves() {
        }
        AnimationCurves.EASE_BASE_OUT = 'cubic-bezier(0.7, 0.3, 0.1, 1)';
        AnimationCurves.EASE_BASE_IN = 'cubic-bezier(0.9, 0, 0.3, 0.7)';
        AnimationCurves.EASE_OUT = 'cubic-bezier(0.215, 0.61, 0.355, 1)';
        AnimationCurves.EASE_IN = 'cubic-bezier(0.55, 0.055, 0.675, 0.19)';
        AnimationCurves.EASE_IN_OUT = 'cubic-bezier(0.645, 0.045, 0.355, 1)';
        AnimationCurves.EASE_OUT_BACK = 'cubic-bezier(0.12, 0.4, 0.29, 1.46)';
        AnimationCurves.EASE_IN_BACK = 'cubic-bezier(0.71, -0.46, 0.88, 0.6)';
        AnimationCurves.EASE_IN_OUT_BACK = 'cubic-bezier(0.71, -0.46, 0.29, 1.46)';
        AnimationCurves.EASE_OUT_CIRC = 'cubic-bezier(0.08, 0.82, 0.17, 1)';
        AnimationCurves.EASE_IN_CIRC = 'cubic-bezier(0.6, 0.04, 0.98, 0.34)';
        AnimationCurves.EASE_IN_OUT_CIRC = 'cubic-bezier(0.78, 0.14, 0.15, 0.86)';
        AnimationCurves.EASE_OUT_QUINT = 'cubic-bezier(0.23, 1, 0.32, 1)';
        AnimationCurves.EASE_IN_QUINT = 'cubic-bezier(0.755, 0.05, 0.855, 0.06)';
        AnimationCurves.EASE_IN_OUT_QUINT = 'cubic-bezier(0.86, 0, 0.07, 1)';
        return AnimationCurves;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var ANIMATION_TRANSITION_IN = "0.3s " + AnimationCurves.EASE_IN_BACK;
    /** @type {?} */
    var ANIMATION_TRANSITION_OUT = "0.3s " + AnimationCurves.EASE_IN_BACK;
    var NzBadgeComponent = /** @class */ (function () {
        function NzBadgeComponent(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.maxNumberArray = [];
            this.countArray = [];
            this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
            this.nzShowZero = false;
            this.nzShowDot = true;
            this.nzDot = false;
            this.nzOverflowCount = 99;
        }
        Object.defineProperty(NzBadgeComponent.prototype, "nzCount", {
            get: /**
             * @return {?}
             */ function () {
                return this._count;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value < 0) {
                    this._count = 0;
                }
                else {
                    this._count = value;
                }
                this.countArray = this._count.toString().split('');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzBadgeComponent.prototype, "showSup", {
            get: /**
             * @return {?}
             */ function () {
                return (this.nzShowDot && this.nzDot) || this.nzCount > 0 || ((this.nzCount === 0) && this.nzShowZero);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzBadgeComponent.prototype.checkContent = /**
         * @return {?}
         */
            function () {
                if (isEmpty(this.contentElement.nativeElement)) {
                    this.renderer.addClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');
                }
                else {
                    this.renderer.removeClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');
                }
            };
        /**
         * @return {?}
         */
        NzBadgeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.maxNumberArray = this.nzOverflowCount.toString().split('');
            };
        /**
         * @return {?}
         */
        NzBadgeComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.checkContent();
            };
        NzBadgeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-badge',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        animations: [
                            animations.trigger('zoomAnimation', [
                                animations.transition(':enter', [
                                    animations.style({ opacity: 0, transform: 'scale(0) translateX(50%)' }),
                                    animations.animate(ANIMATION_TRANSITION_IN, animations.style({
                                        opacity: 1,
                                        transform: 'scale(1) translateX(50%)'
                                    }))
                                ]),
                                animations.transition(':leave', [
                                    animations.style({ opacity: 1, transform: 'scale(1) translateX(50%)' }),
                                    animations.animate(ANIMATION_TRANSITION_OUT, animations.style({
                                        opacity: 0,
                                        transform: 'scale(0) translateX(50%)'
                                    }))
                                ])
                            ])
                        ],
                        template: "<span (cdkObserveContent)=\"checkContent()\" #contentElement><ng-content></ng-content></span>\n<span class=\"ant-badge-status-dot ant-badge-status-{{nzStatus}}\" *ngIf=\"nzStatus\" [ngStyle]=\"nzStyle\"></span>\n<span class=\"ant-badge-status-text\" *ngIf=\"nzStatus\">{{ nzText }}</span>\n<sup class=\"ant-scroll-number\"\n  *ngIf=\"showSup\"\n  @zoomAnimation\n  [ngStyle]=\"nzStyle\"\n  [class.ant-badge-count]=\"!nzDot\"\n  [class.ant-badge-dot]=\"nzDot\"\n  [class.ant-badge-multiple-words]=\"countArray.length>=2\">\n  <ng-container *ngFor=\"let number of maxNumberArray;let i= index;\">\n    <span class=\"ant-scroll-number-only\"\n      *ngIf=\"nzCount <= nzOverflowCount\"\n      [style.transform]=\"'translateY('+((-countArray[i]*100))+'%)'\">\n        <ng-container *ngIf=\"(!nzDot)&&(countArray[i]!=null)\">\n          <p *ngFor=\"let p of countSingleArray\" [class.current]=\"p==countArray[i]\">{{ p }}</p>\n        </ng-container>\n    </span>\n  </ng-container>\n  <ng-container *ngIf=\"nzCount > nzOverflowCount\">{{ nzOverflowCount }}+</ng-container>\n</sup>",
                        host: {
                            '[class.ant-badge]': 'true',
                            '[class.ant-badge-status]': 'nzStatus'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzBadgeComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        NzBadgeComponent.propDecorators = {
            contentElement: [{ type: i0.ViewChild, args: ['contentElement',] }],
            nzShowZero: [{ type: i0.Input }],
            nzShowDot: [{ type: i0.Input }],
            nzDot: [{ type: i0.Input }],
            nzOverflowCount: [{ type: i0.Input }],
            nzText: [{ type: i0.Input }],
            nzStyle: [{ type: i0.Input }],
            nzStatus: [{ type: i0.Input }],
            nzCount: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzBadgeComponent.prototype, "nzShowZero", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzBadgeComponent.prototype, "nzShowDot", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzBadgeComponent.prototype, "nzDot", void 0);
        return NzBadgeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzBadgeModule = /** @class */ (function () {
        function NzBadgeModule() {
        }
        NzBadgeModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzBadgeComponent],
                        exports: [NzBadgeComponent],
                        imports: [i3.CommonModule, observers.ObserversModule]
                    },] }
        ];
        return NzBadgeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_ROUTE_DATA_BREADCRUMB = 'breadcrumb';
    var NzBreadCrumbComponent = /** @class */ (function () {
        function NzBreadCrumbComponent(injector, ngZone, cd) {
            this.injector = injector;
            this.ngZone = ngZone;
            this.cd = cd;
            this.nzAutoGenerate = false;
            this.nzSeparator = '/';
            this.breadcrumbs = [];
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        NzBreadCrumbComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.nzAutoGenerate) {
                    try {
                        /** @type {?} */
                        var activatedRoute_1 = this.injector.get(router.ActivatedRoute);
                        /** @type {?} */
                        var router$$1 = this.injector.get(router.Router);
                        router$$1.events.pipe(operators.filter(function (e) { return e instanceof router.NavigationEnd; }), operators.takeUntil(this.destroy$)).subscribe(function () {
                            _this.breadcrumbs = _this.getBreadcrumbs(activatedRoute_1.root);
                            _this.cd.detectChanges();
                        });
                    }
                    catch (e) {
                        throw new Error('[NG-ZORRO] You should import RouterModule if you want to use NzAutoGenerate');
                    }
                }
            };
        /**
         * @return {?}
         */
        NzBreadCrumbComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
            };
        /**
         * @param {?} url
         * @param {?} e
         * @return {?}
         */
        NzBreadCrumbComponent.prototype.navigate = /**
         * @param {?} url
         * @param {?} e
         * @return {?}
         */
            function (url, e) {
                var _this = this;
                e.preventDefault();
                this.ngZone.run(function () { return _this.injector.get(router.Router).navigateByUrl(url).then(); }).then();
            };
        /**
         * @param {?} route
         * @param {?=} url
         * @param {?=} breadcrumbs
         * @return {?}
         */
        NzBreadCrumbComponent.prototype.getBreadcrumbs = /**
         * @param {?} route
         * @param {?=} url
         * @param {?=} breadcrumbs
         * @return {?}
         */
            function (route, url, breadcrumbs) {
                if (url === void 0) {
                    url = '';
                }
                if (breadcrumbs === void 0) {
                    breadcrumbs = [];
                }
                var e_1, _a;
                /** @type {?} */
                var children = route.children;
                // If there's no sub root, then stop the recurse and returns the generated breadcrumbs.
                if (children.length === 0) {
                    return breadcrumbs;
                }
                try {
                    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                        var child = children_1_1.value;
                        if (child.outlet === router.PRIMARY_OUTLET) {
                            /** @type {?} */
                            var routeURL = child.snapshot.url.map(function (segment) { return segment.path; }).join('/');
                            /** @type {?} */
                            var nextUrl = url + ("/" + routeURL);
                            // If have data, go to generate a breadcrumb for it.
                            if (child.snapshot.data.hasOwnProperty(NZ_ROUTE_DATA_BREADCRUMB)) {
                                /** @type {?} */
                                var breadcrumb = {
                                    label: child.snapshot.data[NZ_ROUTE_DATA_BREADCRUMB] || 'Breadcrumb',
                                    params: child.snapshot.params,
                                    url: nextUrl
                                };
                                breadcrumbs.push(breadcrumb);
                            }
                            return this.getBreadcrumbs(child, nextUrl, breadcrumbs);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (children_1_1 && !children_1_1.done && (_a = children_1.return))
                            _a.call(children_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        NzBreadCrumbComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: 'nz-breadcrumb',
                        preserveWhitespaces: false,
                        template: "<ng-content></ng-content>\n<ng-container *ngIf=\"nzAutoGenerate\">\n  <nz-breadcrumb-item *ngFor=\"let breadcrumb of breadcrumbs\">\n    <a [attr.href]=\"breadcrumb.url\" (click)=\"navigate(breadcrumb.url, $event)\">{{ breadcrumb.label }}</a>\n  </nz-breadcrumb-item>\n</ng-container>",
                        host: {
                            '[class.ant-breadcrumb]': 'true'
                        },
                        styles: ["\n    nz-breadcrumb {\n      display: block;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzBreadCrumbComponent.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: i0.NgZone },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzBreadCrumbComponent.propDecorators = {
            nzAutoGenerate: [{ type: i0.Input }],
            nzSeparator: [{ type: i0.Input }]
        };
        return NzBreadCrumbComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzBreadCrumbItemComponent = /** @class */ (function () {
        function NzBreadCrumbItemComponent(nzBreadCrumbComponent) {
            this.nzBreadCrumbComponent = nzBreadCrumbComponent;
        }
        NzBreadCrumbItemComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: 'nz-breadcrumb-item',
                        preserveWhitespaces: false,
                        template: "<span class=\"ant-breadcrumb-link\">\n  <ng-content></ng-content>\n</span>\n<span class=\"ant-breadcrumb-separator\">\n  <ng-container *nzStringTemplateOutlet=\"nzBreadCrumbComponent.nzSeparator\">\n    {{ nzBreadCrumbComponent.nzSeparator }}\n  </ng-container>\n</span>",
                        styles: ["\n    nz-breadcrumb-item:last-child {\n      color: rgba(0, 0, 0, 0.65);\n    }\n\n    nz-breadcrumb-item:last-child .ant-breadcrumb-separator {\n      display: none;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzBreadCrumbItemComponent.ctorParameters = function () {
            return [
                { type: NzBreadCrumbComponent }
            ];
        };
        return NzBreadCrumbItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzBreadCrumbModule = /** @class */ (function () {
        function NzBreadCrumbModule() {
        }
        NzBreadCrumbModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, NzAddOnModule],
                        declarations: [NzBreadCrumbComponent, NzBreadCrumbItemComponent],
                        exports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent]
                    },] }
        ];
        return NzBreadCrumbModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzWaveRenderer = /** @class */ (function () {
        function NzWaveRenderer(triggerElement, ngZone, insertExtraNode) {
            var _this = this;
            this.triggerElement = triggerElement;
            this.ngZone = ngZone;
            this.insertExtraNode = insertExtraNode;
            this.waveTransitionDuration = 400;
            this.lastTime = 0;
            this.onClick = function (event) {
                if (!_this.triggerElement ||
                    !_this.triggerElement.getAttribute ||
                    _this.triggerElement.getAttribute('disabled') ||
                    ( /** @type {?} */(event.target)).tagName === 'INPUT' ||
                    _this.triggerElement.className.indexOf('disabled') >= 0) {
                    return;
                }
                _this.fadeOutWave();
            };
            /** @type {?} */
            var platform$$1 = new platform.Platform();
            if (platform$$1.isBrowser) {
                this.bindTriggerEvent();
            }
        }
        Object.defineProperty(NzWaveRenderer.prototype, "waveAttributeName", {
            get: /**
             * @return {?}
             */ function () {
                return this.insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzWaveRenderer.prototype.bindTriggerEvent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.runOutsideAngular(function () {
                    if (_this.triggerElement) {
                        _this.triggerElement.addEventListener('click', _this.onClick, true);
                    }
                });
            };
        /**
         * @return {?}
         */
        NzWaveRenderer.prototype.removeTriggerEvent = /**
         * @return {?}
         */
            function () {
                if (this.triggerElement) {
                    this.triggerElement.removeEventListener('click', this.onClick, true);
                }
            };
        /**
         * @return {?}
         */
        NzWaveRenderer.prototype.removeStyleAndExtraNode = /**
         * @return {?}
         */
            function () {
                if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {
                    document.body.removeChild(this.styleForPseudo);
                    this.styleForPseudo = null;
                }
                if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {
                    this.triggerElement.removeChild(this.extraNode);
                }
            };
        /**
         * @return {?}
         */
        NzWaveRenderer.prototype.destroy = /**
         * @return {?}
         */
            function () {
                this.removeTriggerEvent();
                this.removeStyleAndExtraNode();
            };
        /**
         * @return {?}
         */
        NzWaveRenderer.prototype.fadeOutWave = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var node = this.triggerElement;
                /** @type {?} */
                var waveColor = this.getWaveColor(node);
                node.setAttribute(this.waveAttributeName, 'true');
                if (Date.now() < this.lastTime + this.waveTransitionDuration) {
                    return;
                }
                if (this.isValidColor(waveColor)) {
                    if (!this.styleForPseudo) {
                        this.styleForPseudo = document.createElement('style');
                    }
                    this.styleForPseudo.innerHTML =
                        "[ant-click-animating-without-extra-node]:after { border-color: " + waveColor + "; }";
                    document.body.appendChild(this.styleForPseudo);
                }
                if (this.insertExtraNode) {
                    if (!this.extraNode) {
                        this.extraNode = document.createElement('div');
                    }
                    this.extraNode.className = 'ant-click-animating-node';
                    node.appendChild(this.extraNode);
                }
                this.lastTime = Date.now();
                this.runTimeoutOutsideZone(function () {
                    node.removeAttribute(_this.waveAttributeName);
                    _this.removeStyleAndExtraNode();
                }, this.waveTransitionDuration);
            };
        /**
         * @param {?} color
         * @return {?}
         */
        NzWaveRenderer.prototype.isValidColor = /**
         * @param {?} color
         * @return {?}
         */
            function (color) {
                return color
                    && color !== '#ffffff'
                    && color !== 'rgb(255, 255, 255)'
                    && this.isNotGrey(color)
                    && !/rgba\(\d*, \d*, \d*, 0\)/.test(color)
                    && color !== 'transparent';
            };
        /**
         * @param {?} color
         * @return {?}
         */
        NzWaveRenderer.prototype.isNotGrey = /**
         * @param {?} color
         * @return {?}
         */
            function (color) {
                /** @type {?} */
                var match = color.match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);
                if (match && match[1] && match[2] && match[3]) {
                    return !(match[1] === match[2] && match[2] === match[3]);
                }
                return true;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        NzWaveRenderer.prototype.getWaveColor = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var nodeStyle = getComputedStyle(node);
                return nodeStyle.getPropertyValue('border-top-color') || // Firefox Compatible
                    // Firefox Compatible
                    nodeStyle.getPropertyValue('border-color') ||
                    nodeStyle.getPropertyValue('background-color');
            };
        /**
         * @param {?} fn
         * @param {?} delay
         * @return {?}
         */
        NzWaveRenderer.prototype.runTimeoutOutsideZone = /**
         * @param {?} fn
         * @param {?} delay
         * @return {?}
         */
            function (fn, delay) {
                this.ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });
            };
        return NzWaveRenderer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzWaveDirective = /** @class */ (function () {
        function NzWaveDirective(ngZone, elementRef) {
            this.ngZone = ngZone;
            this.elementRef = elementRef;
            this.nzWaveExtraNode = false;
        }
        /**
         * @return {?}
         */
        NzWaveDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.waveRenderer) {
                    this.waveRenderer.destroy();
                }
            };
        /**
         * @return {?}
         */
        NzWaveDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.elementRef.nativeElement) {
                    this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode);
                }
            };
        NzWaveDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-wave]'
                    },] }
        ];
        /** @nocollapse */
        NzWaveDirective.ctorParameters = function () {
            return [
                { type: i0.NgZone },
                { type: i0.ElementRef }
            ];
        };
        NzWaveDirective.propDecorators = {
            nzWaveExtraNode: [{ type: i0.Input }]
        };
        return NzWaveDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzWaveModule = /** @class */ (function () {
        function NzWaveModule() {
        }
        NzWaveModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [platform.PlatformModule],
                        exports: [NzWaveDirective],
                        declarations: [NzWaveDirective]
                    },] }
        ];
        return NzWaveModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzButtonGroupComponent = /** @class */ (function () {
        function NzButtonGroupComponent(nzUpdateHostClassService, elementRef) {
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.elementRef = elementRef;
            this.prefixCls = 'ant-btn-group';
        }
        Object.defineProperty(NzButtonGroupComponent.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = value;
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzButtonGroupComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-lg"] = this.nzSize === 'large',
                    _a[this.prefixCls + "-sm"] = this.nzSize === 'small',
                    _a);
                this.nzUpdateHostClassService.updateHostClass(this.elementRef.nativeElement, classMap);
            };
        /**
         * @return {?}
         */
        NzButtonGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        NzButtonGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-button-group',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        providers: [NzUpdateHostClassService],
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        /** @nocollapse */
        NzButtonGroupComponent.ctorParameters = function () {
            return [
                { type: NzUpdateHostClassService },
                { type: i0.ElementRef }
            ];
        };
        NzButtonGroupComponent.propDecorators = {
            nzSize: [{ type: i0.Input }]
        };
        return NzButtonGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} element
     * @return {?}
     */
    function findFirstNotEmptyNode(element) {
        /** @type {?} */
        var children = element.childNodes;
        for (var i = 0; i < children.length; i++) {
            /** @type {?} */
            var node = children.item(i);
            if (filterNotEmptyNode(node)) {
                return node;
            }
        }
        return null;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    function findLastNotEmptyNode(element) {
        /** @type {?} */
        var children = element.childNodes;
        for (var i = children.length - 1; i >= 0; i--) {
            /** @type {?} */
            var node = children.item(i);
            if (filterNotEmptyNode(node)) {
                return node;
            }
        }
        return null;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzButtonComponent = /** @class */ (function () {
        function NzButtonComponent(elementRef, cdr, renderer, nzUpdateHostClassService, ngZone) {
            this.elementRef = elementRef;
            this.cdr = cdr;
            this.renderer = renderer;
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.ngZone = ngZone;
            this.el = this.elementRef.nativeElement;
            this.nzWave = new NzWaveDirective(this.ngZone, this.elementRef);
            this._ghost = false;
            this._search = false;
            this._loading = false;
            this._block = false;
            this.iconOnly = false;
            this.prefixCls = 'ant-btn';
            this.sizeMap = { large: 'lg', small: 'sm' };
        }
        Object.defineProperty(NzButtonComponent.prototype, "nzBlock", {
            get: /**
             * @return {?}
             */ function () {
                return this._block;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._block = toBoolean(value);
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzButtonComponent.prototype, "nzGhost", {
            get: /**
             * @return {?}
             */ function () {
                return this._ghost;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._ghost = toBoolean(value);
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzButtonComponent.prototype, "nzSearch", {
            get: /**
             * @return {?}
             */ function () {
                return this._search;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._search = toBoolean(value);
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzButtonComponent.prototype, "nzType", {
            get: /**
             * @return {?}
             */ function () {
                return this._type;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._type = value;
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzButtonComponent.prototype, "nzShape", {
            get: /**
             * @return {?}
             */ function () {
                return this._shape;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._shape = value;
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzButtonComponent.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = value;
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzButtonComponent.prototype, "nzLoading", {
            get: /**
             * @return {?}
             */ function () {
                return this._loading;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._loading = toBoolean(value);
                this.setClassMap();
                this.updateIconDisplay(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NzButtonComponent.prototype.updateIconDisplay = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.iconElement) {
                    this.renderer.setStyle(this.iconElement, 'display', value ? 'none' : 'inline-block');
                }
            };
        /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289 */
        /**
         * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
         * @return {?}
         */
        NzButtonComponent.prototype.setClassMap = /**
         * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a["" + this.prefixCls] = true,
                    _a[this.prefixCls + "-" + this.nzType] = this.nzType,
                    _a[this.prefixCls + "-" + this.nzShape] = this.nzShape,
                    _a[this.prefixCls + "-" + this.sizeMap[this.nzSize]] = this.sizeMap[this.nzSize],
                    _a[this.prefixCls + "-loading"] = this.nzLoading,
                    _a[this.prefixCls + "-icon-only"] = this.iconOnly,
                    _a[this.prefixCls + "-background-ghost"] = this.nzGhost,
                    _a[this.prefixCls + "-block"] = this.nzBlock,
                    _a["ant-input-search-button"] = this.nzSearch,
                    _a);
                this.nzUpdateHostClassService.updateHostClass(this.el, classMap);
            };
        /**
         * @return {?}
         */
        NzButtonComponent.prototype.checkContent = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var hasIcon = this.listOfIconElement && this.listOfIconElement.length;
                if (hasIcon) {
                    this.moveIcon();
                }
                this.renderer.removeStyle(this.contentElement.nativeElement, 'display');
                /** https://github.com/angular/angular/issues/12530 **/
                if (isEmpty(this.contentElement.nativeElement)) {
                    this.renderer.setStyle(this.contentElement.nativeElement, 'display', 'none');
                    this.iconOnly = !!hasIcon;
                }
                else {
                    this.renderer.removeStyle(this.contentElement.nativeElement, 'display');
                    this.iconOnly = false;
                }
                this.setClassMap();
                this.updateIconDisplay(this.nzLoading);
                this.cdr.detectChanges();
            };
        /**
         * @return {?}
         */
        NzButtonComponent.prototype.moveIcon = /**
         * @return {?}
         */
            function () {
                if (this.listOfIconElement && this.listOfIconElement.length) {
                    /** @type {?} */
                    var firstChildElement = findFirstNotEmptyNode(this.contentElement.nativeElement);
                    /** @type {?} */
                    var lastChildElement = findLastNotEmptyNode(this.contentElement.nativeElement);
                    if (firstChildElement && (firstChildElement === this.listOfIconElement.first.nativeElement)) {
                        this.renderer.insertBefore(this.el, firstChildElement, this.contentElement.nativeElement);
                        this.iconElement = /** @type {?} */ (firstChildElement);
                    }
                    else if (lastChildElement && (lastChildElement === this.listOfIconElement.last.nativeElement)) {
                        this.renderer.appendChild(this.el, lastChildElement);
                    }
                }
            };
        /**
         * @return {?}
         */
        NzButtonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.checkContent();
            };
        /**
         * @return {?}
         */
        NzButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
                this.nzWave.ngOnInit();
            };
        /**
         * @return {?}
         */
        NzButtonComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.nzWave.ngOnDestroy();
            };
        NzButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-button]',
                        providers: [NzUpdateHostClassService],
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<i nz-icon type=\"loading\" *ngIf=\"nzLoading\"></i>\n<span (cdkObserveContent)=\"checkContent()\" #contentElement><ng-content></ng-content></span>"
                    }] }
        ];
        /** @nocollapse */
        NzButtonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ChangeDetectorRef },
                { type: i0.Renderer2 },
                { type: NzUpdateHostClassService },
                { type: i0.NgZone }
            ];
        };
        NzButtonComponent.propDecorators = {
            contentElement: [{ type: i0.ViewChild, args: ['contentElement',] }],
            listOfIconElement: [{ type: i0.ContentChildren, args: [NzIconDirective, { read: i0.ElementRef },] }],
            nzWave: [{ type: i0.HostBinding, args: ['attr.nz-wave',] }],
            nzBlock: [{ type: i0.Input }],
            nzGhost: [{ type: i0.Input }],
            nzSearch: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }],
            nzShape: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzLoading: [{ type: i0.Input }]
        };
        return NzButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzButtonModule = /** @class */ (function () {
        function NzButtonModule() {
        }
        NzButtonModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzButtonComponent, NzButtonGroupComponent],
                        exports: [NzButtonComponent, NzButtonGroupComponent],
                        imports: [i3.CommonModule, observers.ObserversModule, NzWaveModule, NzIconModule]
                    },] }
        ];
        return NzButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LoggerService = /** @class */ (function () {
        function LoggerService(_loggerState) {
            this._loggerState = _loggerState;
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.log = /**
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (this._loggerState) {
                    // console.log(...args);
                    console.log.apply(console, arguments);
                }
            };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.warn = /**
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (this._loggerState) {
                    // console.warn(...args);
                    console.warn.apply(console, arguments);
                }
            };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.error = /**
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (this._loggerState) {
                    // console.error(...args);
                    console.error.apply(console, arguments);
                }
            };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.info = /**
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (this._loggerState) {
                    // console.log(...args);
                    console.log.apply(console, arguments);
                }
            };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.debug = /**
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (this._loggerState) {
                    /** @type {?} */
                    var arrs = Array.prototype.slice.call(arguments);
                    console.log.apply(console, ['[NG-ZORRO-DEBUG]'].concat(arrs));
                }
            };
        LoggerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        LoggerService.ctorParameters = function () {
            return [
                { type: Boolean, decorators: [{ type: i0.Inject, args: [NZ_LOGGER_STATE,] }] }
            ];
        };
        return LoggerService;
    }());
    /** @type {?} */
    var NZ_LOGGER_STATE = new i0.InjectionToken('nz-logger-state');
    /**
     * @param {?} exist
     * @param {?} loggerState
     * @return {?}
     */
    function LOGGER_SERVICE_PROVIDER_FACTORY(exist, loggerState) { return exist || new LoggerService(loggerState); }
    /** @type {?} */
    var LOGGER_SERVICE_PROVIDER = {
        provide: LoggerService,
        useFactory: LOGGER_SERVICE_PROVIDER_FACTORY,
        deps: [[new i0.Optional(), new i0.SkipSelf(), LoggerService], NZ_LOGGER_STATE]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LoggerModule = /** @class */ (function () {
        function LoggerModule() {
        }
        LoggerModule.decorators = [
            { type: i0.NgModule, args: [{
                        providers: [
                            { provide: NZ_LOGGER_STATE, useValue: false },
                            LOGGER_SERVICE_PROVIDER
                        ]
                    },] }
        ];
        return LoggerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale = {
        today: '今天',
        now: '此刻',
        backToToday: '返回今天',
        ok: '确定',
        timeSelect: '选择时间',
        dateSelect: '选择日期',
        clear: '清除',
        month: '月',
        year: '年',
        previousMonth: '上个月 (翻页上键)',
        nextMonth: '下个月 (翻页下键)',
        monthSelect: '选择月份',
        yearSelect: '选择年份',
        decadeSelect: '选择年代',
        yearFormat: 'YYYY年',
        dayFormat: 'D日',
        dateFormat: 'YYYY年M月D日',
        dateTimeFormat: 'YYYY年M月D日 HH时mm分ss秒',
        previousYear: '上一年 (Control键加左方向键)',
        nextYear: '下一年 (Control键加右方向键)',
        previousDecade: '上一年代',
        nextDecade: '下一年代',
        previousCentury: '上一世纪',
        nextCentury: '下一世纪',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale = {
        placeholder: '请选择时间',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$1 = {
        lang: __assign({ placeholder: '请选择日期', rangePlaceholder: ['开始日期', '结束日期'] }, CalendarLocale),
        timePickerLocale: __assign({}, locale),
    };
    // should add whitespace between char in Button
    locale$1.lang.ok = '确 定';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination = {
        // Options.jsx
        items_per_page: '条/页',
        jump_to: '跳至',
        jump_to_confirm: '确定',
        page: '页',
        // Pagination.jsx
        prev_page: '上一页',
        next_page: '下一页',
        prev_5: '向前 5 页',
        next_5: '向后 5 页',
        prev_3: '向前 3 页',
        next_3: '向后 3 页',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var zh_CN = {
        locale: 'zh-cn',
        Pagination: Pagination,
        DatePicker: locale$1,
        TimePicker: locale,
        Calendar: CalendarLocale,
        Table: {
            filterTitle: '筛选',
            filterConfirm: '确定',
            filterReset: '重置',
            emptyText: '暂无数据',
            selectAll: '全选当页',
            selectInvert: '反选当页',
        },
        Modal: {
            okText: '确定',
            cancelText: '取消',
            justOkText: '知道了',
        },
        Popconfirm: {
            cancelText: '取消',
            okText: '确定',
        },
        Transfer: {
            notFoundContent: '无匹配结果',
            searchPlaceholder: '请输入搜索内容',
            itemUnit: '项',
            itemsUnit: '项',
        },
        Select: {
            notFoundContent: '无匹配结果',
        },
        Upload: {
            uploading: '文件上传中',
            removeFile: '删除文件',
            uploadError: '上传错误',
            previewFile: '预览文件',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_I18N = new i0.InjectionToken('nz-i18n');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzI18nService = /** @class */ (function () {
        function NzI18nService(locale, _logger, datePipe) {
            this._logger = _logger;
            this.datePipe = datePipe;
            this._change = new rxjs.BehaviorSubject(this._locale);
            this.setLocale(locale || zh_CN);
        }
        Object.defineProperty(NzI18nService.prototype, "localeChange", {
            get: /**
             * @return {?}
             */ function () {
                return this._change.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        // [NOTE] Performance issue: this method may called by every change detections
        // TODO: cache more deeply paths for performance
        /* tslint:disable-next-line:no-any */
        /**
         * @param {?} path
         * @param {?=} data
         * @return {?}
         */
        NzI18nService.prototype.translate = /**
         * @param {?} path
         * @param {?=} data
         * @return {?}
         */
            function (path, data) {
                /** @type {?} */
                var content = /** @type {?} */ (this._getObjectPath(this._locale, path));
                if (typeof content === 'string') {
                    if (data) {
                        Object.keys(data).forEach(function (key) { return content = content.replace(new RegExp("%" + key + "%", 'g'), data[key]); });
                    }
                    return content;
                }
                return path;
            };
        /**
         * Set/Change current locale globally throughout the WHOLE application
         * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)
         * @param locale The translating letters
         */
        /**
         * Set/Change current locale globally throughout the WHOLE application
         * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)
         * @param {?} locale The translating letters
         * @return {?}
         */
        NzI18nService.prototype.setLocale = /**
         * Set/Change current locale globally throughout the WHOLE application
         * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)
         * @param {?} locale The translating letters
         * @return {?}
         */
            function (locale) {
                if (this._locale && this._locale.locale === locale.locale) {
                    return;
                }
                this._locale = locale;
                this._change.next(locale);
            };
        /**
         * @return {?}
         */
        NzI18nService.prototype.getLocale = /**
         * @return {?}
         */
            function () {
                return this._locale;
            };
        /**
         * @return {?}
         */
        NzI18nService.prototype.getLocaleId = /**
         * @return {?}
         */
            function () {
                return this._locale ? this._locale.locale : '';
            };
        /**
         * Get locale data
         * @param path dot paths for finding exist value from locale data, eg. "a.b.c"
         * @param defaultValue default value if the result is not "truthy"
         */
        /**
         * Get locale data
         * @param {?=} path dot paths for finding exist value from locale data, eg. "a.b.c"
         * @param {?=} defaultValue default value if the result is not "truthy"
         * @return {?}
         */
        NzI18nService.prototype.getLocaleData = /**
         * Get locale data
         * @param {?=} path dot paths for finding exist value from locale data, eg. "a.b.c"
         * @param {?=} defaultValue default value if the result is not "truthy"
         * @return {?}
         */
            function (path, defaultValue) {
                /** @type {?} */
                var result = path ? this._getObjectPath(this._locale, path) : this._locale;
                return result || defaultValue;
            };
        /**
         * @param {?} date
         * @param {?=} format
         * @param {?=} locale
         * @return {?}
         */
        NzI18nService.prototype.formatDate = /**
         * @param {?} date
         * @param {?=} format
         * @param {?=} locale
         * @return {?}
         */
            function (date, format, locale) {
                return date ? this.datePipe.transform(date, format, null, locale || this.getLocale().locale) : '';
            };
        /**
         * Format date with compatible for the format of moment and others
         * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.
         */
        /**
         * Format date with compatible for the format of moment and others
         * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.
         * @param {?} date
         * @param {?=} format
         * @param {?=} locale
         * @return {?}
         */
        NzI18nService.prototype.formatDateCompatible = /**
         * Format date with compatible for the format of moment and others
         * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.
         * @param {?} date
         * @param {?=} format
         * @param {?=} locale
         * @return {?}
         */
            function (date, format, locale) {
                return this.formatDate(date, this.compatDateFormat(format), locale);
            };
        /**
         * @param {?} text
         * @return {?}
         */
        NzI18nService.prototype.parseDate = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                if (!text) {
                    return;
                }
                return parse(text);
            };
        /**
         * @param {?} text
         * @return {?}
         */
        NzI18nService.prototype.parseTime = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                if (!text) {
                    return;
                }
                return parse("1970-01-01 " + text);
            };
        /**
         * @param {?} obj
         * @param {?} path
         * @return {?}
         */
        NzI18nService.prototype._getObjectPath = /**
         * @param {?} obj
         * @param {?} path
         * @return {?}
         */
            function (obj, path) {
                /** @type {?} */
                var res = obj;
                /** @type {?} */
                var paths = path.split('.');
                /** @type {?} */
                var depth = paths.length;
                /** @type {?} */
                var index = 0;
                while (res && index < depth) {
                    res = res[paths[index++]];
                }
                return index === depth ? res : null;
            };
        /**
         * Compatible translate the moment-like format pattern to angular's pattern
         * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.
         *
         * TODO: compare and complete all format patterns
         * Each format docs as below:
         * @link https://momentjs.com/docs/#/displaying/format/
         * @link https://angular.io/api/common/DatePipe#description
         * @param {?} format input format pattern
         * @return {?}
         */
        NzI18nService.prototype.compatDateFormat = /**
         * Compatible translate the moment-like format pattern to angular's pattern
         * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.
         *
         * TODO: compare and complete all format patterns
         * Each format docs as below:
         * @link https://momentjs.com/docs/#/displaying/format/
         * @link https://angular.io/api/common/DatePipe#description
         * @param {?} format input format pattern
         * @return {?}
         */
            function (format) {
                return format && format
                    .replace(/Y/g, 'y') // only support y, yy, yyy, yyyy
                    .replace(/D/g, 'd'); // d, dd represent of D, DD for momentjs, others are not support
            };
        NzI18nService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        NzI18nService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [NZ_I18N,] }] },
                { type: LoggerService },
                { type: i3.DatePipe }
            ];
        };
        return NzI18nService;
    }());
    /**
     * @param {?} exist
     * @param {?} locale
     * @param {?} logger
     * @param {?} datePipe
     * @return {?}
     */
    function NZ_LOCALE_SERVICE_PROVIDER_FACTORY(exist, locale, logger, datePipe) {
        return exist || new NzI18nService(locale, logger, datePipe);
    }
    /** @type {?} */
    var NZ_I18N_SERVICE_PROVIDER = {
        provide: NzI18nService,
        useFactory: NZ_LOCALE_SERVICE_PROVIDER_FACTORY,
        deps: [[new i0.Optional(), new i0.SkipSelf(), NzI18nService], NZ_I18N, LoggerService, i3.DatePipe]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzI18nPipe = /** @class */ (function () {
        function NzI18nPipe(_locale) {
            this._locale = _locale;
        }
        /**
         * @param {?} path
         * @param {?=} keyValue
         * @return {?}
         */
        NzI18nPipe.prototype.transform = /**
         * @param {?} path
         * @param {?=} keyValue
         * @return {?}
         */
            function (path, keyValue) {
                return this._locale.translate(path, keyValue);
            };
        NzI18nPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'nzI18n'
                    },] }
        ];
        /** @nocollapse */
        NzI18nPipe.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        return NzI18nPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ɵ0$1 = zh_CN;
    var NzI18nModule = /** @class */ (function () {
        function NzI18nModule() {
        }
        NzI18nModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [LoggerModule],
                        declarations: [NzI18nPipe],
                        exports: [NzI18nPipe],
                        providers: [
                            { provide: NZ_I18N, useValue: ɵ0$1 },
                            i3.DatePipe,
                            NZ_I18N_SERVICE_PROVIDER
                        ]
                    },] }
        ];
        return NzI18nModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRadioComponent = /** @class */ (function () {
        /* tslint:disable-next-line:no-any */
        function NzRadioComponent(elementRef, renderer, document, cdr, focusMonitor) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.document = document;
            this.cdr = cdr;
            this.focusMonitor = focusMonitor;
            this.select$ = new rxjs.Subject();
            this.touched$ = new rxjs.Subject();
            this.checked = false;
            this.isNgModel = false;
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
            this.nzDisabled = false;
            this.nzAutoFocus = false;
        }
        /**
         * @return {?}
         */
        NzRadioComponent.prototype.updateAutoFocus = /**
         * @return {?}
         */
            function () {
                if (this.inputElement) {
                    if (this.nzAutoFocus) {
                        this.renderer.setAttribute(this.inputElement.nativeElement, 'autofocus', 'autofocus');
                    }
                    else {
                        this.renderer.removeAttribute(this.inputElement.nativeElement, 'autofocus');
                    }
                }
            };
        /**
         * @return {?}
         */
        NzRadioComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                this.focus();
                if (!this.nzDisabled && !this.checked) {
                    this.select$.next(this);
                    if (this.isNgModel) {
                        this.checked = true;
                        this.onChange(true);
                    }
                }
            };
        /**
         * @return {?}
         */
        NzRadioComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.focusMonitor.focusVia(this.inputElement, 'keyboard');
            };
        /**
         * @return {?}
         */
        NzRadioComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.inputElement.nativeElement.blur();
            };
        /**
         * @return {?}
         */
        NzRadioComponent.prototype.markForCheck = /**
         * @return {?}
         */
            function () {
                this.cdr.markForCheck();
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzRadioComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
                this.cdr.markForCheck();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzRadioComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.checked = value;
                this.cdr.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzRadioComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.isNgModel = true;
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzRadioComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @return {?}
         */
        NzRadioComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.focusMonitor.monitor(this.elementRef, true).subscribe(function (focusOrigin) {
                    if (!focusOrigin) {
                        Promise.resolve().then(function () { return _this.onTouched(); });
                        _this.touched$.next();
                    }
                });
                this.updateAutoFocus();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzRadioComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzAutoFocus"]) {
                    this.updateAutoFocus();
                }
            };
        NzRadioComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-radio]',
                        preserveWhitespaces: false,
                        template: "<span class=\"ant-radio\" [class.ant-radio-checked]=\"checked\" [class.ant-radio-disabled]=\"nzDisabled\">\n  <input #inputElement type=\"radio\" class=\"ant-radio-input\" [disabled]=\"nzDisabled\" [checked]=\"checked\" [attr.name]=\"name\">\n  <span class=\"ant-radio-inner\"></span>\n</span>\n<span><ng-content></ng-content></span>",
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzRadioComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.ant-radio-wrapper]': 'true',
                            '[class.ant-radio-wrapper-checked]': 'checked',
                            '[class.ant-radio-wrapper-disabled]': 'nzDisabled'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzRadioComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.ChangeDetectorRef },
                { type: a11y.FocusMonitor }
            ];
        };
        NzRadioComponent.propDecorators = {
            inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
            nzValue: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzAutoFocus: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click',] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzRadioComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzRadioComponent.prototype, "nzAutoFocus", void 0);
        return NzRadioComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRadioButtonComponent = /** @class */ (function (_super) {
        __extends(NzRadioButtonComponent, _super);
        /* tslint:disable-next-line:no-any */
        function NzRadioButtonComponent(elementRef, renderer, document, cdr, focusMonitor) {
            return _super.call(this, elementRef, renderer, document, cdr, focusMonitor) || this;
        }
        NzRadioButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-radio-button]',
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzRadioComponent; }),
                                multi: true
                            },
                            {
                                provide: NzRadioComponent,
                                useExisting: i0.forwardRef(function () { return NzRadioButtonComponent; })
                            }
                        ],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "<span class=\"ant-radio-button\" [class.ant-radio-button-checked]=\"checked\" [class.ant-radio-button-disabled]=\"nzDisabled\">\n  <input type=\"radio\" #inputElement class=\"ant-radio-button-input\" [disabled]=\"nzDisabled\" [checked]=\"checked\" [attr.name]=\"name\">\n  <span class=\"ant-radio-button-inner\"></span>\n</span>\n<span><ng-content></ng-content></span>",
                        host: {
                            '[class.ant-radio-button-wrapper]': 'true',
                            '[class.ant-radio-button-wrapper-checked]': 'checked',
                            '[class.ant-radio-button-wrapper-disabled]': 'nzDisabled'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzRadioButtonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.ChangeDetectorRef },
                { type: a11y.FocusMonitor }
            ];
        };
        return NzRadioButtonComponent;
    }(NzRadioComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRadioGroupComponent = /** @class */ (function () {
        function NzRadioGroupComponent(cdr) {
            this.cdr = cdr;
            this.destroy$ = new rxjs.Subject();
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
            this.nzButtonStyle = 'outline';
            this.nzSize = 'default';
        }
        /**
         * @return {?}
         */
        NzRadioGroupComponent.prototype.updateChildrenStatus = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.radios) {
                    Promise.resolve().then(function () {
                        _this.radios.forEach(function (radio) {
                            radio.checked = radio.nzValue === _this.value;
                            if (isNotNil(_this.nzDisabled)) {
                                radio.nzDisabled = _this.nzDisabled;
                            }
                            if (_this.nzName) {
                                radio.name = _this.nzName;
                            }
                            radio.markForCheck();
                        });
                    });
                }
            };
        /**
         * @return {?}
         */
        NzRadioGroupComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.radios.changes.pipe(operators.startWith(null), operators.takeUntil(this.destroy$)).subscribe(function () {
                    _this.updateChildrenStatus();
                    if (_this.selectSubscription) {
                        _this.selectSubscription.unsubscribe();
                    }
                    _this.selectSubscription = rxjs.merge.apply(void 0, __spread(_this.radios.map(function (radio) { return radio.select$; }))).pipe(operators.takeUntil(_this.destroy$)).subscribe(function (radio) {
                        if (_this.value !== radio.nzValue) {
                            _this.value = radio.nzValue;
                            _this.updateChildrenStatus();
                            _this.onChange(_this.value);
                        }
                    });
                    if (_this.touchedSubscription) {
                        _this.touchedSubscription.unsubscribe();
                    }
                    _this.touchedSubscription = rxjs.merge.apply(void 0, __spread(_this.radios.map(function (radio) { return radio.touched$; }))).pipe(operators.takeUntil(_this.destroy$)).subscribe(function () {
                        Promise.resolve().then(function () { return _this.onTouched(); });
                    });
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzRadioGroupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzDisabled"] || changes["nzName"]) {
                    this.updateChildrenStatus();
                }
            };
        /**
         * @return {?}
         */
        NzRadioGroupComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
            };
        /* tslint:disable-next-line:no-any */
        /**
         * @param {?} value
         * @return {?}
         */
        NzRadioGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.updateChildrenStatus();
                this.cdr.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzRadioGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzRadioGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzRadioGroupComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
                this.cdr.markForCheck();
            };
        NzRadioGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-radio-group',
                        preserveWhitespaces: false,
                        template: "<ng-content></ng-content>",
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzRadioGroupComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.ant-radio-group]': 'true',
                            '[class.ant-radio-group-large]': "nzSize === 'large'",
                            '[class.ant-radio-group-small]': "nzSize === 'small'",
                            '[class.ant-radio-group-solid]': "nzButtonStyle === 'solid'"
                        }
                    }] }
        ];
        /** @nocollapse */
        NzRadioGroupComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzRadioGroupComponent.propDecorators = {
            radios: [{ type: i0.ContentChildren, args: [i0.forwardRef(function () { return NzRadioComponent; }),] }],
            nzDisabled: [{ type: i0.Input }],
            nzButtonStyle: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzName: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzRadioGroupComponent.prototype, "nzDisabled", void 0);
        return NzRadioGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRadioModule = /** @class */ (function () {
        function NzRadioModule() {
        }
        NzRadioModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule],
                        exports: [NzRadioComponent, NzRadioButtonComponent, NzRadioGroupComponent],
                        declarations: [NzRadioComponent, NzRadioButtonComponent, NzRadioGroupComponent]
                    },] }
        ];
        return NzRadioModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzOptionComponent = /** @class */ (function () {
        function NzOptionComponent() {
            this._disabled = false;
            this._customContent = false;
        }
        Object.defineProperty(NzOptionComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzOptionComponent.prototype, "nzCustomContent", {
            get: /**
             * @return {?}
             */ function () {
                return this._customContent;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._customContent = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        NzOptionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-option',
                        template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
                    }] }
        ];
        NzOptionComponent.propDecorators = {
            template: [{ type: i0.ViewChild, args: [i0.TemplateRef,] }],
            nzLabel: [{ type: i0.Input }],
            nzValue: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzCustomContent: [{ type: i0.Input }]
        };
        return NzOptionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzOptionLiComponent = /** @class */ (function () {
        function NzOptionLiComponent(elementRef) {
            this.elementRef = elementRef;
            this.el = this.elementRef.nativeElement;
            this.selected = false;
            this.active = false;
            this.nzShowActive = true;
            this.nzMode = 'default';
        }
        Object.defineProperty(NzOptionLiComponent.prototype, "nzActiveOption", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.active = this.compareWith(value.nzValue, this.nzOption.nzValue);
                }
                else {
                    this.active = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzOptionLiComponent.prototype, "nzListOfSelectedValue", {
            set: /**
             * @param {?} valueList
             * @return {?}
             */ function (valueList) {
                var _this = this;
                this.selected = isNotNil(valueList.find(function (v) { return _this.compareWith(v, _this.nzOption.nzValue); }));
            },
            enumerable: true,
            configurable: true
        });
        NzOptionLiComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-option-li]',
                        template: "<ng-container *ngIf=\"nzOption.nzCustomContent\">\n  <ng-template [ngTemplateOutlet]=\"nzOption.template\"></ng-template>\n  <i nz-icon *ngIf=\"nzMode !== 'default'\" type=\"check\" class=\"ant-select-selected-icon\"></i>\n</ng-container>\n<ng-container *ngIf=\"!nzOption.nzCustomContent\">\n  {{nzOption.nzLabel}}\n  <i nz-icon *ngIf=\"nzMode !== 'default'\" type=\"check\" class=\"ant-select-selected-icon\"></i>\n</ng-container>",
                        host: {
                            '[class.ant-select-dropdown-menu-item]': 'true',
                            '[class.ant-select-dropdown-menu-item-selected]': 'selected && !nzOption.nzDisabled',
                            '[class.ant-select-dropdown-menu-item-disabled]': 'nzOption.nzDisabled',
                            '[class.ant-select-dropdown-menu-item-active]': 'active && !nzOption.nzDisabled && nzShowActive && !selected',
                            '[attr.unselectable]': '"unselectable"',
                            '[style.user-select]': '"none"'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzOptionLiComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NzOptionLiComponent.propDecorators = {
            nzOption: [{ type: i0.Input }],
            nzShowActive: [{ type: i0.Input }],
            nzMode: [{ type: i0.Input }],
            compareWith: [{ type: i0.Input }],
            nzActiveOption: [{ type: i0.Input }],
            nzListOfSelectedValue: [{ type: i0.Input }]
        };
        return NzOptionLiComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzOptionPipe = /** @class */ (function () {
        function NzOptionPipe() {
        }
        /**
         * @param {?} options
         * @param {?} input
         * @param {?} filterOption
         * @param {?} serverSearch
         * @return {?}
         */
        NzOptionPipe.prototype.transform = /**
         * @param {?} options
         * @param {?} input
         * @param {?} filterOption
         * @param {?} serverSearch
         * @return {?}
         */
            function (options, input, filterOption, serverSearch) {
                if (serverSearch || !input) {
                    return options;
                }
                else {
                    return ( /** @type {?} */(options)).filter(function (o) { return filterOption(input, o); });
                }
            };
        NzOptionPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'nzFilterOptionPipe' },] }
        ];
        return NzOptionPipe;
    }());
    var NzSubOptionPipe = /** @class */ (function () {
        function NzSubOptionPipe() {
        }
        /**
         * @param {?} groups
         * @param {?} input
         * @param {?} filterOption
         * @param {?} serverSearch
         * @return {?}
         */
        NzSubOptionPipe.prototype.transform = /**
         * @param {?} groups
         * @param {?} input
         * @param {?} filterOption
         * @param {?} serverSearch
         * @return {?}
         */
            function (groups, input, filterOption, serverSearch) {
                if (serverSearch || !input) {
                    return groups;
                }
                else {
                    return ( /** @type {?} */(groups)).filter(function (g) {
                        return g.listOfNzOptionComponent.some(function (o) { return filterOption(input, o); });
                    });
                }
            };
        NzSubOptionPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'nzSubFilterOptionPipe' },] }
        ];
        return NzSubOptionPipe;
    }());
    /**
     * @param {?} input
     * @param {?} option
     * @return {?}
     */
    function defaultFilterOption(input, option) {
        if (option && option.nzLabel) {
            return option.nzLabel.toLowerCase().indexOf(input.toLowerCase()) > -1;
        }
        else {
            return false;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzOptionContainerComponent = /** @class */ (function () {
        function NzOptionContainerComponent() {
            this.isInit = false;
            this.isAddTagOptionDisplay = false;
            this.listOfAllTemplateOption = [];
            this.listOfTagOption = [];
            this.listOfFilterOption = [];
            // tslint:disable-next-line:no-any
            this.nzListOfSelectedValueChange = new i0.EventEmitter();
            this.nzListOfTemplateOptionChange = new i0.EventEmitter();
            this.nzClickOption = new i0.EventEmitter();
            this.nzScrollToBottom = new i0.EventEmitter();
            this.nzMode = 'default';
            this.nzServerSearch = false;
            this.nzFilterOption = defaultFilterOption;
            this.nzMaxMultipleCount = Infinity;
            // tslint:disable-next-line:no-any
            this.compareWith = function (o1, o2) { return o1 === o2; };
        }
        Object.defineProperty(NzOptionContainerComponent.prototype, "nzSearchValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._searchValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._searchValue = value;
                this.updateAddTagOptionDisplay();
                this.updateListOfFilterOption();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzOptionContainerComponent.prototype, "nzListOfSelectedValue", {
            // tslint:disable-next-line:no-any
            get: /**
             * @return {?}
             */ function () {
                return this._listOfSelectedValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._listOfSelectedValue !== value) {
                    this._listOfSelectedValue = value;
                    /** should clear activedOption when listOfSelectedValue change **/
                    this.clearActivatedOption();
                    this.refreshAllOptionStatus(false);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.addTagOption = /**
         * @return {?}
         */
            function () {
                if (this.nzListOfSelectedValue.length < this.nzMaxMultipleCount) {
                    this.nzListOfSelectedValue = __spread(this.nzListOfSelectedValue, [this.nzSearchValue]);
                    this.nzListOfSelectedValueChange.emit(this.nzListOfSelectedValue);
                }
            };
        /**
         * @param {?} option
         * @param {?} isPressEnter
         * @return {?}
         */
        NzOptionContainerComponent.prototype.clickOption = /**
         * @param {?} option
         * @param {?} isPressEnter
         * @return {?}
         */
            function (option, isPressEnter) {
                this.updateSelectedOption(option, isPressEnter);
                this.nzClickOption.emit();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzOptionContainerComponent.prototype.onKeyDownUl = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                if ([keycodes.UP_ARROW, keycodes.DOWN_ARROW, keycodes.ENTER].indexOf(e.keyCode) > -1) {
                    e.preventDefault();
                    /** @type {?} */
                    var activeIndex = this.listOfFilterOption.findIndex(function (item) { return item === _this.activatedOption; });
                    if (e.keyCode === keycodes.UP_ARROW) {
                        /** @type {?} */
                        var preIndex = activeIndex > 0 ? (activeIndex - 1) : (this.listOfFilterOption.length - 1);
                        this.setActiveOption(this.listOfFilterOption[preIndex]);
                    }
                    else if (e.keyCode === keycodes.DOWN_ARROW) {
                        /** @type {?} */
                        var nextIndex = activeIndex < this.listOfFilterOption.length - 1 ? (activeIndex + 1) : 0;
                        this.setActiveOption(this.listOfFilterOption[nextIndex]);
                    }
                    else if (e.keyCode === keycodes.ENTER) {
                        // enter
                        if (this.isTagsMode) {
                            if (!this.isAddTagOptionDisplay) {
                                this.clickOption(this.activatedOption, true);
                            }
                            else {
                                this.addTagOption();
                                this.nzClickOption.emit();
                            }
                        }
                        else {
                            this.clickOption(this.activatedOption, true);
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.resetActiveOption = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var firstActiveOption = this.listOfAllTemplateOption.concat(this.listOfTagOption).find(function (item) { return _this.compareWith(item.nzValue, _this.nzListOfSelectedValue[0]); });
                this.setActiveOption(firstActiveOption);
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.clearActivatedOption = /**
         * @return {?}
         */
            function () {
                this.setActiveOption(null);
            };
        /**
         * @param {?} option
         * @param {?=} scroll
         * @return {?}
         */
        NzOptionContainerComponent.prototype.setActiveOption = /**
         * @param {?} option
         * @param {?=} scroll
         * @return {?}
         */
            function (option, scroll) {
                if (scroll === void 0) {
                    scroll = true;
                }
                this.activatedOption = option;
                if (scroll) {
                    this.scrollIntoView();
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.scrollIntoView = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.listOfNzOptionLiComponent && this.listOfNzOptionLiComponent.length) {
                    /** @type {?} */
                    var targetOption_1 = this.listOfNzOptionLiComponent.find(function (o) { return o.nzOption === _this.activatedOption; });
                    /* tslint:disable-next-line:no-string-literal */
                    if (targetOption_1 && targetOption_1.el && targetOption_1.el['scrollIntoViewIfNeeded']) {
                        /* tslint:disable-next-line:no-string-literal */
                        setTimeout(function () { return targetOption_1.el['scrollIntoViewIfNeeded'](false); }, 150);
                    }
                }
            };
        /**
         * @param {?} option
         * @param {?} isPressEnter
         * @return {?}
         */
        NzOptionContainerComponent.prototype.updateSelectedOption = /**
         * @param {?} option
         * @param {?} isPressEnter
         * @return {?}
         */
            function (option, isPressEnter) {
                var _this = this;
                /** update listOfSelectedOption -> update nzListOfSelectedValue -> emit nzListOfSelectedValueChange **/
                if (option && !option.nzDisabled) {
                    /** @type {?} */
                    var changed = false;
                    this.setActiveOption(option);
                    /** @type {?} */
                    var listOfSelectedValue = __spread(this.nzListOfSelectedValue);
                    if (this.isMultipleOrTags) {
                        /** @type {?} */
                        var targetValue = listOfSelectedValue.find(function (o) { return _this.compareWith(o, option.nzValue); });
                        if (isNotNil(targetValue)) {
                            if (!isPressEnter) {
                                /** should not toggle option when press enter **/
                                listOfSelectedValue.splice(listOfSelectedValue.indexOf(targetValue), 1);
                                changed = true;
                            }
                        }
                        else if (this.nzListOfSelectedValue.length < this.nzMaxMultipleCount) {
                            listOfSelectedValue.push(option.nzValue);
                            changed = true;
                        }
                    }
                    else if (!this.compareWith(listOfSelectedValue[0], option.nzValue)) {
                        listOfSelectedValue = [option.nzValue];
                        changed = true;
                    }
                    /** update selectedValues when click option **/
                    if (changed) {
                        this._listOfSelectedValue = listOfSelectedValue;
                        this.nzListOfSelectedValueChange.emit(this.nzListOfSelectedValue);
                        if (this.isTagsMode) {
                            this.refreshAllOptionStatus(false);
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.refreshListOfTagOption = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isTagsMode) {
                    /** *
                     * refresh tags option *
                      @type {?} */
                    var listOfTagsOption_1 = [];
                    this.nzListOfSelectedValue.forEach(function (value) {
                        /** @type {?} */
                        var existedOption = _this.listOfAllTemplateOption.find(function (o) { return _this.compareWith(o.nzValue, value); });
                        if (!existedOption) {
                            /** @type {?} */
                            var nzOptionComponent = new NzOptionComponent();
                            nzOptionComponent.nzValue = value;
                            nzOptionComponent.nzLabel = value;
                            listOfTagsOption_1.push(nzOptionComponent);
                        }
                    });
                    this.listOfTagOption = listOfTagsOption_1;
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.refreshListOfAllTemplateOption = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.listOfAllTemplateOption = this.listOfNzOptionComponent.toArray().concat(this.listOfNzOptionGroupComponent.toArray().reduce(function (pre, cur) { return __spread(pre, cur.listOfNzOptionComponent.toArray()); }, []));
                Promise.resolve().then(function () { return _this.nzListOfTemplateOptionChange.emit(_this.listOfAllTemplateOption); });
            };
        /**
         * @param {?} isTemplateOptionChange
         * @return {?}
         */
        NzOptionContainerComponent.prototype.refreshAllOptionStatus = /**
         * @param {?} isTemplateOptionChange
         * @return {?}
         */
            function (isTemplateOptionChange) {
                /** update nzListOfSelectedValue | update option list -> update listOfAllTemplateOption -> update listOfSelectedOption -> update activatedOption **/
                if (this.isInit) {
                    if (isTemplateOptionChange) {
                        this.refreshListOfAllTemplateOption();
                    }
                    this.refreshListOfTagOption();
                    this.updateListOfFilterOption();
                    this.updateAddTagOptionDisplay();
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.updateListOfFilterOption = /**
         * @return {?}
         */
            function () {
                this.listOfFilterOption = /** @type {?} */ (new NzOptionPipe().transform(this.listOfAllTemplateOption.concat(this.listOfTagOption), this.nzSearchValue, this.nzFilterOption, this.nzServerSearch));
                if (this.nzSearchValue) {
                    this.setActiveOption(this.listOfFilterOption[0]);
                }
            };
        /** watch options change in option group **/
        /**
         * watch options change in option group *
         * @return {?}
         */
        NzOptionContainerComponent.prototype.watchSubOptionChanges = /**
         * watch options change in option group *
         * @return {?}
         */
            function () {
                var _this = this;
                this.unsubscribeOption();
                /** @type {?} */
                var optionChanges$ = rxjs.merge(new rxjs.Subject().asObservable(), this.listOfNzOptionGroupComponent.changes, this.listOfNzOptionComponent.changes);
                if (this.listOfNzOptionGroupComponent.length) {
                    this.listOfNzOptionGroupComponent.forEach(function (group) { return optionChanges$ = group.listOfNzOptionComponent ? rxjs.merge(group.listOfNzOptionComponent.changes, optionChanges$) : optionChanges$; });
                }
                this.optionSubscription = optionChanges$.subscribe(function () { return _this.refreshAllOptionStatus(true); });
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.unsubscribeGroup = /**
         * @return {?}
         */
            function () {
                if (this.groupSubscription) {
                    this.groupSubscription.unsubscribe();
                    this.groupSubscription = null;
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.unsubscribeOption = /**
         * @return {?}
         */
            function () {
                if (this.optionSubscription) {
                    this.optionSubscription.unsubscribe();
                    this.optionSubscription = null;
                }
            };
        Object.defineProperty(NzOptionContainerComponent.prototype, "isTagsMode", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMode === 'tags';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzOptionContainerComponent.prototype, "isMultipleOrTags", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMode === 'tags' || this.nzMode === 'multiple';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzOptionContainerComponent.prototype, "isNotFoundDisplay", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isTagsMode) && (!this.listOfFilterOption.length);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.updateAddTagOptionDisplay = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var listOfAllOption = this.listOfAllTemplateOption.concat(this.listOfTagOption).map(function (item) { return item.nzLabel; });
                /** @type {?} */
                var isMatch = listOfAllOption.indexOf(this.nzSearchValue) > -1;
                this.isAddTagOptionDisplay = this.isTagsMode && this.nzSearchValue && (!isMatch);
            };
        /**
         * @param {?} e
         * @param {?} ul
         * @return {?}
         */
        NzOptionContainerComponent.prototype.dropDownScroll = /**
         * @param {?} e
         * @param {?} ul
         * @return {?}
         */
            function (e, ul) {
                e.preventDefault();
                e.stopPropagation();
                if (ul && (ul.scrollHeight - ul.scrollTop === ul.clientHeight)) {
                    this.nzScrollToBottom.emit();
                }
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.isInit = true;
                this.refreshAllOptionStatus(true);
                this.watchSubOptionChanges();
                this.groupSubscription = this.listOfNzOptionGroupComponent.changes.subscribe(function () { return _this.watchSubOptionChanges(); });
            };
        /**
         * @return {?}
         */
        NzOptionContainerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribeGroup();
                this.unsubscribeOption();
            };
        NzOptionContainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-option-container]',
                        preserveWhitespaces: false,
                        template: "<ul\n  #dropdownUl\n  class=\"ant-select-dropdown-menu ant-select-dropdown-menu-root ant-select-dropdown-menu-vertical\"\n  role=\"menu\"\n  (keydown)=\"onKeyDownUl($event)\"\n  (scroll)=\"dropDownScroll($event,dropdownUl)\"\n  tabindex=\"0\">\n  <li\n    *ngIf=\"isNotFoundDisplay\"\n    nz-select-unselectable\n    class=\"ant-select-dropdown-menu-item ant-select-dropdown-menu-item-disabled\">\n    {{ nzNotFoundContent ? nzNotFoundContent : ('Select.notFoundContent' | nzI18n) }}\n  </li>\n  <li\n    *ngIf=\"isAddTagOptionDisplay\"\n    nz-select-unselectable\n    (click)=\"addTagOption()\"\n    class=\"ant-select-dropdown-menu-item ant-select-dropdown-menu-item-active\">\n    {{ nzSearchValue }}\n  </li>\n  <li\n    nz-option-li\n    [nzMode]=\"nzMode\"\n    [compareWith]=\"compareWith\"\n    *ngFor=\"let option of listOfNzOptionComponent | nzFilterOptionPipe : nzSearchValue : nzFilterOption : nzServerSearch \"\n    (click)=\"clickOption(option,false)\"\n    [nzActiveOption]=\"activatedOption\"\n    [nzOption]=\"option\"\n    [nzListOfSelectedValue]=\"nzListOfSelectedValue\">\n  </li>\n  <li\n    *ngFor=\"let group of listOfNzOptionGroupComponent | nzSubFilterOptionPipe : nzSearchValue : nzFilterOption : nzServerSearch\"\n    class=\"ant-select-dropdown-menu-item-group\">\n    <div\n      class=\"ant-select-dropdown-menu-item-group-title\"\n      [attr.title]=\"group.isLabelString ? group.nzLabel : ''\">\n      <ng-container *ngIf=\"group.isLabelString; else labelTemplate\">{{ group.nzLabel }}</ng-container>\n      <ng-template #labelTemplate>\n        <ng-template [ngTemplateOutlet]=\"group.nzLabel\"></ng-template>\n      </ng-template>\n    </div>\n    <ul class=\"ant-select-dropdown-menu-item-group-list\">\n      <li\n        nz-option-li\n        [nzMode]=\"nzMode\"\n        [compareWith]=\"compareWith\"\n        *ngFor=\"let option of group.listOfNzOptionComponent | nzFilterOptionPipe : nzSearchValue : nzFilterOption : nzServerSearch\"\n        (click)=\"clickOption(option,false)\"\n        [nzActiveOption]=\"activatedOption\"\n        [nzShowActive]=\"!isAddTagOptionDisplay\"\n        [nzOption]=\"option\"\n        [nzListOfSelectedValue]=\"nzListOfSelectedValue\">\n      </li>\n    </ul>\n  </li>\n  <li\n    nz-option-li\n    [nzMode]=\"nzMode\"\n    [compareWith]=\"compareWith\"\n    *ngFor=\"let option of listOfTagOption | nzFilterOptionPipe : nzSearchValue : nzFilterOption : nzServerSearch \"\n    (click)=\"clickOption(option,false)\"\n    [nzActiveOption]=\"activatedOption\"\n    [nzShowActive]=\"!isAddTagOptionDisplay\"\n    [nzOption]=\"option\"\n    [nzListOfSelectedValue]=\"nzListOfSelectedValue\">\n  </li>\n</ul>"
                    }] }
        ];
        NzOptionContainerComponent.propDecorators = {
            listOfNzOptionLiComponent: [{ type: i0.ViewChildren, args: [NzOptionLiComponent,] }],
            listOfNzOptionComponent: [{ type: i0.Input }],
            listOfNzOptionGroupComponent: [{ type: i0.Input }],
            nzListOfSelectedValueChange: [{ type: i0.Output }],
            nzListOfTemplateOptionChange: [{ type: i0.Output }],
            nzClickOption: [{ type: i0.Output }],
            nzScrollToBottom: [{ type: i0.Output }],
            nzMode: [{ type: i0.Input }],
            nzServerSearch: [{ type: i0.Input }],
            nzFilterOption: [{ type: i0.Input }],
            nzMaxMultipleCount: [{ type: i0.Input }],
            nzNotFoundContent: [{ type: i0.Input }],
            compareWith: [{ type: i0.Input }],
            nzSearchValue: [{ type: i0.Input }],
            nzListOfSelectedValue: [{ type: i0.Input }]
        };
        return NzOptionContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzOptionGroupComponent = /** @class */ (function () {
        function NzOptionGroupComponent() {
        }
        Object.defineProperty(NzOptionGroupComponent.prototype, "nzLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this._label;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isLabelString = !(value instanceof i0.TemplateRef);
                this._label = value;
            },
            enumerable: true,
            configurable: true
        });
        NzOptionGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-option-group',
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        NzOptionGroupComponent.propDecorators = {
            listOfNzOptionComponent: [{ type: i0.ContentChildren, args: [NzOptionComponent,] }],
            nzLabel: [{ type: i0.Input }]
        };
        return NzOptionGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSelectTopControlComponent = /** @class */ (function () {
        function NzSelectTopControlComponent(renderer) {
            this.renderer = renderer;
            this._listTemplateOfOption = [];
            this.listOfCachedSelectedOption = [];
            this.isComposing = false;
            // tslint:disable-next-line:no-any
            this.nzListOfSelectedValueChange = new i0.EventEmitter();
            this.nzOnSearch = new i0.EventEmitter();
            this.nzMode = 'default';
            this.nzShowSearch = false;
            this.nzDisabled = false;
            this.nzOpen = false;
        }
        Object.defineProperty(NzSelectTopControlComponent.prototype, "nzListOfSelectedValue", {
            // tslint:disable-next-line:no-any
            get: /**
             * @return {?}
             */ function () {
                return this._listOfSelectedValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._listOfSelectedValue = value;
                this.updateListOfCachedOption();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectTopControlComponent.prototype, "nzListTemplateOfOption", {
            get: /**
             * @return {?}
             */ function () {
                return this._listTemplateOfOption;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._listTemplateOfOption = value;
                this.updateListOfCachedOption();
            },
            enumerable: true,
            configurable: true
        });
        /** cached selected option list **/
        /**
         * cached selected option list *
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.updateListOfCachedOption = /**
         * cached selected option list *
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isSingleMode) {
                    /** @type {?} */
                    var selectedOption = this.nzListTemplateOfOption.find(function (o) { return _this.compareWith(o.nzValue, _this.nzListOfSelectedValue[0]); });
                    if (isNotNil(selectedOption)) {
                        this.listOfCachedSelectedOption = [selectedOption];
                    }
                }
                else {
                    /** @type {?} */
                    var listOfCachedOptionFromLatestTemplate_1 = this.nzListTemplateOfOption.filter(function (o) { return isNotNil(_this.nzListOfSelectedValue.find(function (v) { return _this.compareWith(v, o.nzValue); })); });
                    /** @type {?} */
                    var restSelectedValue_1 = this.nzListOfSelectedValue.filter(function (v) { return !isNotNil(listOfCachedOptionFromLatestTemplate_1.find(function (o) { return _this.compareWith(o.nzValue, v); })); });
                    /** @type {?} */
                    var listOfCachedOptionFromOld = this.listOfCachedSelectedOption.filter(function (o) { return isNotNil(restSelectedValue_1.find(function (v) { return _this.compareWith(o.nzValue, v); })); });
                    this.listOfCachedSelectedOption = listOfCachedOptionFromLatestTemplate_1.concat(listOfCachedOptionFromOld);
                }
            };
        /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.setInputValue = /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
            function (value, emit) {
                this.inputValue = value;
                this.updateWidth();
                this.nzOnSearch.emit({ value: value, emit: emit });
            };
        Object.defineProperty(NzSelectTopControlComponent.prototype, "isSingleMode", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMode === 'default';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectTopControlComponent.prototype, "isMultipleOrTags", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMode === 'tags' || this.nzMode === 'multiple';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectTopControlComponent.prototype, "placeHolderDisplay", {
            get: /**
             * @return {?}
             */ function () {
                return this.inputValue || this.isComposing || this.nzListOfSelectedValue.length ? 'none' : 'block';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectTopControlComponent.prototype, "selectedValueDisplay", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var showSelectedValue = false;
                /** @type {?} */
                var opacity = 1;
                if (!this.nzShowSearch) {
                    showSelectedValue = true;
                }
                else {
                    if (this.nzOpen) {
                        showSelectedValue = !(this.inputValue || this.isComposing);
                        if (showSelectedValue) {
                            opacity = 0.4;
                        }
                    }
                    else {
                        showSelectedValue = true;
                    }
                }
                return {
                    display: showSelectedValue ? 'block' : 'none',
                    opacity: "" + opacity
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectTopControlComponent.prototype, "singleValueLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this.getPropertyFromValue(this.nzListOfSelectedValue[0], 'nzLabel');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.focusOnInput = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    if (_this.inputElement) {
                        _this.inputElement.nativeElement.focus();
                    }
                });
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @param {?} prop
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.getPropertyFromValue = /**
         * @param {?} value
         * @param {?} prop
         * @return {?}
         */
            function (value, prop) {
                var _this = this;
                /** @type {?} */
                var targetOption = this.listOfCachedSelectedOption.find(function (item) { return _this.compareWith(item.nzValue, value); });
                return targetOption ? targetOption[prop] : '';
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.isOptionDisplay = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return (this.nzMode === 'tags') || !!this.getPropertyFromValue(value, 'nzLabel');
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @param {?=} event
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.removeValueFormSelected = /**
         * @param {?} value
         * @param {?=} event
         * @return {?}
         */
            function (value, event) {
                if (this.nzDisabled || this.getPropertyFromValue(value, 'nzDisabled')) {
                    return;
                }
                this._listOfSelectedValue = this.nzListOfSelectedValue.filter(function (item) { return item !== value; });
                this.nzListOfSelectedValueChange.emit(this.nzListOfSelectedValue);
                // Do not trigger the popup
                if (event && event.stopPropagation) {
                    event.stopPropagation();
                }
            };
        /**
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.updateWidth = /**
         * @return {?}
         */
            function () {
                if (this.isMultipleOrTags && this.inputElement) {
                    if (this.inputValue || this.isComposing) {
                        this.renderer.setStyle(this.inputElement.nativeElement, 'width', this.inputElement.nativeElement.scrollWidth + "px");
                    }
                    else {
                        this.renderer.removeStyle(this.inputElement.nativeElement, 'width');
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzSelectTopControlComponent.prototype.onKeyDownInput = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var keyCode = e.keyCode;
                /** @type {?} */
                var eventTarget = /** @type {?} */ (e.target);
                if (this.isMultipleOrTags &&
                    !eventTarget.value &&
                    // BackSpace
                    keyCode === 8) {
                    e.preventDefault();
                    if (this.nzListOfSelectedValue.length) {
                        this.removeValueFormSelected(this.nzListOfSelectedValue[this.nzListOfSelectedValue.length - 1]);
                    }
                }
            };
        NzSelectTopControlComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-select-top-control]',
                        preserveWhitespaces: false,
                        animations: [
                            animations.trigger('tagAnimation', [
                                animations.state('*', animations.style({ opacity: 1, transform: 'scale(1)' })),
                                animations.transition('void => *', [
                                    animations.style({ opacity: 0, transform: 'scale(0)' }),
                                    animations.animate('150ms linear')
                                ]),
                                animations.state('void', animations.style({ opacity: 0, transform: 'scale(0)' })),
                                animations.transition('* => void', [
                                    animations.style({ opacity: 1, transform: 'scale(1)' }),
                                    animations.animate('150ms linear')
                                ])
                            ])
                        ],
                        template: "<ng-template #inputTemplate>\n  <input\n    #inputElement\n    autocomplete=\"something-new\"\n    class=\"ant-select-search__field\"\n    (compositionstart)=\"isComposing = true\"\n    (compositionend)=\"isComposing = false\"\n    (input)=\"updateWidth()\"\n    (keydown)=\"onKeyDownInput($event)\"\n    [ngModel]=\"inputValue\"\n    (ngModelChange)=\"setInputValue($event,true)\"\n    [disabled]=\"nzDisabled\">\n</ng-template>\n<div\n  *ngIf=\"nzPlaceHolder\"\n  nz-select-unselectable\n  [style.display]=\"placeHolderDisplay\"\n  (click)=\"focusOnInput()\"\n  class=\"ant-select-selection__placeholder\">{{ nzPlaceHolder }}</div>\n<!--single mode-->\n<ng-container *ngIf=\"isSingleMode\">\n  <!--selected label-->\n  <div\n    *ngIf=\"nzListOfSelectedValue.length\"\n    class=\"ant-select-selection-selected-value\"\n    [attr.title]=\"nzListOfSelectedValue[0].nzLabel\"\n    [ngStyle]=\"selectedValueDisplay\">\n    {{ singleValueLabel }}\n  </div>\n  <!--show search-->\n  <div\n    *ngIf=\"nzShowSearch\"\n    class=\"ant-select-search ant-select-search--inline\">\n    <div class=\"ant-select-search__field__wrap\">\n      <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n      <span class=\"ant-select-search__field__mirror\">{{inputValue}}&nbsp;</span>\n    </div>\n  </div>\n</ng-container>\n<!--multiple or tags mode-->\n<ul *ngIf=\"isMultipleOrTags\">\n  <ng-container *ngFor=\"let value of nzListOfSelectedValue\">\n    <li\n      *ngIf=\"isOptionDisplay(value)\"\n      [@tagAnimation]\n      [attr.title]=\"getPropertyFromValue(value,'nzLabel')\"\n      [class.ant-select-selection__choice__disabled]=\"getPropertyFromValue(value,'nzDisabled')\"\n      class=\"ant-select-selection__choice\">\n      <div class=\"ant-select-selection__choice__content\">{{ getPropertyFromValue(value, 'nzLabel') || value }}</div>\n      <span *ngIf=\"!getPropertyFromValue(value,'nzDisabled')\" class=\"ant-select-selection__choice__remove\" (click)=\"removeValueFormSelected(value, $event)\">\n        <i nz-icon type=\"close\" class=\"ant-select-remove-icon\"></i>\n      </span>\n    </li>\n  </ng-container>\n\n  <li class=\"ant-select-search ant-select-search--inline\">\n    <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n  </li>\n</ul>",
                        host: {
                            '[class.ant-select-selection__rendered]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzSelectTopControlComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 }
            ];
        };
        NzSelectTopControlComponent.propDecorators = {
            inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
            nzListOfSelectedValueChange: [{ type: i0.Output }],
            nzOnSearch: [{ type: i0.Output }],
            nzMode: [{ type: i0.Input }],
            nzShowSearch: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            nzOpen: [{ type: i0.Input }],
            compareWith: [{ type: i0.Input }],
            nzListOfSelectedValue: [{ type: i0.Input }],
            nzListTemplateOfOption: [{ type: i0.Input }]
        };
        return NzSelectTopControlComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSelectUnselectableDirective = /** @class */ (function () {
        function NzSelectUnselectableDirective() {
        }
        NzSelectUnselectableDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-select-unselectable]',
                        host: {
                            '[attr.unselectable]': '"unselectable"',
                            '[style.user-select]': '"none"'
                        }
                    },] }
        ];
        return NzSelectUnselectableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSelectComponent = /** @class */ (function () {
        function NzSelectComponent(renderer) {
            this.renderer = renderer;
            this._disabled = false;
            this._allowClear = false;
            this._showSearch = false;
            this._open = false;
            this._autoFocus = false;
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
            this.dropDownPosition = 'bottom';
            // tslint:disable-next-line:no-any
            this.listOfSelectedValue = [];
            this.listOfTemplateOption = [];
            this.searchValue = '';
            this.isDestroy = true;
            this.isInit = false;
            this.nzOnSearch = new i0.EventEmitter();
            this.nzScrollToBottom = new i0.EventEmitter();
            this.nzOpenChange = new i0.EventEmitter();
            this.nzSize = 'default';
            this.nzServerSearch = false;
            this.nzMode = 'default';
            this.nzDropdownMatchSelectWidth = true;
            this.nzFilterOption = defaultFilterOption;
            this.nzMaxMultipleCount = Infinity;
            /**
             * https://github.com/angular/angular/pull/13349/files *
             */
            this.compareWith = function (o1, o2) { return o1 === o2; };
        }
        Object.defineProperty(NzSelectComponent.prototype, "nzDropdownClassName", {
            get: /**
             * @return {?}
             */ function () {
                return this._dropdownClassName;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._dropdownClassName = value;
                this.updateDropDownClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "nzAutoFocus", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoFocus;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoFocus = toBoolean(value);
                this.updateAutoFocus();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "nzOpen", {
            get: /**
             * @return {?}
             */ function () {
                return this._open;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._open = value;
                this.handleEscBug();
                this.updateCdkConnectedOverlayStatus();
                this.updateDropDownClassMap();
                if (this.nzOpen) {
                    if (this.nzSelectTopControlComponent) {
                        this.nzSelectTopControlComponent.focusOnInput();
                        this.nzSelectTopControlComponent.setInputValue('', true);
                    }
                    if (this.nzOptionContainerComponent) {
                        this.nzOptionContainerComponent.scrollIntoView();
                    }
                    if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef) {
                        this.cdkConnectedOverlay.overlayRef.updatePosition();
                        /** @type {?} */
                        var backdropElement = this.cdkConnectedOverlay.overlayRef.backdropElement;
                        /** @type {?} */
                        var parentNode = this.renderer.parentNode(backdropElement);
                        /** @type {?} */
                        var hostElement = this.cdkConnectedOverlay.overlayRef.hostElement;
                        this.renderer.appendChild(parentNode, backdropElement);
                        this.renderer.appendChild(parentNode, hostElement);
                    }
                }
                else {
                    if (this.nzSelectTopControlComponent) {
                        this.nzSelectTopControlComponent.setInputValue('', false);
                    }
                    if (this.nzOptionContainerComponent) {
                        this.nzOptionContainerComponent.resetActiveOption();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
                if (this.nzDisabled) {
                    this.closeDropDown();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "nzAllowClear", {
            get: /**
             * @return {?}
             */ function () {
                return this._allowClear;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._allowClear = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "nzShowSearch", {
            get: /**
             * @return {?}
             */ function () {
                return this._showSearch;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showSearch = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "nzPlaceHolder", {
            get: /**
             * @return {?}
             */ function () {
                return this._placeholder;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._placeholder = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (!this.nzDisabled) {
                    this.nzOpen = !this.nzOpen;
                    this.nzOpenChange.emit(this.nzOpen);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzSelectComponent.prototype._handleKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this._disabled) {
                    return;
                }
                /** @type {?} */
                var keyCode = event.keyCode;
                if (!this._open) {
                    if (keyCode === keycodes.SPACE || keyCode === keycodes.DOWN_ARROW) {
                        this.nzOpen = true;
                        this.nzOpenChange.emit(this.nzOpen);
                        event.preventDefault();
                    }
                }
                else {
                    if (keyCode === keycodes.TAB) {
                        // if (keyCode === SPACE || keyCode === TAB) { // #2201
                        this.nzOpen = false;
                        this.nzOpenChange.emit(this.nzOpen);
                        event.preventDefault();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.updateAutoFocus = /**
         * @return {?}
         */
            function () {
                if (this.isInit && this.nzSelectTopControlComponent.inputElement) {
                    if (this.nzAutoFocus) {
                        this.renderer.setAttribute(this.nzSelectTopControlComponent.inputElement.nativeElement, 'autofocus', 'autofocus');
                    }
                    else {
                        this.renderer.removeAttribute(this.nzSelectTopControlComponent.inputElement.nativeElement, 'autofocus');
                    }
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                if (this.nzSelectTopControlComponent.inputElement) {
                    this.nzSelectTopControlComponent.inputElement.nativeElement.focus();
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                if (this.nzSelectTopControlComponent.inputElement) {
                    this.nzSelectTopControlComponent.inputElement.nativeElement.blur();
                }
            };
        /** overlay can not be always open , reopen overlay after press esc **/
        /**
         * overlay can not be always open , reopen overlay after press esc *
         * @return {?}
         */
        NzSelectComponent.prototype.handleEscBug = /**
         * overlay can not be always open , reopen overlay after press esc *
         * @return {?}
         */
            function () {
                if (this.nzOpen && this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef && !this.cdkConnectedOverlay.overlayRef.backdropElement) {
                    this.cdkConnectedOverlay.open = true;
                    this.cdkConnectedOverlay.ngOnChanges({ open: new i0.SimpleChange(false, true, false) });
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzSelectComponent.prototype.onKeyDownCdkOverlayOrigin = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.nzOptionContainerComponent) {
                    this.nzOptionContainerComponent.onKeyDownUl(e);
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.closeDropDown = /**
         * @return {?}
         */
            function () {
                if (this.nzOpen) {
                    this.onTouched();
                    this.nzOpen = false;
                    this.nzOpenChange.emit(this.nzOpen);
                    this.blur();
                }
            };
        /**
         * @param {?} position
         * @return {?}
         */
        NzSelectComponent.prototype.onPositionChange = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this.dropDownPosition = position.connectionPair.originY;
                this.updateDropDownClassMap();
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.onClickOptionFromOptionContainer = /**
         * @return {?}
         */
            function () {
                if (this.isSingleMode) {
                    this.closeDropDown();
                }
                else if (this.nzMode === 'tags') {
                    this.onSearch('', true);
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.updateCdkConnectedOverlayStatus = /**
         * @return {?}
         */
            function () {
                if (this.isInit && this.nzOpen && this.cdkOverlayOrigin) {
                    if (this.nzDropdownMatchSelectWidth) {
                        this.overlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
                        this.cdkConnectedOverlay.overlayRef.updateSize({ width: this.overlayWidth });
                    }
                    else {
                        this.overlayMinWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
                        this.cdkConnectedOverlay.overlayRef.updateSize({ minWidth: this.overlayMinWidth });
                    }
                }
                this.updateCdkConnectedOverlayPositions();
                if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef && this.cdkConnectedOverlay.overlayRef.backdropElement) {
                    if (this.nzOpen) {
                        this.renderer.removeStyle(this.cdkConnectedOverlay.overlayRef.backdropElement, 'display');
                    }
                    else {
                        this.renderer.setStyle(this.cdkConnectedOverlay.overlayRef.backdropElement, 'display', 'none');
                    }
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.updateCdkConnectedOverlayPositions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** wait for input size change **/
                setTimeout(function () { return _this.cdkConnectedOverlay.overlayRef.updatePosition(); }, 160);
            };
        Object.defineProperty(NzSelectComponent.prototype, "isSingleMode", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMode === 'default';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSelectComponent.prototype, "isMultipleOrTags", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMode === 'tags' || this.nzMode === 'multiple';
            },
            enumerable: true,
            configurable: true
        });
        /** option container nzListOfSelectedValueChange -> update ngModel **/
        // tslint:disable-next-line:no-any
        /**
         * option container nzListOfSelectedValueChange -> update ngModel *
         * @param {?} value
         * @return {?}
         */
        NzSelectComponent.prototype.updateListOfSelectedValueFromOptionContainer = /**
         * option container nzListOfSelectedValueChange -> update ngModel *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.clearSearchValue();
                this.updateFromSelectedList(value);
            };
        /** option container nzListOfSelectedValueChange -> update ngModel **/
        // tslint:disable-next-line:no-any
        /**
         * option container nzListOfSelectedValueChange -> update ngModel *
         * @param {?} value
         * @return {?}
         */
        NzSelectComponent.prototype.updateListOfSelectedValueFromTopControl = /**
         * option container nzListOfSelectedValueChange -> update ngModel *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.clearSearchValue();
                this.updateFromSelectedList(value);
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @return {?}
         */
        NzSelectComponent.prototype.updateFromSelectedList = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var modelValue;
                if (this.isSingleMode) {
                    if (value.length) {
                        modelValue = value[0];
                    }
                }
                else {
                    modelValue = value;
                    this.updateCdkConnectedOverlayPositions();
                }
                this.updateNgModel(value, modelValue);
            };
        /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
        NzSelectComponent.prototype.onSearch = /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
            function (value, emit) {
                if (emit && (this.searchValue !== value)) {
                    this.nzOnSearch.emit(value);
                    this.searchValue = value;
                }
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.clearNgModel = /**
         * @return {?}
         */
            function () {
                if (this.isSingleMode) {
                    this.updateNgModel([], null);
                }
                else {
                    this.updateNgModel([], []);
                }
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} list
         * @param {?} value
         * @return {?}
         */
        NzSelectComponent.prototype.updateNgModel = /**
         * @param {?} list
         * @param {?} value
         * @return {?}
         */
            function (list, value) {
                this.listOfSelectedValue = list;
                if (value !== this.value) {
                    this.value = value;
                    this.onChange(this.value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzSelectComponent.prototype.listOfTemplateOptionChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.listOfTemplateOption = value;
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.updateDropDownClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.dropDownClassMap = (_a = {},
                    _a['ant-select-dropdown'] = true,
                    _a["ant-select-dropdown--single"] = this.isSingleMode,
                    _a["ant-select-dropdown--multiple"] = this.isMultipleOrTags,
                    _a["ant-select-dropdown-placement-bottomLeft"] = this.dropDownPosition === 'bottom',
                    _a["ant-select-dropdown-placement-topLeft"] = this.dropDownPosition === 'top',
                    _a["" + this.nzDropdownClassName] = !!this.nzDropdownClassName,
                    _a);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzSelectComponent.prototype.onClearSelection = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                // TODO: should not clear disabled option ?
                e.stopPropagation();
                this.clearNgModel();
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.clearSearchValue = /**
         * @return {?}
         */
            function () {
                if (this.isSingleMode) {
                    this.nzSelectTopControlComponent.setInputValue('', false);
                }
                else {
                    this.nzSelectTopControlComponent.setInputValue('', false);
                }
            };
        /** update ngModel -> update listOfSelectedValue **/
        // tslint:disable-next-line:no-any
        /**
         * update ngModel -> update listOfSelectedValue *
         * @param {?} value
         * @return {?}
         */
        NzSelectComponent.prototype.writeValue = /**
         * update ngModel -> update listOfSelectedValue *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                if (isNotNil(value)) {
                    if (Array.isArray(value)) {
                        this.listOfSelectedValue = value;
                    }
                    else {
                        this.listOfSelectedValue = [value];
                    }
                }
                else {
                    this.listOfSelectedValue = [];
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzSelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzSelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzSelectComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.isDestroy = false;
                this.updateDropDownClassMap();
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.isInit = true;
                Promise.resolve().then(function () { return _this.updateCdkConnectedOverlayStatus(); });
            };
        /**
         * @return {?}
         */
        NzSelectComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.isDestroy = true;
            };
        NzSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-select',
                        preserveWhitespaces: false,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzSelectComponent; }),
                                multi: true
                            }
                        ],
                        animations: [
                            animations.trigger('dropDownAnimation', [
                                animations.state('hidden', animations.style({
                                    opacity: 0,
                                    display: 'none'
                                })),
                                animations.state('bottom', animations.style({
                                    opacity: 1,
                                    transform: 'scaleY(1)',
                                    transformOrigin: '0% 0%'
                                })),
                                animations.state('top', animations.style({
                                    opacity: 1,
                                    transform: 'scaleY(1)',
                                    transformOrigin: '0% 100%'
                                })),
                                animations.transition('hidden => bottom', [
                                    animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 0%'
                                    }),
                                    animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')
                                ]),
                                animations.transition('bottom => hidden', [
                                    animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 0%'
                                    }))
                                ]),
                                animations.transition('hidden => top', [
                                    animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 100%'
                                    }),
                                    animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')
                                ]),
                                animations.transition('top => hidden', [
                                    animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 100%'
                                    }))
                                ])
                            ])
                        ],
                        template: "<div\n  cdkOverlayOrigin\n  class=\"ant-select-selection\"\n  [class.ant-select-selection--single]=\"isSingleMode\"\n  [class.ant-select-selection--multiple]=\"isMultipleOrTags\"\n  (keydown)=\"onKeyDownCdkOverlayOrigin($event)\"\n  tabindex=\"0\">\n  <div\n    nz-select-top-control\n    [nzOpen]=\"nzOpen\"\n    [compareWith]=\"compareWith\"\n    [nzPlaceHolder]=\"nzPlaceHolder\"\n    [nzShowSearch]=\"nzShowSearch\"\n    [nzDisabled]=\"nzDisabled\"\n    [nzMode]=\"nzMode\"\n    [nzListTemplateOfOption]=\"listOfTemplateOption\"\n    [nzListOfSelectedValue]=\"listOfSelectedValue\"\n    (nzOnSearch)=\"onSearch($event.value,$event.emit)\"\n    (nzListOfSelectedValueChange)=\"updateListOfSelectedValueFromTopControl($event)\">\n  </div>\n  <span *ngIf=\"nzAllowClear\" class=\"ant-select-selection__clear\" nz-select-unselectable (click)=\"onClearSelection($event)\">\n    <i nz-icon type=\"close-circle\" theme=\"fill\" class=\"ant-select-close-icon\"></i>\n  </span>\n  <span class=\"ant-select-arrow\" nz-select-unselectable>\n    <i nz-icon type=\"down\" class=\"ant-select-arrow-icon\"></i>\n    <b></b>\n  </span>\n</div>\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"true\"\n  [cdkConnectedOverlayOrigin]=\"cdkOverlayOrigin\"\n  (backdropClick)=\"closeDropDown()\"\n  (detach)=\"closeDropDown();\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayWidth]=\"overlayWidth\"\n  [cdkConnectedOverlayMinWidth]=\"overlayMinWidth\"\n  [cdkConnectedOverlayOpen]=\"!isDestroy\">\n  <div [ngClass]=\"dropDownClassMap\" [@dropDownAnimation]=\"nzOpen ? dropDownPosition : 'hidden' \" [ngStyle]=\"nzDropdownStyle\">\n    <div\n      style=\"overflow: auto\"\n      nz-option-container\n      [listOfNzOptionComponent]=\"listOfNzOptionComponent\"\n      [listOfNzOptionGroupComponent]=\"listOfNzOptionGroupComponent\"\n      [nzSearchValue]=\"searchValue\"\n      [nzFilterOption]=\"nzFilterOption\"\n      [nzServerSearch]=\"nzServerSearch\"\n      [compareWith]=\"compareWith\"\n      [nzNotFoundContent]=\"nzNotFoundContent\"\n      [nzMaxMultipleCount]=\"nzMaxMultipleCount\"\n      [nzMode]=\"nzMode\"\n      (nzScrollToBottom)=\"nzScrollToBottom.emit()\"\n      (nzClickOption)=\"onClickOptionFromOptionContainer()\"\n      (nzListOfTemplateOptionChange)=\"listOfTemplateOptionChange($event)\"\n      (nzListOfSelectedValueChange)=\"updateListOfSelectedValueFromOptionContainer($event)\"\n      [nzListOfSelectedValue]=\"listOfSelectedValue\">\n    </div>\n  </div>\n</ng-template>\n<!--can not use ViewChild since it will match sub options in option group -->\n<ng-template>\n  <ng-content></ng-content>\n</ng-template>",
                        host: {
                            '[class.ant-select]': 'true',
                            '[class.ant-select-lg]': 'nzSize==="large"',
                            '[class.ant-select-sm]': 'nzSize==="small"',
                            '[class.ant-select-enabled]': '!nzDisabled',
                            '[class.ant-select-disabled]': 'nzDisabled',
                            '[class.ant-select-allow-clear]': 'nzAllowClear',
                            '[class.ant-select-open]': 'nzOpen'
                        },
                        styles: ["\n    .ant-select-dropdown {\n      top: 100%;\n      left: 0;\n      position: relative;\n      width: 100%;\n      margin-top: 4px;\n      margin-bottom: 4px;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzSelectComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 }
            ];
        };
        NzSelectComponent.propDecorators = {
            cdkOverlayOrigin: [{ type: i0.ViewChild, args: [i2$1.CdkOverlayOrigin,] }],
            cdkConnectedOverlay: [{ type: i0.ViewChild, args: [i2$1.CdkConnectedOverlay,] }],
            nzSelectTopControlComponent: [{ type: i0.ViewChild, args: [NzSelectTopControlComponent,] }],
            nzOptionContainerComponent: [{ type: i0.ViewChild, args: [NzOptionContainerComponent,] }],
            listOfNzOptionComponent: [{ type: i0.ContentChildren, args: [NzOptionComponent,] }],
            listOfNzOptionGroupComponent: [{ type: i0.ContentChildren, args: [NzOptionGroupComponent,] }],
            nzOnSearch: [{ type: i0.Output }],
            nzScrollToBottom: [{ type: i0.Output }],
            nzOpenChange: [{ type: i0.Output }],
            nzSize: [{ type: i0.Input }],
            nzServerSearch: [{ type: i0.Input }],
            nzMode: [{ type: i0.Input }],
            nzDropdownMatchSelectWidth: [{ type: i0.Input }],
            nzFilterOption: [{ type: i0.Input }],
            nzMaxMultipleCount: [{ type: i0.Input }],
            nzDropdownStyle: [{ type: i0.Input }],
            nzNotFoundContent: [{ type: i0.Input }],
            compareWith: [{ type: i0.Input }],
            nzDropdownClassName: [{ type: i0.Input }],
            nzAutoFocus: [{ type: i0.Input }],
            nzOpen: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzAllowClear: [{ type: i0.Input }],
            nzShowSearch: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click',] }],
            _handleKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
        };
        return NzSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSelectModule = /** @class */ (function () {
        function NzSelectModule() {
        }
        NzSelectModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, i2$1.OverlayModule, NzI18nModule, NzIconModule],
                        declarations: [NzOptionPipe, NzSubOptionPipe, NzOptionComponent, NzSelectComponent, NzOptionContainerComponent, NzOptionGroupComponent, NzOptionLiComponent, NzSelectTopControlComponent, NzSelectUnselectableDirective],
                        exports: [NzOptionComponent, NzSelectComponent, NzOptionContainerComponent, NzOptionGroupComponent, NzSelectTopControlComponent]
                    },] }
        ];
        return NzSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDateCellDirective = /** @class */ (function () {
        function NzDateCellDirective() {
        }
        NzDateCellDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nzDateCell]'
                    },] }
        ];
        return NzDateCellDirective;
    }());
    var NzMonthCellDirective = /** @class */ (function () {
        function NzMonthCellDirective() {
        }
        NzMonthCellDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nzMonthCell]'
                    },] }
        ];
        return NzMonthCellDirective;
    }());
    var NzDateFullCellDirective = /** @class */ (function () {
        function NzDateFullCellDirective() {
        }
        NzDateFullCellDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nzDateFullCell]'
                    },] }
        ];
        return NzDateFullCellDirective;
    }());
    var NzMonthFullCellDirective = /** @class */ (function () {
        function NzMonthFullCellDirective() {
        }
        NzMonthFullCellDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nzMonthFullCell]'
                    },] }
        ];
        return NzMonthFullCellDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCalendarHeaderComponent = /** @class */ (function () {
        function NzCalendarHeaderComponent(i18n) {
            this.i18n = i18n;
            this.mode = 'month';
            this.modeChange = new i0.EventEmitter();
            this.fullscreen = true;
            this.yearChange = new i0.EventEmitter();
            this.monthChange = new i0.EventEmitter();
            this._activeDate = new Date();
            this.yearOffset = 10;
            this.yearTotal = 20;
            this.prefixCls = 'ant-fullcalendar';
        }
        Object.defineProperty(NzCalendarHeaderComponent.prototype, "activeDate", {
            get: /**
             * @return {?}
             */ function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._activeDate = value;
                this.setUpYears();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarHeaderComponent.prototype, "activeYear", {
            get: /**
             * @return {?}
             */ function () {
                return this.activeDate.getFullYear();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarHeaderComponent.prototype, "activeMonth", {
            get: /**
             * @return {?}
             */ function () {
                return this.activeDate.getMonth();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarHeaderComponent.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                return this.fullscreen ? 'default' : 'small';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarHeaderComponent.prototype, "yearTypeText", {
            get: /**
             * @return {?}
             */ function () {
                return this.i18n.getLocale().Calendar.year;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarHeaderComponent.prototype, "monthTypeText", {
            get: /**
             * @return {?}
             */ function () {
                return this.i18n.getLocale().Calendar.month;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzCalendarHeaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setUpYears();
                this.setUpMonths();
            };
        /**
         * @param {?} year
         * @return {?}
         */
        NzCalendarHeaderComponent.prototype.updateYear = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                this.yearChange.emit(year);
                this.setUpYears(year);
            };
        /**
         * @param {?=} year
         * @return {?}
         */
        NzCalendarHeaderComponent.prototype.setUpYears = /**
         * @param {?=} year
         * @return {?}
         */
            function (year) {
                /** @type {?} */
                var start = (year || this.activeYear) - this.yearOffset;
                /** @type {?} */
                var end = start + this.yearTotal;
                this.years = [];
                for (var i = start; i < end; i++) {
                    this.years.push({ label: "" + i, value: i });
                }
            };
        /**
         * @return {?}
         */
        NzCalendarHeaderComponent.prototype.setUpMonths = /**
         * @return {?}
         */
            function () {
                this.months = [];
                for (var i = 0; i < 12; i++) {
                    /** @type {?} */
                    var dateInMonth = setMonth(this.activeDate, i);
                    /** @type {?} */
                    var monthText = this.i18n.formatDate(dateInMonth, 'MMM');
                    this.months.push({ label: monthText, value: i });
                }
            };
        NzCalendarHeaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-calendar-header',
                        template: "<nz-select class=\"ant-fullcalendar-year-select\" [nzSize]=\"size\" [nzDropdownMatchSelectWidth]=\"false\"\n           [ngModel]=\"activeYear\" (ngModelChange)=\"updateYear($event)\">\n  <nz-option *ngFor=\"let year of years\" [nzLabel]=\"year.label\" [nzValue]=\"year.value\"></nz-option>\n</nz-select>\n\n<nz-select *ngIf=\"mode === 'month'\" class=\"ant-fullcalendar-month-select\" [nzSize]=\"size\" [nzDropdownMatchSelectWidth]=\"false\"\n           [ngModel]=\"activeMonth\" (ngModelChange)=\"monthChange.emit($event)\">\n  <nz-option *ngFor=\"let month of months\" [nzLabel]=\"month.label\" [nzValue]=\"month.value\"></nz-option>\n</nz-select>\n\n<nz-radio-group [(ngModel)]=\"mode\" (ngModelChange)=\"modeChange.emit($event)\" [nzSize]=\"size\">\n  <label nz-radio-button nzValue=\"month\">{{ monthTypeText }}</label>\n  <label nz-radio-button nzValue=\"year\">{{ yearTypeText }}</label>\n</nz-radio-group>\n",
                        host: {
                            '[style.display]': "'block'",
                            '[class.ant-fullcalendar-header]': "true"
                        }
                    }] }
        ];
        /** @nocollapse */
        NzCalendarHeaderComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        NzCalendarHeaderComponent.propDecorators = {
            mode: [{ type: i0.Input }],
            modeChange: [{ type: i0.Output }],
            fullscreen: [{ type: i0.Input }],
            activeDate: [{ type: i0.Input }],
            yearChange: [{ type: i0.Output }],
            monthChange: [{ type: i0.Output }]
        };
        return NzCalendarHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCalendarComponent = /** @class */ (function () {
        function NzCalendarComponent(i18n) {
            this.i18n = i18n;
            this.nzMode = 'month';
            this.nzModeChange = new i0.EventEmitter();
            this.nzValueChange = new i0.EventEmitter();
            this.fullscreen = true;
            this.daysInWeek = [];
            this.monthsInYear = [];
            this.dateMatrix = [];
            this.activeDate = new Date();
            this.currentDateRow = -1;
            this.currentDateCol = -1;
            this.activeDateRow = -1;
            this.activeDateCol = -1;
            this.currentMonthRow = -1;
            this.currentMonthCol = -1;
            this.activeMonthRow = -1;
            this.activeMonthCol = -1;
            this.dateCell = null;
            this.dateFullCell = null;
            this.monthCell = null;
            this.monthFullCell = null;
            this.prefixCls = 'ant-fullcalendar';
            this.currentDate = new Date();
            this.onChangeFn = function () { };
            this.onTouchFn = function () { };
        }
        Object.defineProperty(NzCalendarComponent.prototype, "nzValue", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.updateDate(value, false); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "nzDateCell", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.dateCell = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "nzDateFullCell", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.dateFullCell = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "nzMonthCell", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.monthCell = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "nzMonthFullCell", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.monthFullCell = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "nzFullscreen", {
            get: /**
             * @return {?}
             */ function () { return this.fullscreen; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.fullscreen = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "nzCard", {
            get: /**
             * @return {?}
             */ function () { return !this.fullscreen; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this.fullscreen = !coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "dateCellChild", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.dateCell = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "dateFullCellChild", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.dateFullCell = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "monthCellChild", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.monthCell = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "monthFullCellChild", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.monthFullCell = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCalendarComponent.prototype, "calendarStart", {
            get: /**
             * @return {?}
             */ function () {
                return startOfWeek(startOfMonth(this.activeDate));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setUpDaysInWeek();
                this.setUpMonthsInYear();
                this.setUpDateMatrix();
                this.calculateCurrentDate();
                this.calculateActiveDate();
                this.calculateCurrentMonth();
                this.calculateActiveMonth();
            };
        /**
         * @param {?} mode
         * @return {?}
         */
        NzCalendarComponent.prototype.onModeChange = /**
         * @param {?} mode
         * @return {?}
         */
            function (mode) {
                this.nzModeChange.emit(mode);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NzCalendarComponent.prototype.onDateSelect = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.updateDate(date);
            };
        /**
         * @param {?} year
         * @return {?}
         */
        NzCalendarComponent.prototype.onYearSelect = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                /** @type {?} */
                var date = setYear(this.activeDate, year);
                this.updateDate(date);
            };
        /**
         * @param {?} month
         * @return {?}
         */
        NzCalendarComponent.prototype.onMonthSelect = /**
         * @param {?} month
         * @return {?}
         */
            function (month) {
                /** @type {?} */
                var date = setMonth(this.activeDate, month);
                this.updateDate(date);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzCalendarComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.updateDate(value || new Date(), false);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCalendarComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeFn = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCalendarComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouchFn = fn;
            };
        /**
         * @param {?} date
         * @param {?=} touched
         * @return {?}
         */
        NzCalendarComponent.prototype.updateDate = /**
         * @param {?} date
         * @param {?=} touched
         * @return {?}
         */
            function (date, touched) {
                if (touched === void 0) {
                    touched = true;
                }
                /** @type {?} */
                var dayChanged = !isSameDay(date, this.activeDate);
                /** @type {?} */
                var monthChanged = !isSameMonth(date, this.activeDate);
                /** @type {?} */
                var yearChanged = !isSameYear(date, this.activeDate);
                this.activeDate = date;
                if (dayChanged) {
                    this.calculateActiveDate();
                }
                if (monthChanged) {
                    this.setUpDateMatrix();
                    this.calculateCurrentDate();
                    this.calculateActiveMonth();
                }
                if (yearChanged) {
                    this.calculateCurrentMonth();
                }
                if (touched) {
                    this.onChangeFn(date);
                    this.onTouchFn();
                    this.nzValueChange.emit(date);
                }
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.setUpDaysInWeek = /**
         * @return {?}
         */
            function () {
                this.daysInWeek = [];
                /** @type {?} */
                var weekStart = startOfWeek(this.activeDate);
                for (var i = 0; i < 7; i++) {
                    /** @type {?} */
                    var date = addDays(weekStart, i);
                    /** @type {?} */
                    var title = this.i18n.formatDate(date, 'E');
                    /** @type {?} */
                    var label = this.i18n.formatDate(date, 'EEEEEE');
                    this.daysInWeek.push({ title: title, label: label });
                }
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.setUpMonthsInYear = /**
         * @return {?}
         */
            function () {
                this.monthsInYear = [];
                for (var i = 0; i < 12; i++) {
                    /** @type {?} */
                    var date = setMonth(this.activeDate, i);
                    /** @type {?} */
                    var title = this.i18n.formatDate(date, 'MMM');
                    /** @type {?} */
                    var label = this.i18n.formatDate(date, 'MMM');
                    /** @type {?} */
                    var start = startOfMonth(date);
                    this.monthsInYear.push({ title: title, label: label, start: start });
                }
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.setUpDateMatrix = /**
         * @return {?}
         */
            function () {
                this.dateMatrix = [];
                /** @type {?} */
                var monthStart = startOfMonth(this.activeDate);
                /** @type {?} */
                var monthEnd = endOfMonth(this.activeDate);
                /** @type {?} */
                var weekDiff = differenceInCalendarWeeks(monthEnd, monthStart) + 2;
                for (var week = 0; week < weekDiff; week++) {
                    /** @type {?} */
                    var row = [];
                    /** @type {?} */
                    var weekStart = addDays(this.calendarStart, week * 7);
                    for (var day = 0; day < 7; day++) {
                        /** @type {?} */
                        var date = addDays(weekStart, day);
                        /** @type {?} */
                        var monthDiff = differenceInCalendarMonths(date, this.activeDate);
                        /** @type {?} */
                        var title = this.i18n.formatDate(date, 'longDate');
                        /** @type {?} */
                        var label = this.i18n.formatDate(date, 'dd');
                        /** @type {?} */
                        var rel = monthDiff === 0 ? 'current' : monthDiff < 0 ? 'last' : 'next';
                        row.push({ title: title, label: label, rel: rel, value: date });
                    }
                    this.dateMatrix.push(row);
                }
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.calculateCurrentDate = /**
         * @return {?}
         */
            function () {
                if (isThisMonth(this.activeDate)) {
                    this.currentDateRow = differenceInCalendarWeeks(this.currentDate, this.calendarStart);
                    this.currentDateCol = differenceInCalendarDays(this.currentDate, addDays(this.calendarStart, this.currentDateRow * 7));
                }
                else {
                    this.currentDateRow = -1;
                    this.currentDateCol = -1;
                }
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.calculateActiveDate = /**
         * @return {?}
         */
            function () {
                this.activeDateRow = differenceInCalendarWeeks(this.activeDate, this.calendarStart);
                this.activeDateCol = differenceInCalendarDays(this.activeDate, addDays(this.calendarStart, this.activeDateRow * 7));
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.calculateCurrentMonth = /**
         * @return {?}
         */
            function () {
                if (isThisYear(this.activeDate)) {
                    /** @type {?} */
                    var yearStart = startOfYear(this.currentDate);
                    /** @type {?} */
                    var monthDiff = differenceInCalendarMonths(this.currentDate, yearStart);
                    this.currentMonthRow = Math.floor(monthDiff / 3);
                    this.currentMonthCol = monthDiff % 3;
                }
                else {
                    this.currentMonthRow = -1;
                    this.currentMonthCol = -1;
                }
            };
        /**
         * @return {?}
         */
        NzCalendarComponent.prototype.calculateActiveMonth = /**
         * @return {?}
         */
            function () {
                this.activeMonthRow = Math.floor(this.activeDate.getMonth() / 3);
                this.activeMonthCol = this.activeDate.getMonth() % 3;
            };
        NzCalendarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-calendar',
                        template: "<nz-calendar-header [fullscreen]=\"fullscreen\" [activeDate]=\"activeDate\"\n                    [(mode)]=\"nzMode\" (modeChange)=\"onModeChange($event)\"\n                    (yearChange)=\"onYearSelect($event)\" (monthChange)=\"onMonthSelect($event)\">\n</nz-calendar-header>\n\n<div class=\"ant-fullcalendar ant-fullcalendar-full\" [ngClass]=\"fullscreen ? 'ant-fullcalendar-fullscreen' : ''\">\n  <div class=\"ant-fullcalendar-calendar-body\">\n    <ng-container *ngIf=\"nzMode === 'month' then monthModeTable else yearModeTable\"></ng-container>\n  </div>\n</div>\n\n<ng-template #monthModeTable>\n  <table class=\"ant-fullcalendar-table\" cellspacing=\"0\" role=\"grid\">\n    <thead>\n      <tr role=\"row\">\n        <th *ngFor=\"let day of daysInWeek\" class=\"ant-fullcalendar-column-header\" role=\"columnheader\" [title]=\"day.title\">\n          <span class=\"ant-fullcalendar-column-header-inner\">{{ day.label }}</span>\n        </th>\n      </tr>\n    </thead>\n    <tbody class=\"ant-fullcalendar-tbody\">\n      <tr *ngFor=\"let week of dateMatrix; index as row\"\n          [class.ant-fullcalendar-current-week]=\"row === currentDateRow\"\n          [class.ant-fullcalendar-active-week]=\"row === activeDateRow\">\n        <td *ngFor=\"let day of week; index as col\" role=\"gridcell\" class=\"ant-fullcalendar-cell\" [title]=\"day.title\"\n            [class.ant-fullcalendar-today]=\"row === currentDateRow && col === currentDateCol\"\n            [class.ant-fullcalendar-selected-day]=\"row === activeDateRow && col === activeDateCol\"\n            [class.ant-fullcalendar-last-month-cell]=\"day.rel === 'last'\"\n            [class.ant-fullcalendar-next-month-btn-day]=\"day.rel === 'next'\"\n            (click)=\"onDateSelect(day.value)\">\n            <div class=\"ant-fullcalendar-date\">\n              <ng-container *ngIf=\"dateFullCell else defaultCell\">\n                <ng-container *ngTemplateOutlet=\"dateFullCell; context: {$implicit: day.value}\"></ng-container>\n              </ng-container>\n              <ng-template #defaultCell>\n                <div class=\"ant-fullcalendar-value\">{{ day.label }}</div>\n                <div *ngIf=\"dateCell\" class=\"ant-fullcalendar-content\">\n                  <ng-container *ngTemplateOutlet=\"dateCell; context: {$implicit: day.value}\"></ng-container>\n                </div>\n              </ng-template>\n            </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template #yearModeTable>\n  <table class=\"ant-fullcalendar-month-panel-table\" cellspacing=\"0\" role=\"grid\">\n    <tbody class=\"ant-fullcalendar-month-panel-tbody\">\n      <tr *ngFor=\"let row of [0, 1, 2, 3]\" role=\"row\">\n        <td *ngFor=\"let col of [0, 1, 2]\" role=\"gridcell\" [title]=\"monthsInYear[row * 3 + col].title\"\n            class=\"ant-fullcalendar-month-panel-cell\"\n            [class.ant-fullcalendar-month-panel-current-cell]=\"row === currentMonthRow && col === currentMonthCol\"\n            [class.ant-fullcalendar-month-panel-selected-cell]=\"row === activeMonthRow && col === activeMonthCol\"\n            (click)=\"onMonthSelect(row * 3 + col)\">\n          <div class=\"ant-fullcalendar-month\">\n            <ng-container *ngIf=\"monthFullCell else defaultCell\">\n              <ng-container *ngTemplateOutlet=\"monthFullCell; context: {$implicit: monthsInYear[row * 3 + col].start}\"></ng-container>\n            </ng-container>\n            <ng-template #defaultCell>\n              <div class=\"ant-fullcalendar-value\">{{ monthsInYear[row * 3 + col].label }}</div>\n              <div *ngIf=\"monthCell\" class=\"ant-fullcalendar-content\">\n                <ng-container *ngTemplateOutlet=\"monthCell; context: {$implicit: monthsInYear[row * 3 + col].start}\"></ng-container>\n              </div>\n            </ng-template>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n",
                        providers: [
                            { provide: forms.NG_VALUE_ACCESSOR, useExisting: i0.forwardRef(function () { return NzCalendarComponent; }), multi: true }
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzCalendarComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        NzCalendarComponent.propDecorators = {
            nzMode: [{ type: i0.Input }],
            nzModeChange: [{ type: i0.Output }],
            nzValue: [{ type: i0.Input }],
            nzValueChange: [{ type: i0.Output }],
            nzDateCell: [{ type: i0.Input }],
            nzDateFullCell: [{ type: i0.Input }],
            nzMonthCell: [{ type: i0.Input }],
            nzMonthFullCell: [{ type: i0.Input }],
            nzFullscreen: [{ type: i0.Input }],
            nzCard: [{ type: i0.Input }],
            dateCellChild: [{ type: i0.ContentChild, args: [NzDateCellDirective, { read: i0.TemplateRef },] }],
            dateFullCellChild: [{ type: i0.ContentChild, args: [NzDateFullCellDirective, { read: i0.TemplateRef },] }],
            monthCellChild: [{ type: i0.ContentChild, args: [NzMonthCellDirective, { read: i0.TemplateRef },] }],
            monthFullCellChild: [{ type: i0.ContentChild, args: [NzMonthFullCellDirective, { read: i0.TemplateRef },] }],
            fullscreen: [{ type: i0.HostBinding, args: ['class.ant-fullcalendar--fullscreen',] }]
        };
        return NzCalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCalendarModule = /** @class */ (function () {
        function NzCalendarModule() {
        }
        NzCalendarModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            NzCalendarHeaderComponent,
                            NzCalendarComponent,
                            NzDateCellDirective,
                            NzDateFullCellDirective,
                            NzMonthCellDirective,
                            NzMonthFullCellDirective
                        ],
                        exports: [
                            NzCalendarComponent,
                            NzDateCellDirective,
                            NzDateFullCellDirective,
                            NzMonthCellDirective,
                            NzMonthFullCellDirective
                        ],
                        imports: [i3.CommonModule, forms.FormsModule, NzI18nModule, NzRadioModule, NzSelectModule]
                    },] }
        ];
        return NzCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCardGridDirective = /** @class */ (function () {
        function NzCardGridDirective() {
        }
        NzCardGridDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-card-grid]',
                        host: {
                            '[class.ant-card-grid]': 'true'
                        }
                    },] }
        ];
        return NzCardGridDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCardLoadingComponent = /** @class */ (function () {
        function NzCardLoadingComponent() {
        }
        NzCardLoadingComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-card-loading',
                        template: "<div class=\"ant-card-loading-content\">\n  <div class=\"ant-row\" style=\"margin-left: -4px; margin-right: -4px;\">\n    <div class=\"ant-col-22\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n  </div>\n  <div class=\"ant-row\" style=\"margin-left: -4px; margin-right: -4px;\">\n    <div class=\"ant-col-8\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-15\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n  </div>\n  <div class=\"ant-row\" style=\"margin-left: -4px; margin-right: -4px;\">\n    <div class=\"ant-col-6\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-18\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n  </div>\n  <div class=\"ant-row\" style=\"margin-left: -4px; margin-right: -4px;\">\n    <div class=\"ant-col-13\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-9\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n  </div>\n  <div class=\"ant-row\" style=\"margin-left: -4px; margin-right: -4px;\">\n    <div class=\"ant-col-4\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-3\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-16\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n  </div>\n  <div class=\"ant-row\" style=\"margin-left: -4px; margin-right: -4px;\">\n    <div class=\"ant-col-8\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-6\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n    <div class=\"ant-col-8\" style=\"padding-left: 4px; padding-right: 4px;\">\n      <div class=\"ant-card-loading-block\"></div>\n    </div>\n  </div>\n</div>",
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        host: {
                            '[class.ant-card-loading-content]': 'true'
                        },
                        styles: ["\n    nz-card-loading {\n      display: block;\n    }\n  "]
                    }] }
        ];
        return NzCardLoadingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCardMetaComponent = /** @class */ (function () {
        function NzCardMetaComponent() {
        }
        NzCardMetaComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-card-meta',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<div class=\"ant-card-meta-avatar\" *ngIf=\"nzAvatar\">\n  <ng-template [ngTemplateOutlet]=\"nzAvatar\"></ng-template>\n</div>\n<div class=\"ant-card-meta-detail\" *ngIf=\"nzTitle || nzDescription\">\n  <div class=\"ant-card-meta-title\" *ngIf=\"nzTitle\">\n    <ng-container *nzStringTemplateOutlet=\"nzTitle\">{{ nzTitle }}</ng-container>\n  </div>\n  <div class=\"ant-card-meta-description\" *ngIf=\"nzDescription\">\n    <ng-container *nzStringTemplateOutlet=\"nzDescription\">{{ nzDescription }}</ng-container>\n  </div>\n</div>",
                        host: {
                            '[class.ant-card-meta]': 'true'
                        },
                        styles: ["\n    nz-card-meta {\n      display: block;\n    }\n  "]
                    }] }
        ];
        NzCardMetaComponent.propDecorators = {
            nzTitle: [{ type: i0.Input }],
            nzDescription: [{ type: i0.Input }],
            nzAvatar: [{ type: i0.Input }]
        };
        return NzCardMetaComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCardTabComponent = /** @class */ (function () {
        function NzCardTabComponent() {
        }
        NzCardTabComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-card-tab',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
                    }] }
        ];
        NzCardTabComponent.propDecorators = {
            template: [{ type: i0.ViewChild, args: [i0.TemplateRef,] }]
        };
        return NzCardTabComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCardComponent = /** @class */ (function () {
        function NzCardComponent() {
            this.nzBordered = true;
            this.nzLoading = false;
            this.nzHoverable = false;
            this.nzActions = [];
        }
        NzCardComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-card',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<div class=\"ant-card-head\" *ngIf=\"nzTitle || nzExtra || tab\">\n  <div class=\"ant-card-head-wrapper\">\n    <div class=\"ant-card-head-title\" *ngIf=\"nzTitle\">\n      <ng-container *nzStringTemplateOutlet=\"nzTitle\">{{ nzTitle }}</ng-container>\n    </div>\n    <div class=\"ant-card-extra\" *ngIf=\"nzExtra\">\n      <ng-container *nzStringTemplateOutlet=\"nzExtra\">{{ nzExtra }}</ng-container>\n    </div>\n  </div>\n  <ng-container *ngIf=\"tab\">\n    <ng-template [ngTemplateOutlet]=\"tab.template\"></ng-template>\n  </ng-container>\n</div>\n<div class=\"ant-card-cover\" *ngIf=\"nzCover\">\n  <ng-template [ngTemplateOutlet]=\"nzCover\"></ng-template>\n</div>\n<div class=\"ant-card-body\" [ngStyle]=\"nzBodyStyle\">\n  <ng-container *ngIf=\"!nzLoading\">\n    <ng-content></ng-content>\n  </ng-container>\n  <nz-card-loading *ngIf=\"nzLoading\"></nz-card-loading>\n</div>\n<ul class=\"ant-card-actions\" *ngIf=\"nzActions.length\">\n  <li *ngFor=\"let action of nzActions\" [style.width.%]=\"100 / nzActions.length\">\n    <span><ng-template [ngTemplateOutlet]=\"action\"></ng-template></span>\n  </li>\n</ul>",
                        host: {
                            '[class.ant-card]': 'true',
                            '[class.ant-card-loading]': 'nzLoading',
                            '[class.ant-card-bordered]': 'nzBordered',
                            '[class.ant-card-hoverable]': 'nzHoverable',
                            '[class.ant-card-type-inner]': "nzType === 'inner'",
                            '[class.ant-card-contain-tabs]': '!!tab'
                        },
                        styles: ["\n    nz-card {\n      display: block;\n    }\n  "]
                    }] }
        ];
        NzCardComponent.propDecorators = {
            nzBordered: [{ type: i0.Input }],
            nzLoading: [{ type: i0.Input }],
            nzHoverable: [{ type: i0.Input }],
            nzBodyStyle: [{ type: i0.Input }],
            nzCover: [{ type: i0.Input }],
            nzActions: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzExtra: [{ type: i0.Input }],
            tab: [{ type: i0.ContentChild, args: [NzCardTabComponent,] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCardComponent.prototype, "nzBordered", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCardComponent.prototype, "nzLoading", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCardComponent.prototype, "nzHoverable", void 0);
        return NzCardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCardModule = /** @class */ (function () {
        function NzCardModule() {
        }
        NzCardModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, NzAddOnModule],
                        declarations: [NzCardComponent, NzCardGridDirective, NzCardMetaComponent, NzCardLoadingComponent, NzCardTabComponent],
                        exports: [NzCardComponent, NzCardGridDirective, NzCardMetaComponent, NzCardLoadingComponent, NzCardTabComponent]
                    },] }
        ];
        return NzCardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCarouselContentDirective = /** @class */ (function () {
        function NzCarouselContentDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this._active = false;
            this._width = 0;
            this._fadeMode = false;
            this.el = this.elementRef.nativeElement;
        }
        Object.defineProperty(NzCarouselContentDirective.prototype, "width", {
            get: /**
             * @return {?}
             */ function () {
                return this._width;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._width = value;
                this.renderer.setStyle(this.el, 'width', this.width + "px");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselContentDirective.prototype, "left", {
            get: /**
             * @return {?}
             */ function () {
                return this._left;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._left = value;
                if (isNotNil(this.left)) {
                    this.renderer.setStyle(this.el, 'left', this.left + "px");
                }
                else {
                    this.renderer.removeStyle(this.el, 'left');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselContentDirective.prototype, "top", {
            get: /**
             * @return {?}
             */ function () {
                return this._top;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._top = value;
                if (isNotNil(this.top)) {
                    this.renderer.setStyle(this.el, 'top', this.top + "px");
                }
                else {
                    this.renderer.removeStyle(this.el, 'top');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselContentDirective.prototype, "isActive", {
            get: /**
             * @return {?}
             */ function () {
                return this._active;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._active = value;
                this.updateOpacity();
                if (this.isActive) {
                    this.renderer.addClass(this.el, 'slick-active');
                }
                else {
                    this.renderer.removeClass(this.el, 'slick-active');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselContentDirective.prototype, "fadeMode", {
            get: /**
             * @return {?}
             */ function () {
                return this._fadeMode;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._fadeMode = value;
                if (this.fadeMode) {
                    this.renderer.setStyle(this.el, 'position', 'relative');
                }
                else {
                    this.renderer.removeStyle(this.el, 'position');
                }
                this.updateOpacity();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzCarouselContentDirective.prototype.updateOpacity = /**
         * @return {?}
         */
            function () {
                if (this.fadeMode) {
                    this.renderer.setStyle(this.el, 'opacity', this.isActive ? 1 : 0);
                }
            };
        /**
         * @return {?}
         */
        NzCarouselContentDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.renderer.setStyle(this.el, 'transition', 'opacity 500ms ease');
            };
        NzCarouselContentDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-carousel-content]',
                        host: {
                            '[class.slick-slide]': 'true'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzCarouselContentDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        return NzCarouselContentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCarouselComponent = /** @class */ (function () {
        function NzCarouselComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this._autoPlay = false;
            this._autoPlaySpeed = 3000;
            this._dots = true;
            this._vertical = false;
            this._effect = 'scrollx';
            this.unsubscribe$ = new rxjs.Subject();
            this.activeIndex = 0;
            this.transform = 'translate3d(0px, 0px, 0px)';
            this.nzAfterChange = new i0.EventEmitter();
            this.nzBeforeChange = new i0.EventEmitter();
            this.nzEnableSwipe = true;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NzCarouselComponent.prototype.onWindowResize = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.renderContent();
            };
        Object.defineProperty(NzCarouselComponent.prototype, "nextIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.activeIndex < this.slideContents.length - 1 ? (this.activeIndex + 1) : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselComponent.prototype, "prevIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.activeIndex > 0 ? (this.activeIndex - 1) : (this.slideContents.length - 1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselComponent.prototype, "nzDots", {
            get: /**
             * @return {?}
             */ function () {
                return this._dots;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._dots = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselComponent.prototype, "nzEffect", {
            get: /**
             * @return {?}
             */ function () {
                return this._effect;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._effect = value;
                this.updateMode();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselComponent.prototype, "nzAutoPlay", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoPlay;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoPlay = toBoolean(value);
                this.setUpAutoPlay();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselComponent.prototype, "nzAutoPlaySpeed", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoPlaySpeed;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoPlaySpeed = toNumber(value, null);
                this.setUpAutoPlay();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCarouselComponent.prototype, "nzVertical", {
            get: /**
             * @return {?}
             */ function () {
                return this._vertical;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._vertical = toBoolean(value);
                this.updateMode();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} content
         * @param {?} i
         * @return {?}
         */
        NzCarouselComponent.prototype.setActive = /**
         * @param {?} content
         * @param {?} i
         * @return {?}
         */
            function (content, i) {
                if (this.slideContents && this.slideContents.length) {
                    this.setUpAutoPlay();
                    /** @type {?} */
                    var beforeIndex = this.slideContents.toArray().findIndex(function (slide) { return slide.isActive; });
                    this.nzBeforeChange.emit({ from: beforeIndex, to: i });
                    this.activeIndex = i;
                    if (this.nzEffect === 'scrollx') {
                        if (this.nzVertical) {
                            this.transform = "translate3d(0px, " + -this.activeIndex * this.elementRef.nativeElement.offsetHeight + "px, 0px)";
                        }
                        else {
                            this.transform = "translate3d(" + -this.activeIndex * this.elementRef.nativeElement.offsetWidth + "px, 0px, 0px)";
                        }
                    }
                    else {
                        this.transform = 'translate3d(0px, 0px, 0px)';
                    }
                    this.slideContents.forEach(function (slide) { return slide.isActive = slide === content; });
                    this.nzAfterChange.emit(i);
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.renderContent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.slideContents && this.slideContents.length) {
                    this.slideContents.forEach(function (content, i) {
                        content.width = _this.elementRef.nativeElement.offsetWidth;
                        if (_this.nzEffect === 'fade') {
                            content.fadeMode = true;
                            if (_this.nzVertical) {
                                content.top = -i * _this.elementRef.nativeElement.offsetHeight;
                            }
                            else {
                                content.left = -i * content.width;
                            }
                        }
                        else {
                            content.fadeMode = false;
                            content.left = null;
                            content.top = null;
                        }
                    });
                    if (this.nzVertical) {
                        this.renderer.removeStyle(this.slickTrack.nativeElement, 'width');
                        this.renderer.removeStyle(this.slickList.nativeElement, 'width');
                        this.renderer.removeStyle(this.slickList.nativeElement, 'height');
                        this.renderer.setStyle(this.slickList.nativeElement, 'height', this.slideContents.first.el.offsetHeight + "px");
                        this.renderer.removeStyle(this.slickTrack.nativeElement, 'height');
                        this.renderer.setStyle(this.slickTrack.nativeElement, 'height', this.slideContents.length * this.elementRef.nativeElement.offsetHeight + "px");
                    }
                    else {
                        this.renderer.removeStyle(this.slickTrack.nativeElement, 'height');
                        this.renderer.removeStyle(this.slickList.nativeElement, 'height');
                        this.renderer.removeStyle(this.slickTrack.nativeElement, 'width');
                        this.renderer.setStyle(this.slickTrack.nativeElement, 'width', this.slideContents.length * this.elementRef.nativeElement.offsetWidth + "px");
                    }
                    this.setUpAutoPlay();
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.setUpAutoPlay = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.clearTimeout();
                if (this.nzAutoPlay && this.nzAutoPlaySpeed > 0) {
                    this.timeout = setTimeout(function (_) {
                        _this.setActive(_this.slideContents.toArray()[_this.nextIndex], _this.nextIndex);
                    }, this.nzAutoPlaySpeed);
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.updateMode = /**
         * @return {?}
         */
            function () {
                if (this.slideContents && this.slideContents.length) {
                    this.renderContent();
                    this.setActive(this.slideContents.first, 0);
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.clearTimeout = /**
         * @return {?}
         */
            function () {
                if (this.timeout) {
                    clearTimeout(this.timeout);
                    this.timeout = null;
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.next = /**
         * @return {?}
         */
            function () {
                this.setActive(this.slideContents.toArray()[this.nextIndex], this.nextIndex);
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.pre = /**
         * @return {?}
         */
            function () {
                this.setActive(this.slideContents.toArray()[this.prevIndex], this.prevIndex);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NzCarouselComponent.prototype.goTo = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (index >= 0 && index <= this.slideContents.length - 1) {
                    this.setActive(this.slideContents.toArray()[index], index);
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzCarouselComponent.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.keyCode === keycodes.LEFT_ARROW) { // Left
                    // Left
                    this.pre();
                    e.preventDefault();
                }
                else if (e.keyCode === keycodes.RIGHT_ARROW) { // Right
                    // Right
                    this.next();
                    e.preventDefault();
                }
            };
        /**
         * @param {?=} action
         * @return {?}
         */
        NzCarouselComponent.prototype.swipe = /**
         * @param {?=} action
         * @return {?}
         */
            function (action) {
                if (action === void 0) {
                    action = 'swipeleft';
                }
                if (!this.nzEnableSwipe) {
                    return;
                }
                if (action === 'swipeleft') {
                    this.next();
                }
                if (action === 'swiperight') {
                    this.pre();
                }
            };
        /* tslint:disable:no-any */
        /**
         * @param {?} e
         * @return {?}
         */
        NzCarouselComponent.prototype.swipeInProgress = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.nzEffect === 'scrollx') {
                    /** @type {?} */
                    var final = e.isFinal;
                    /** @type {?} */
                    var scrollWidth = final ? 0 : e.deltaX * 1.2;
                    /** @type {?} */
                    var totalWidth = this.elementRef.nativeElement.offsetWidth;
                    if (this.nzVertical) {
                        /** @type {?} */
                        var totalHeight = this.elementRef.nativeElement.offsetHeight;
                        /** @type {?} */
                        var scrollPercent = scrollWidth / totalWidth;
                        /** @type {?} */
                        var scrollHeight = scrollPercent * totalHeight;
                        this.transform = "translate3d(0px, " + (-this.activeIndex * totalHeight + scrollHeight) + "px, 0px)";
                    }
                    else {
                        this.transform = "translate3d(" + (-this.activeIndex * totalWidth + scrollWidth) + "px, 0px, 0px)";
                    }
                }
                if (e.isFinal) {
                    this.setUpAutoPlay();
                }
                else {
                    this.clearTimeout();
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this.slideContents && this.slideContents.length) {
                    this.slideContents.first.isActive = true;
                }
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.slideContents.changes
                    .pipe(operators.takeUntil(this.unsubscribe$))
                    .subscribe(function () {
                    _this.renderContent();
                });
                this.renderContent();
            };
        /**
         * @return {?}
         */
        NzCarouselComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
                this.clearTimeout();
            };
        NzCarouselComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-carousel',
                        preserveWhitespaces: false,
                        template: "<div class=\"slick-initialized slick-slider\" [class.slick-vertical]=\"nzVertical\">\n  <div class=\"slick-list\" #slickList tabindex=\"-1\" (keydown)=\"onKeyDown($event)\" \n    (swipeleft)=\"swipe('swipeleft')\" (swiperight)=\"swipe('swiperight')\" (pan)=\"swipeInProgress($event);\">\n    <div class=\"slick-track\" [style.transform]=\"transform\" #slickTrack (mousedown)=\"$event.preventDefault()\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <ul class=\"slick-dots\" *ngIf=\"nzDots\">\n    <li\n      *ngFor=\"let content of slideContents; let i =index\"\n      [class.slick-active]=\"content.isActive\"\n      (click)=\"setActive(content,i)\">\n      <ng-template [ngTemplateOutlet]=\"nzDotRender || renderDotTemplate\" [ngTemplateOutletContext]=\"{ $implicit: i }\"></ng-template>\n    </li>\n  </ul>\n</div>\n\n<ng-template #renderDotTemplate let-index>\n  <button>{{index + 1}}</button>\n</ng-template>",
                        host: {
                            '[class.ant-carousel]': 'true'
                        },
                        styles: ["\n      :host {\n        display: block;\n        position: relative;\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n      }\n\n      .slick-dots {\n        display: block;\n      }\n\n      .slick-track {\n        opacity: 1;\n        transition: all 0.5s ease;\n      }\n\n      .slick-slide {\n        transition: opacity 500ms ease;\n      }\n\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzCarouselComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzCarouselComponent.propDecorators = {
            slideContents: [{ type: i0.ContentChildren, args: [NzCarouselContentDirective,] }],
            slickList: [{ type: i0.ViewChild, args: ['slickList',] }],
            slickTrack: [{ type: i0.ViewChild, args: ['slickTrack',] }],
            nzAfterChange: [{ type: i0.Output }],
            nzBeforeChange: [{ type: i0.Output }],
            nzEnableSwipe: [{ type: i0.Input }],
            onWindowResize: [{ type: i0.HostListener, args: ['window:resize', ['$event'],] }],
            nzDotRender: [{ type: i0.Input }],
            nzDots: [{ type: i0.Input }],
            nzEffect: [{ type: i0.Input }],
            nzAutoPlay: [{ type: i0.Input }],
            nzAutoPlaySpeed: [{ type: i0.Input }],
            nzVertical: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ant-carousel-vertical',] }]
        };
        return NzCarouselComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCarouselModule = /** @class */ (function () {
        function NzCarouselModule() {
        }
        NzCarouselModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzCarouselComponent, NzCarouselContentDirective],
                        exports: [NzCarouselComponent, NzCarouselContentDirective],
                        imports: [i3.CommonModule]
                    },] }
        ];
        return NzCarouselModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // Thanks to https://github.com/andreypopp/react-textarea-autosize/
    /**
     * calculateNodeHeight(uiTextNode, useCache = false)
     */
    /** @type {?} */
    var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
    /** @type {?} */
    var SIZING_STYLE = [
        'letter-spacing',
        'line-height',
        'padding-top',
        'padding-bottom',
        'font-family',
        'font-weight',
        'font-size',
        'text-rendering',
        'text-transform',
        'width',
        'text-indent',
        'padding-left',
        'padding-right',
        'border-width',
        'box-sizing'
    ];
    /** @type {?} */
    var computedStyleCache = {};
    /** @type {?} */
    var hiddenTextarea;
    /**
     * @param {?} node
     * @param {?=} useCache
     * @return {?}
     */
    function calculateNodeStyling(node, useCache) {
        if (useCache === void 0) {
            useCache = false;
        }
        /** @type {?} */
        var nodeRef = /** @type {?} */ ((node.getAttribute('id') ||
            node.getAttribute('data-reactid') ||
            node.getAttribute('name')));
        if (useCache && computedStyleCache[nodeRef]) {
            return computedStyleCache[nodeRef];
        }
        /** @type {?} */
        var style = window.getComputedStyle(node);
        /** @type {?} */
        var boxSizing = (style.getPropertyValue('box-sizing') ||
            style.getPropertyValue('-moz-box-sizing') ||
            style.getPropertyValue('-webkit-box-sizing'));
        /** @type {?} */
        var paddingSize = (parseFloat(style.getPropertyValue('padding-bottom')) +
            parseFloat(style.getPropertyValue('padding-top')));
        /** @type {?} */
        var borderSize = (parseFloat(style.getPropertyValue('border-bottom-width')) +
            parseFloat(style.getPropertyValue('border-top-width')));
        /** @type {?} */
        var sizingStyle = SIZING_STYLE
            .map(function (name) { return name + ":" + style.getPropertyValue(name); })
            .join(';');
        /** @type {?} */
        var nodeInfo = {
            sizingStyle: sizingStyle,
            paddingSize: paddingSize,
            borderSize: borderSize,
            boxSizing: boxSizing
        };
        if (useCache && nodeRef) {
            computedStyleCache[nodeRef] = nodeInfo;
        }
        return nodeInfo;
    }
    /**
     * @param {?} uiTextNode
     * @param {?=} useCache
     * @param {?=} minRows
     * @param {?=} maxRows
     * @return {?}
     */
    function calculateNodeHeight(uiTextNode, useCache, minRows, maxRows) {
        if (useCache === void 0) {
            useCache = false;
        }
        if (minRows === void 0) {
            minRows = null;
        }
        if (maxRows === void 0) {
            maxRows = null;
        }
        if (!hiddenTextarea) {
            hiddenTextarea = document.createElement('textarea');
            document.body.appendChild(hiddenTextarea);
        }
        // Fix wrap="off" issue
        // https://github.com/ant-design/ant-design/issues/6577
        if (uiTextNode.getAttribute('wrap')) {
            hiddenTextarea.setAttribute('wrap', /** @type {?} */ (uiTextNode.getAttribute('wrap')));
        }
        else {
            hiddenTextarea.removeAttribute('wrap');
        }
        var _a = calculateNodeStyling(uiTextNode, useCache), paddingSize = _a.paddingSize, borderSize = _a.borderSize, boxSizing = _a.boxSizing, sizingStyle = _a.sizingStyle;
        // Need to have the overflow attribute to hide the scrollbar otherwise
        // text-lines will not calculated properly as the shadow will technically be
        // narrower for content
        hiddenTextarea.setAttribute('style', sizingStyle + ";" + HIDDEN_TEXTAREA_STYLE);
        hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';
        /** @type {?} */
        var minHeight = Number.MIN_SAFE_INTEGER;
        /** @type {?} */
        var maxHeight = Number.MAX_SAFE_INTEGER;
        /** @type {?} */
        var height = hiddenTextarea.scrollHeight;
        /** @type {?} */
        var overflowY;
        if (boxSizing === 'border-box') {
            // border-box: add border, since height = content + padding + border
            height = height + borderSize;
        }
        else if (boxSizing === 'content-box') {
            // remove padding, since height = content
            height = height - paddingSize;
        }
        if (minRows !== null || maxRows !== null) {
            // measure height of a textarea with a single row
            hiddenTextarea.value = '';
            /** @type {?} */
            var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
            if (minRows !== null) {
                minHeight = singleRowHeight * minRows;
                if (boxSizing === 'border-box') {
                    minHeight = minHeight + paddingSize + borderSize;
                }
                height = Math.max(minHeight, height);
            }
            if (maxRows !== null) {
                maxHeight = singleRowHeight * maxRows;
                if (boxSizing === 'border-box') {
                    maxHeight = maxHeight + paddingSize + borderSize;
                }
                overflowY = height > maxHeight ? '' : 'hidden';
                height = Math.min(maxHeight, height);
            }
        }
        // Remove scroll bar flash when autosize without maxRows
        if (!maxRows) {
            overflowY = 'hidden';
        }
        return { height: height, minHeight: minHeight, maxHeight: maxHeight, overflowY: overflowY };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzInputDirective = /** @class */ (function () {
        function NzInputDirective(elementRef, renderer, ngModel, ngControl) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.ngModel = ngModel;
            this.ngControl = ngControl;
            this._size = 'default';
            this._disabled = false;
            this._autosize = false;
            this.el = this.elementRef.nativeElement;
            this.isInit = false;
        }
        Object.defineProperty(NzInputDirective.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputDirective.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                if (this.ngControl && this.ngControl.disabled !== null) {
                    return this.ngControl.disabled;
                }
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputDirective.prototype, "nzAutosize", {
            get: /**
             * @return {?}
             */ function () {
                return this._autosize;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (typeof value === 'string') {
                    this._autosize = true;
                }
                else {
                    this._autosize = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputDirective.prototype, "setLgClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSize === 'large';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputDirective.prototype, "setSmClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSize === 'small';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzInputDirective.prototype.textAreaOnChange = /**
         * @return {?}
         */
            function () {
                if (this.nzAutosize) {
                    this.resizeTextArea();
                }
            };
        /**
         * @return {?}
         */
        NzInputDirective.prototype.resizeTextArea = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var textAreaRef = /** @type {?} */ (this.el);
                /** @type {?} */
                var maxRows = this.nzAutosize ? ( /** @type {?} */(this.nzAutosize)).maxRows || null : null;
                /** @type {?} */
                var minRows = this.nzAutosize ? ( /** @type {?} */(this.nzAutosize)).minRows || null : null;
                if ((this.previousValue === textAreaRef.value) && (this.previewsMaxRows === maxRows) && (this.previewsMinRows === minRows)) {
                    return;
                }
                this.previousValue = textAreaRef.value;
                this.previewsMinRows = minRows;
                this.previewsMaxRows = maxRows;
                // eliminate jitter
                this.renderer.setStyle(textAreaRef, 'height', 'auto');
                /** @type {?} */
                var textAreaStyles = calculateNodeHeight(textAreaRef, false, minRows, maxRows);
                this.renderer.setStyle(textAreaRef, 'height', textAreaStyles.height + "px");
                this.renderer.setStyle(textAreaRef, 'overflowY', textAreaStyles.overflowY);
                this.renderer.setStyle(textAreaRef, 'minHeight', textAreaStyles.minHeight + "px");
                this.renderer.setStyle(textAreaRef, 'maxHeight', textAreaStyles.maxHeight + "px");
            };
        /**
         * @return {?}
         */
        NzInputDirective.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.nzAutosize && this.isInit) {
                    this.resizeTextArea();
                }
            };
        /**
         * @return {?}
         */
        NzInputDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.isInit = true;
                if (this.nzAutosize) {
                    this.resizeTextArea();
                }
            };
        NzInputDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-input]',
                        host: {
                            '[class.ant-input]': 'true'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzInputDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: forms.NgModel, decorators: [{ type: i0.Optional }] },
                { type: forms.NgControl, decorators: [{ type: i0.Optional }, { type: i0.Self }] }
            ];
        };
        NzInputDirective.propDecorators = {
            nzSize: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ["class.ant-input-disabled",] }],
            nzAutosize: [{ type: i0.Input }],
            setLgClass: [{ type: i0.HostBinding, args: ["class.ant-input-lg",] }],
            setSmClass: [{ type: i0.HostBinding, args: ["class.ant-input-sm",] }],
            textAreaOnChange: [{ type: i0.HostListener, args: ['input',] }]
        };
        return NzInputDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzInputGroupComponent = /** @class */ (function () {
        function NzInputGroupComponent(el) {
            this.el = el;
            this._addOnBefore = '';
            this._addOnAfter = '';
            this._prefix = '';
            this._suffix = '';
            this._size = 'default';
            this._compact = false;
            this._search = false;
        }
        Object.defineProperty(NzInputGroupComponent.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = value;
                this.updateChildrenInputSize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "nzCompact", {
            get: /**
             * @return {?}
             */ function () {
                return this._compact;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._compact = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "nzAddOnBefore", {
            get: /**
             * @return {?}
             */ function () {
                return this._addOnBefore;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isAddOnBeforeString = !(value instanceof i0.TemplateRef);
                this._addOnBefore = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "nzAddOnAfter", {
            get: /**
             * @return {?}
             */ function () {
                return this._addOnAfter;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isAddOnAfterString = !(value instanceof i0.TemplateRef);
                this._addOnAfter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "nzPrefix", {
            get: /**
             * @return {?}
             */ function () {
                return this._prefix;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isPrefixString = !(value instanceof i0.TemplateRef);
                this._prefix = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "nzSuffix", {
            get: /**
             * @return {?}
             */ function () {
                return this._suffix;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isSuffixString = !(value instanceof i0.TemplateRef);
                this._suffix = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "nzSearch", {
            get: /**
             * @return {?}
             */ function () {
                return this._search;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._search = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isLarge", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSize === 'large';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isSmall", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSize === 'small';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isAffix", {
            get: /**
             * @return {?}
             */ function () {
                return (!!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isAffixWrapper", {
            get: /**
             * @return {?}
             */ function () {
                return (!!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon)) && !this.isAddOn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isAddOn", {
            get: /**
             * @return {?}
             */ function () {
                return !!(this.nzAddOnAfter || this.nzAddOnBefore || this.nzAddOnAfterIcon || this.nzAddOnBeforeIcon);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isGroup", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isAffix) && (!this.isAddOn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isLargeGroup", {
            get: /**
             * @return {?}
             */ function () {
                return this.isGroup && this.isLarge;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isLargeGroupWrapper", {
            get: /**
             * @return {?}
             */ function () {
                return this.isAddOn && this.isLarge;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isLargeAffix", {
            get: /**
             * @return {?}
             */ function () {
                return this.isAffixWrapper && this.isLarge;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isLargeSearch", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSearch && this.isLarge;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isSmallGroup", {
            get: /**
             * @return {?}
             */ function () {
                return this.isGroup && this.isSmall;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isSmallAffix", {
            get: /**
             * @return {?}
             */ function () {
                return this.isAffixWrapper && this.isSmall;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isSmallGroupWrapper", {
            get: /**
             * @return {?}
             */ function () {
                return this.isAddOn && this.isSmall;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputGroupComponent.prototype, "isSmallSearch", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSearch && this.isSmall;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzInputGroupComponent.prototype.updateChildrenInputSize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.nzInputDirectiveQueryList) {
                    this.nzInputDirectiveQueryList.forEach(function (item) { return item.nzSize = _this.nzSize; });
                }
            };
        /**
         * @return {?}
         */
        NzInputGroupComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.updateChildrenInputSize();
            };
        NzInputGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-input-group',
                        preserveWhitespaces: false,
                        template: "<span class=\"ant-input-wrapper ant-input-group\" *ngIf=\"isAddOn\">\n  <span class=\"ant-input-group-addon\" *ngIf=\"nzAddOnBefore || nzAddOnBeforeIcon\">\n    <i nz-icon [ngClass]=\"nzAddOnBeforeIcon\" *ngIf=\"nzAddOnBeforeIcon\"></i>\n    <ng-container *ngIf=\"isAddOnBeforeString; else addOnBeforeTemplate\">{{ nzAddOnBefore }}</ng-container>\n    <ng-template #addOnBeforeTemplate>\n      <ng-template [ngTemplateOutlet]=\"nzAddOnBefore\"></ng-template>\n    </ng-template>\n  </span>\n  <ng-template [ngIf]=\"!isAffix\" *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n  <span class=\"ant-input-affix-wrapper\" [class.ant-input-affix-wrapper-sm]=\"isSmall\" [class.ant-input-affix-wrapper-lg]=\"isLarge\" *ngIf=\"isAffix\">\n    <ng-template *ngTemplateOutlet=\"affixTemplate\"></ng-template>\n  </span>\n  <span class=\"ant-input-group-addon\" *ngIf=\"nzAddOnAfter || nzAddOnAfterIcon\">\n    <i nz-icon [ngClass]=\"nzAddOnAfterIcon\" *ngIf=\"nzAddOnAfterIcon\"></i>\n    <ng-container *ngIf=\"isAddOnAfterString; else addOnAfterTemplate\">{{ nzAddOnAfter }}</ng-container>\n    <ng-template #addOnAfterTemplate>\n      <ng-template [ngTemplateOutlet]=\"nzAddOnAfter\"></ng-template>\n    </ng-template>\n  </span>\n</span>\n<ng-container *ngIf=\"isAffix && !isAddOn\">\n  <ng-template *ngTemplateOutlet=\"affixTemplate\"></ng-template>\n</ng-container>\n<ng-template #affixTemplate>\n  <span class=\"ant-input-prefix\" *ngIf=\"nzPrefix || nzPrefixIcon\">\n    <!-- TODO: should have a class to set its color, cc: antd-->\n    <i nz-icon [ngClass]=\"nzPrefixIcon\" *ngIf=\"nzPrefixIcon\" style=\"color: rgba(0, 0, 0, 0.25)\"></i>\n    <ng-container *ngIf=\"isPrefixString; else prefixTemplate\">{{ nzPrefix }}</ng-container>\n    <ng-template #prefixTemplate>\n      <ng-template [ngTemplateOutlet]=\"nzPrefix\"></ng-template>\n    </ng-template>\n  </span>\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n  <span class=\"ant-input-suffix\" *ngIf=\"nzSuffix || nzSuffixIcon\">\n    <i nz-icon [ngClass]=\"nzSuffixIcon\" *ngIf=\"nzSuffixIcon\"></i>\n    <ng-container *ngIf=\"isSuffixString; else suffixTemplate\">{{ nzSuffix }}</ng-container>\n    <ng-template #suffixTemplate>\n      <ng-template [ngTemplateOutlet]=\"nzSuffix\"></ng-template>\n    </ng-template>\n  </span>\n</ng-template>\n<ng-template [ngIf]=\"isGroup\" *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>"
                    }] }
        ];
        /** @nocollapse */
        NzInputGroupComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NzInputGroupComponent.propDecorators = {
            nzInputDirectiveQueryList: [{ type: i0.ContentChildren, args: [NzInputDirective,] }],
            nzAddOnBeforeIcon: [{ type: i0.Input }],
            nzAddOnAfterIcon: [{ type: i0.Input }],
            nzPrefixIcon: [{ type: i0.Input }],
            nzSuffixIcon: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzCompact: [{ type: i0.Input }, { type: i0.HostBinding, args: ["class.ant-input-group-compact",] }],
            nzAddOnBefore: [{ type: i0.Input }],
            nzAddOnAfter: [{ type: i0.Input }],
            nzPrefix: [{ type: i0.Input }],
            nzSuffix: [{ type: i0.Input }],
            nzSearch: [{ type: i0.Input }, { type: i0.HostBinding, args: ["class.ant-input-search-enter-button",] }, { type: i0.HostBinding, args: ["class.ant-input-search",] }],
            isAffixWrapper: [{ type: i0.HostBinding, args: ['class.ant-input-affix-wrapper',] }],
            isAddOn: [{ type: i0.HostBinding, args: ['class.ant-input-group-wrapper',] }],
            isGroup: [{ type: i0.HostBinding, args: ['class.ant-input-group',] }],
            isLargeGroup: [{ type: i0.HostBinding, args: ["class.ant-input-group-lg",] }],
            isLargeGroupWrapper: [{ type: i0.HostBinding, args: ["class.ant-input-group-wrapper-lg",] }],
            isLargeAffix: [{ type: i0.HostBinding, args: ["class.ant-input-affix-wrapper-lg",] }],
            isLargeSearch: [{ type: i0.HostBinding, args: ["class.ant-input-search-lg",] }],
            isSmallGroup: [{ type: i0.HostBinding, args: ["class.ant-input-group-sm",] }],
            isSmallAffix: [{ type: i0.HostBinding, args: ["class.ant-input-affix-wrapper-sm",] }],
            isSmallGroupWrapper: [{ type: i0.HostBinding, args: ["class.ant-input-group-wrapper-sm",] }],
            isSmallSearch: [{ type: i0.HostBinding, args: ["class.ant-input-search-sm",] }]
        };
        return NzInputGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzInputModule = /** @class */ (function () {
        function NzInputModule() {
        }
        NzInputModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzInputDirective, NzInputGroupComponent],
                        exports: [NzInputDirective, NzInputGroupComponent],
                        imports: [i3.CommonModule, forms.FormsModule, NzIconModule]
                    },] }
        ];
        return NzInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCascaderOptionComponent = /** @class */ (function () {
        function NzCascaderOptionComponent(sanitizer) {
            this.sanitizer = sanitizer;
            this.activated = false;
            this.nzLabelProperty = 'label';
        }
        /**
         * @return {?}
         */
        NzCascaderOptionComponent.prototype.getOptionLabel = /**
         * @return {?}
         */
            function () {
                return this.option ? this.option[this.nzLabelProperty] : '';
            };
        /**
         * @param {?} str
         * @return {?}
         */
        NzCascaderOptionComponent.prototype.renderHighlightString = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var safeHtml = this.sanitizer.sanitize(i0.SecurityContext.HTML, "<span class=\"ant-cascader-menu-item-keyword\">" + this.highlightText + "</span>");
                if (!safeHtml) {
                    throw new Error("[NG-ZORRO] Input value \"" + this.highlightText + "\" is not considered security.");
                }
                return str.replace(new RegExp(this.highlightText, 'g'), safeHtml);
            };
        NzCascaderOptionComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: '[nz-cascader-option]',
                        template: "<ng-container *ngIf=\"highlightText\"><span [innerHTML]=\"renderHighlightString(getOptionLabel())\"></span></ng-container>\n<ng-container *ngIf=\"!highlightText\">{{ getOptionLabel() }}</ng-container>\n<span *ngIf=\"!option.isLeaf || option.children && option.children.length || option.loading\" class=\"ant-cascader-menu-item-expand-icon\">\n  <i nz-icon [type]=\"option.loading ? 'loading' : 'right'\"></i>\n</span>",
                        host: {
                            '[attr.title]': 'option.title || getOptionLabel()',
                            '[class.ant-cascader-menu-item]': 'true',
                            '[class.ant-cascader-menu-item-active]': 'activated',
                            '[class.ant-cascader-menu-item-expand]': '!option.isLeaf',
                            '[class.ant-cascader-menu-item-disabled]': 'option.disabled'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzCascaderOptionComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        NzCascaderOptionComponent.propDecorators = {
            option: [{ type: i0.Input }],
            activated: [{ type: i0.Input }],
            highlightText: [{ type: i0.Input }],
            nzLabelProperty: [{ type: i0.Input }]
        };
        return NzCascaderOptionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var POSITION_MAP = /** @type {?} */ (({
        'top': {
            originX: 'center',
            originY: 'top',
            overlayX: 'center',
            overlayY: 'bottom'
        },
        'topCenter': {
            originX: 'center',
            originY: 'top',
            overlayX: 'center',
            overlayY: 'bottom'
        },
        'topLeft': {
            originX: 'start',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'bottom'
        },
        'topRight': {
            originX: 'end',
            originY: 'top',
            overlayX: 'end',
            overlayY: 'bottom'
        },
        'right': {
            originX: 'end',
            originY: 'center',
            overlayX: 'start',
            overlayY: 'center',
        },
        'rightTop': {
            originX: 'end',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'top',
        },
        'rightBottom': {
            originX: 'end',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'bottom',
        },
        'bottom': {
            originX: 'center',
            originY: 'bottom',
            overlayX: 'center',
            overlayY: 'top',
        },
        'bottomCenter': {
            originX: 'center',
            originY: 'bottom',
            overlayX: 'center',
            overlayY: 'top',
        },
        'bottomLeft': {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top',
        },
        'bottomRight': {
            originX: 'end',
            originY: 'bottom',
            overlayX: 'end',
            overlayY: 'top',
        },
        'left': {
            originX: 'start',
            originY: 'center',
            overlayX: 'end',
            overlayY: 'center',
        },
        'leftTop': {
            originX: 'start',
            originY: 'top',
            overlayX: 'end',
            overlayY: 'top',
        },
        'leftBottom': {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'end',
            overlayY: 'bottom',
        },
    }));
    /** @type {?} */
    var DEFAULT_4_POSITIONS = _objectValues([POSITION_MAP["top"], POSITION_MAP["right"], POSITION_MAP["bottom"], POSITION_MAP["left"]]);
    /** @type {?} */
    var DEFAULT_DROPDOWN_POSITIONS = _objectValues([POSITION_MAP["bottomLeft"], POSITION_MAP["topLeft"]]);
    /** @type {?} */
    var EXPANDED_DROPDOWN_POSITIONS = _objectValues([POSITION_MAP["bottomLeft"], POSITION_MAP["bottomRight"], POSITION_MAP["topLeft"], POSITION_MAP["topRight"]]);
    /** @type {?} */
    var DEFAULT_MENTION_POSITIONS = /** @type {?} */ ([
        POSITION_MAP["bottomLeft"],
        {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'bottom'
        }
    ]);
    /**
     * @template T, S
     * @param {?} array
     * @param {?} iteratee
     * @return {?}
     */
    function arrayMap(array, iteratee) {
        /** @type {?} */
        var index = -1;
        /** @type {?} */
        var length = array == null ? 0 : array.length;
        /** @type {?} */
        var result = Array(length);
        while (++index < length) {
            result[index] = iteratee(array[index], index, array);
        }
        return result;
    }
    /**
     * @template T
     * @param {?} object
     * @param {?} props
     * @return {?}
     */
    function baseValues(object, props) {
        return arrayMap(props, function (key) {
            return object[key];
        });
    }
    /**
     * @template T
     * @param {?} object
     * @return {?}
     */
    function _objectValues(object) {
        return object == null ? [] : baseValues(object, Object.keys(object));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    function toArray(value) {
        /** @type {?} */
        var ret;
        if (value == null) {
            ret = [];
        }
        else if (!Array.isArray(value)) {
            ret = [value];
        }
        else {
            ret = value;
        }
        return ret;
    }
    /**
     * @template T
     * @param {?} array1
     * @param {?} array2
     * @return {?}
     */
    function arrayEquals(array1, array2) {
        if (!array1 || !array2 || array1.length !== array2.length) {
            return false;
        }
        /** @type {?} */
        var len = array1.length;
        for (var i = 0; i < len; i++) {
            if (array1[i] !== array2[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var defaultDisplayRender = function (label) { return label.join(' / '); };
    var NzCascaderComponent = /** @class */ (function () {
        function NzCascaderComponent(elementRef, cdr) {
            this.elementRef = elementRef;
            this.cdr = cdr;
            this.nzShowInput = true;
            this.nzShowArrow = true;
            this.nzAllowClear = true;
            this.nzAutoFocus = false;
            this.nzChangeOnSelect = false;
            this.nzDisabled = false;
            this.nzExpandTrigger = 'click';
            this.nzValueProperty = 'value';
            this.nzLabelProperty = 'label';
            this.nzSize = 'default';
            this.nzPlaceHolder = 'Please select';
            this.nzMouseEnterDelay = 150; // ms
            this.nzMouseLeaveDelay = 150; // ms
            this.nzTriggerAction = /** @type {?} */ (['click']);
            this.nzSelectionChange = new i0.EventEmitter();
            this.nzSelect = new i0.EventEmitter();
            this.nzClear = new i0.EventEmitter();
            this.nzVisibleChange = new i0.EventEmitter(); // Not exposed, only for test
            this.nzChange = new i0.EventEmitter(); // Not exposed, only for test
            this.el = this.elementRef.nativeElement;
            this.dropDownPosition = 'bottom';
            this.menuVisible = false;
            this.isLoading = false;
            this.labelRenderContext = {};
            this.columns = [];
            this.onChange = Function.prototype;
            this.onTouched = Function.prototype;
            this.positions = __spread(EXPANDED_DROPDOWN_POSITIONS);
            this.isSearching = false;
            this.isFocused = false;
            this.isOpening = false;
            this.selectedOptions = [];
            this.activatedOptions = [];
            this._inputValue = '';
        }
        Object.defineProperty(NzCascaderComponent.prototype, "nzOptions", {
            get: /**
             * @return {?}
             */ function () { return this.columns[0]; },
            set: /**
             * @param {?} options
             * @return {?}
             */ function (options) {
                this.columnsSnapshot = this.columns = options && options.length ? [options] : [];
                if (!this.isSearching) {
                    if (this.defaultValue && this.columns.length) {
                        this.initOptions(0);
                    }
                }
                else {
                    this.prepareSearchValue();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "inputValue", {
            get: /**
             * @return {?}
             */ function () { return this._inputValue; },
            set: /**
             * @param {?} inputValue
             * @return {?}
             */ function (inputValue) {
                this._inputValue = inputValue;
                this.toggleSearchMode();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "menuCls", {
            get: /**
             * @return {?}
             */ function () {
                var _a;
                return _a = {},
                    _a["" + this.nzMenuClassName] = !!this.nzMenuClassName,
                    _a;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "menuColumnCls", {
            get: /**
             * @return {?}
             */ function () {
                var _a;
                return _a = {},
                    _a["" + this.nzColumnClassName] = !!this.nzColumnClassName,
                    _a;
            },
            enumerable: true,
            configurable: true
        });
        //#region Menu
        /**
         * @param {?} visible
         * @param {?} delay
         * @param {?=} setOpening
         * @return {?}
         */
        NzCascaderComponent.prototype.delaySetMenuVisible = /**
         * @param {?} visible
         * @param {?} delay
         * @param {?=} setOpening
         * @return {?}
         */
            function (visible, delay, setOpening) {
                var _this = this;
                if (setOpening === void 0) {
                    setOpening = false;
                }
                this.clearDelayMenuTimer();
                if (delay) {
                    if (visible && setOpening) {
                        this.isOpening = true;
                    }
                    this.delayMenuTimer = setTimeout(function () {
                        _this.setMenuVisible(visible);
                        _this.cdr.detectChanges();
                        _this.clearDelayMenuTimer();
                        if (visible) {
                            setTimeout(function () {
                                _this.isOpening = false;
                            }, 100);
                        }
                    }, delay);
                }
                else {
                    this.setMenuVisible(visible);
                }
            };
        /**
         * @param {?} visible
         * @return {?}
         */
        NzCascaderComponent.prototype.setMenuVisible = /**
         * @param {?} visible
         * @return {?}
         */
            function (visible) {
                if (this.nzDisabled) {
                    return;
                }
                if (this.menuVisible !== visible) {
                    this.menuVisible = visible;
                    this.cdr.detectChanges();
                    if (visible) {
                        this.loadRootOptions();
                    }
                    this.nzVisibleChange.emit(visible);
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.clearDelayMenuTimer = /**
         * @return {?}
         */
            function () {
                if (this.delayMenuTimer) {
                    clearTimeout(this.delayMenuTimer);
                    this.delayMenuTimer = null;
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.loadRootOptions = /**
         * @return {?}
         */
            function () {
                if (!this.columns.length) {
                    /** @type {?} */
                    var root = {};
                    this.loadChildrenAsync(root, -1);
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NzCascaderComponent.prototype.isLoaded = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.columns[index] && this.columns[index].length > 0;
            };
        /**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        NzCascaderComponent.prototype.findOption = /**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
            function (option, index) {
                var _this = this;
                /** @type {?} */
                var options = this.columns[index];
                if (options) {
                    /** @type {?} */
                    var value_1 = typeof option === 'object' ? this.getOptionValue(option) : option;
                    return options.find(function (o) { return value_1 === _this.getOptionValue(o); });
                }
                return null;
            };
        /**
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        NzCascaderComponent.prototype.activateOnInit = /**
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
            function (index, value) {
                var _a;
                /** @type {?} */
                var option = this.findOption(value, index);
                if (!option) {
                    option = typeof value === 'object' ? value : (_a = {},
                        _a["" + this.nzValueProperty] = value,
                        _a["" + this.nzLabelProperty] = value,
                        _a);
                }
                this.setOptionActivated(option, index, false, false);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NzCascaderComponent.prototype.initOptions = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var _this = this;
                /** @type {?} */
                var vs = this.defaultValue;
                /** @type {?} */
                var lastIndex = vs.length - 1;
                /** @type {?} */
                var load = function () {
                    _this.activateOnInit(index, vs[index]);
                    if (index < lastIndex) {
                        _this.initOptions(index + 1);
                    }
                    if (index === lastIndex) {
                        _this.afterWriteValue();
                    }
                };
                if (this.isLoaded(index) || !this.nzLoadData) {
                    load();
                }
                else {
                    /** @type {?} */
                    var node = this.activatedOptions[index - 1] || {};
                    this.loadChildrenAsync(node, index - 1, load, this.afterWriteValue);
                }
            };
        /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?=} select
         * @param {?=} loadChildren
         * @return {?}
         */
        NzCascaderComponent.prototype.setOptionActivated = /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?=} select
         * @param {?=} loadChildren
         * @return {?}
         */
            function (option, columnIndex, select, loadChildren) {
                if (select === void 0) {
                    select = false;
                }
                if (loadChildren === void 0) {
                    loadChildren = true;
                }
                if (!option || option.disabled) {
                    return;
                }
                this.activatedOptions[columnIndex] = option;
                // Set parent option and all ancestor options as active.
                for (var i = columnIndex - 1; i >= 0; i--) {
                    if (!this.activatedOptions[i]) {
                        this.activatedOptions[i] = this.activatedOptions[i + 1].parent;
                    }
                }
                // Set child options and all success options as inactive.
                if (columnIndex < this.activatedOptions.length - 1) {
                    this.activatedOptions = this.activatedOptions.slice(0, columnIndex + 1);
                }
                // Load child options.
                if (option.children && option.children.length && !option.isLeaf) {
                    option.children.forEach(function (child) { return child.parent = option; });
                    this.setColumnData(option.children, columnIndex + 1);
                }
                else if (!option.isLeaf && loadChildren) {
                    this.loadChildrenAsync(option, columnIndex);
                }
                if (select) {
                    this.setOptionSelected(option, columnIndex);
                }
                this.cdr.detectChanges();
            };
        /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?=} success
         * @param {?=} failure
         * @return {?}
         */
        NzCascaderComponent.prototype.loadChildrenAsync = /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?=} success
         * @param {?=} failure
         * @return {?}
         */
            function (option, columnIndex, success, failure) {
                var _this = this;
                if (this.nzLoadData) {
                    this.isLoading = columnIndex < 0;
                    option.loading = true;
                    this.nzLoadData(option, columnIndex).then(function () {
                        option.loading = _this.isLoading = false;
                        if (option.children) {
                            option.children.forEach(function (child) { return child.parent = columnIndex < 0 ? undefined : option; });
                            _this.setColumnData(option.children, columnIndex + 1);
                            _this.cdr.detectChanges();
                        }
                        if (success) {
                            success();
                        }
                    }, function () {
                        option.loading = _this.isLoading = false;
                        option.isLeaf = true;
                        _this.cdr.detectChanges();
                        if (failure) {
                            failure();
                        }
                    });
                }
            };
        /**
         * @param {?} option
         * @param {?} columnIndex
         * @return {?}
         */
        NzCascaderComponent.prototype.setOptionSelected = /**
         * @param {?} option
         * @param {?} columnIndex
         * @return {?}
         */
            function (option, columnIndex) {
                var _this = this;
                /** @type {?} */
                var shouldPerformSelection = function (o, i) {
                    return typeof _this.nzChangeOn === 'function' ? _this.nzChangeOn(o, i) === true : false;
                };
                this.nzSelect.emit({ option: option, index: columnIndex });
                if (option.isLeaf || this.nzChangeOnSelect || shouldPerformSelection(option, columnIndex)) {
                    this.selectedOptions = this.activatedOptions;
                    this.buildDisplayLabel();
                    this.onValueChange();
                }
                if (option.isLeaf) {
                    this.delaySetMenuVisible(false, this.nzMouseLeaveDelay);
                }
            };
        /**
         * @param {?} options
         * @param {?} columnIndex
         * @return {?}
         */
        NzCascaderComponent.prototype.setColumnData = /**
         * @param {?} options
         * @param {?} columnIndex
         * @return {?}
         */
            function (options, columnIndex) {
                if (!arrayEquals(this.columns[columnIndex], options)) {
                    this.columns[columnIndex] = options;
                    if (columnIndex < this.columns.length - 1) {
                        this.columns = this.columns.slice(0, columnIndex + 1);
                    }
                }
            };
        /**
         * @param {?=} event
         * @return {?}
         */
        NzCascaderComponent.prototype.clearSelection = /**
         * @param {?=} event
         * @return {?}
         */
            function (event) {
                if (event) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.labelRenderText = '';
                this.labelRenderContext = {};
                this.selectedOptions = [];
                this.activatedOptions = [];
                this.inputValue = '';
                this.setMenuVisible(false);
                this.onValueChange();
            };
        // tslint:disable-next-line:no-any
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.getSubmitValue = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var values = [];
                this.selectedOptions.forEach(function (option) {
                    values.push(_this.getOptionValue(option));
                });
                return values;
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.onValueChange = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var value = this.getSubmitValue();
                if (!arrayEquals(this.value, value)) {
                    this.defaultValue = null;
                    this.value = value;
                    this.onChange(value);
                    if (value.length === 0) {
                        this.nzClear.emit();
                    }
                    this.nzSelectionChange.emit(this.selectedOptions);
                    this.nzChange.emit(value);
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.afterWriteValue = /**
         * @return {?}
         */
            function () {
                this.selectedOptions = this.activatedOptions;
                this.value = this.getSubmitValue();
                this.buildDisplayLabel();
            };
        //#endregion
        //#region Mouse and keyboard event handlers, view children
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                if (!this.isFocused) {
                    (this.input ? this.input.nativeElement : this.el).focus();
                    this.isFocused = true;
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                if (this.isFocused) {
                    (this.input ? this.input.nativeElement : this.el).blur();
                    this.isFocused = false;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.handleInputBlur = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.menuVisible ? this.focus() : this.blur();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.handleInputFocus = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.focus();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onKeyDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var keyCode = event.keyCode;
                if (keyCode !== keycodes.DOWN_ARROW &&
                    keyCode !== keycodes.UP_ARROW &&
                    keyCode !== keycodes.LEFT_ARROW &&
                    keyCode !== keycodes.RIGHT_ARROW &&
                    keyCode !== keycodes.ENTER &&
                    keyCode !== keycodes.BACKSPACE &&
                    keyCode !== keycodes.ESCAPE) {
                    return;
                }
                // Press any keys above to reopen menu.
                if (!this.menuVisible && keyCode !== keycodes.BACKSPACE && keyCode !== keycodes.ESCAPE) {
                    return this.setMenuVisible(true);
                }
                // Make these keys work as default in searching mode.
                if (this.isSearching && (keyCode === keycodes.BACKSPACE || keyCode === keycodes.LEFT_ARROW || keyCode === keycodes.RIGHT_ARROW)) {
                    return;
                }
                // Interact with the component.
                if (this.menuVisible) {
                    event.preventDefault();
                    if (keyCode === keycodes.DOWN_ARROW) {
                        this.moveUpOrDown(false);
                    }
                    else if (keyCode === keycodes.UP_ARROW) {
                        this.moveUpOrDown(true);
                    }
                    else if (keyCode === keycodes.LEFT_ARROW) {
                        this.moveLeft();
                    }
                    else if (keyCode === keycodes.RIGHT_ARROW) {
                        this.moveRight();
                    }
                    else if (keyCode === keycodes.ENTER) {
                        this.onEnter();
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onTriggerClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.nzDisabled) {
                    return;
                }
                if (this.nzShowSearch) {
                    this.focus();
                }
                if (this.isActionTrigger('click')) {
                    this.delaySetMenuVisible(!this.menuVisible, 100);
                }
                this.onTouched();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onTriggerMouseEnter = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.nzDisabled) {
                    return;
                }
                if (this.isActionTrigger('hover')) {
                    this.delaySetMenuVisible(true, this.nzMouseEnterDelay, true);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onTriggerMouseLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.nzDisabled) {
                    return;
                }
                if (!this.menuVisible || this.isOpening) {
                    event.preventDefault();
                    return;
                }
                if (this.isActionTrigger('hover')) {
                    /** @type {?} */
                    var mouseTarget = /** @type {?} */ (event.relatedTarget);
                    /** @type {?} */
                    var hostEl = this.el;
                    /** @type {?} */
                    var menuEl = this.menu && /** @type {?} */ (this.menu.nativeElement);
                    if (hostEl.contains(mouseTarget) || (menuEl && menuEl.contains(mouseTarget))) {
                        return;
                    }
                    this.delaySetMenuVisible(false, this.nzMouseLeaveDelay);
                }
            };
        /**
         * @param {?} action
         * @return {?}
         */
        NzCascaderComponent.prototype.isActionTrigger = /**
         * @param {?} action
         * @return {?}
         */
            function (action) {
                return typeof this.nzTriggerAction === 'string'
                    ? this.nzTriggerAction === action
                    : this.nzTriggerAction.indexOf(action) !== -1;
            };
        /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onOptionClick = /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?} event
         * @return {?}
         */
            function (option, columnIndex, event) {
                if (event) {
                    event.preventDefault();
                }
                if (option && option.disabled) {
                    return;
                }
                this.el.focus();
                this.isSearching
                    ? this.setSearchOptionActivated(/** @type {?} */ (option), event)
                    : this.setOptionActivated(option, columnIndex, true);
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.onEnter = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var columnIndex = Math.max(this.activatedOptions.length - 1, 0);
                /** @type {?} */
                var option = this.activatedOptions[columnIndex];
                if (option && !option.disabled) {
                    this.isSearching
                        ? this.setSearchOptionActivated(/** @type {?} */ (option), null)
                        : this.setOptionSelected(option, columnIndex);
                }
            };
        /**
         * @param {?} isUp
         * @return {?}
         */
        NzCascaderComponent.prototype.moveUpOrDown = /**
         * @param {?} isUp
         * @return {?}
         */
            function (isUp) {
                /** @type {?} */
                var columnIndex = Math.max(this.activatedOptions.length - 1, 0);
                /** @type {?} */
                var activeOption = this.activatedOptions[columnIndex];
                /** @type {?} */
                var options = this.columns[columnIndex] || [];
                /** @type {?} */
                var length = options.length;
                /** @type {?} */
                var nextIndex = -1;
                if (!activeOption) { // Not selected options in this column
                    // Not selected options in this column
                    nextIndex = isUp ? length : -1;
                }
                else {
                    nextIndex = options.indexOf(activeOption);
                }
                while (true) {
                    nextIndex = isUp ? nextIndex - 1 : nextIndex + 1;
                    if (nextIndex < 0 || nextIndex >= length) {
                        break;
                    }
                    /** @type {?} */
                    var nextOption = options[nextIndex];
                    if (!nextOption || nextOption.disabled) {
                        continue;
                    }
                    this.setOptionActivated(nextOption, columnIndex);
                    break;
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.moveLeft = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var options = this.activatedOptions;
                if (options.length) {
                    options.pop(); // Remove the last one
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.moveRight = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var length = this.activatedOptions.length;
                /** @type {?} */
                var options = this.columns[length];
                if (options && options.length) {
                    /** @type {?} */
                    var nextOpt = options.find(function (o) { return !o.disabled; });
                    if (nextOpt) {
                        this.setOptionActivated(nextOpt, length);
                    }
                }
            };
        /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onOptionMouseEnter = /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?} event
         * @return {?}
         */
            function (option, columnIndex, event) {
                event.preventDefault();
                if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
                    this.delaySelectOption(option, columnIndex, true);
                }
            };
        /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.onOptionMouseLeave = /**
         * @param {?} option
         * @param {?} columnIndex
         * @param {?} event
         * @return {?}
         */
            function (option, columnIndex, event) {
                event.preventDefault();
                if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
                    this.delaySelectOption(option, columnIndex, false);
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.clearDelaySelectTimer = /**
         * @return {?}
         */
            function () {
                if (this.delaySelectTimer) {
                    clearTimeout(this.delaySelectTimer);
                    this.delaySelectTimer = null;
                }
            };
        /**
         * @param {?} option
         * @param {?} index
         * @param {?} doSelect
         * @return {?}
         */
        NzCascaderComponent.prototype.delaySelectOption = /**
         * @param {?} option
         * @param {?} index
         * @param {?} doSelect
         * @return {?}
         */
            function (option, index, doSelect) {
                var _this = this;
                this.clearDelaySelectTimer();
                if (doSelect) {
                    this.delaySelectTimer = setTimeout(function () {
                        _this.setOptionActivated(option, index);
                        _this.delaySelectTimer = null;
                    }, 150);
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.toggleSearchMode = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var willBeInSearch = !!this._inputValue;
                // Take a snapshot before entering search mode.
                if (!this.isSearching && willBeInSearch) {
                    this.isSearching = true;
                    this.activatedOptionsSnapshot = this.activatedOptions;
                    this.activatedOptions = [];
                    this.labelRenderText = '';
                    if (this.input) {
                        /** @type {?} */
                        var width = this.input.nativeElement.offsetWidth;
                        this.dropdownWidthStyle = width + "px";
                    }
                }
                // Restore the snapshot after leaving search mode.
                if (this.isSearching && !willBeInSearch) {
                    this.isSearching = false;
                    this.activatedOptions = this.activatedOptionsSnapshot;
                    this.columns = this.columnsSnapshot;
                    this.dropdownWidthStyle = '';
                    if (this.activatedOptions) {
                        this.buildDisplayLabel();
                    }
                }
                if (this.isSearching) {
                    this.prepareSearchValue();
                }
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.prepareSearchValue = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var results = [];
                /** @type {?} */
                var path = [];
                /** @type {?} */
                var defaultFilter = function (inputValue, p) {
                    return p.some(function (n) {
                        /** @type {?} */
                        var label = _this.getOptionLabel(n);
                        return label && label.indexOf(inputValue) !== -1;
                    });
                };
                /** @type {?} */
                var filter = this.nzShowSearch instanceof Object && ( /** @type {?} */(this.nzShowSearch)).filter
                    ? ( /** @type {?} */(this.nzShowSearch)).filter
                    : defaultFilter;
                /** @type {?} */
                var sorter = this.nzShowSearch instanceof Object && ( /** @type {?} */(this.nzShowSearch)).sorter;
                /** @type {?} */
                var loopParent = function (node, forceDisabled) {
                    if (forceDisabled === void 0) {
                        forceDisabled = false;
                    }
                    /** @type {?} */
                    var disabled = forceDisabled || node.disabled;
                    path.push(node);
                    node.children.forEach(function (sNode) {
                        if (!sNode.parent) {
                            sNode.parent = node;
                        } // Build parent reference when doing searching
                        if (!sNode.isLeaf) {
                            loopParent(sNode, disabled);
                        }
                        if (sNode.isLeaf || !sNode.children || !sNode.children.length) {
                            loopChild(sNode, disabled);
                        }
                    });
                    path.pop();
                };
                /** @type {?} */
                var loopChild = function (node, forceDisabled) {
                    if (forceDisabled === void 0) {
                        forceDisabled = false;
                    }
                    var _a;
                    path.push(node);
                    /** @type {?} */
                    var cPath = Array.from(path);
                    if (filter(_this._inputValue, cPath)) {
                        /** @type {?} */
                        var disabled = forceDisabled || node.disabled;
                        /** @type {?} */
                        var option = (_a = {
                            disabled: disabled,
                            isLeaf: true,
                            path: cPath
                        },
                            _a[_this.nzLabelProperty] = cPath.map(function (p) { return _this.getOptionLabel(p); }).join(' / '),
                            _a);
                        results.push(option);
                    }
                    path.pop();
                };
                this.columnsSnapshot[0].forEach(function (node) {
                    return (node.isLeaf || !node.children || !node.children.length)
                        ? loopChild(node)
                        : loopParent(node);
                });
                if (sorter) {
                    results.sort(function (a, b) { return sorter(a.path, b.path, _this._inputValue); });
                }
                this.columns = [results];
            };
        /**
         * @param {?} result
         * @param {?} event
         * @return {?}
         */
        NzCascaderComponent.prototype.setSearchOptionActivated = /**
         * @param {?} result
         * @param {?} event
         * @return {?}
         */
            function (result, event) {
                var _this = this;
                this.activatedOptions = [result];
                this.delaySetMenuVisible(false, 200);
                setTimeout(function () {
                    _this.inputValue = '';
                    /** @type {?} */
                    var index = result.path.length - 1;
                    /** @type {?} */
                    var destinationNode = result.path[index];
                    /** @type {?} */
                    var mockClickParent = function (node, columnIndex) {
                        if (node && node.parent) {
                            mockClickParent(node.parent, columnIndex - 1);
                        }
                        _this.onOptionClick(node, columnIndex, event);
                    };
                    mockClickParent(destinationNode, index);
                }, 300);
            };
        Object.defineProperty(NzCascaderComponent.prototype, "hasInput", {
            get: /**
             * @return {?}
             */ function () {
                return !!this.inputValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "hasValue", {
            get: /**
             * @return {?}
             */ function () {
                return !!this.value && !!this.value.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "showPlaceholder", {
            get: /**
             * @return {?}
             */ function () {
                return !(this.hasInput || this.hasValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "clearIconVisible", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzAllowClear && !this.nzDisabled && (this.hasValue || this.hasInput);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzCascaderComponent.prototype, "isLabelRenderTemplate", {
            get: /**
             * @return {?}
             */ function () {
                return !!this.nzLabelRender;
            },
            enumerable: true,
            configurable: true
        });
        // tslint:disable-next-line:no-any
        /**
         * @param {?} option
         * @return {?}
         */
        NzCascaderComponent.prototype.getOptionLabel = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                return option[this.nzLabelProperty || 'label'];
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} option
         * @return {?}
         */
        NzCascaderComponent.prototype.getOptionValue = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                return option[this.nzValueProperty || 'value'];
            };
        /**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        NzCascaderComponent.prototype.isOptionActivated = /**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
            function (option, index) {
                /** @type {?} */
                var activeOpt = this.activatedOptions[index];
                return activeOpt === option;
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.buildDisplayLabel = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var selectedOptions = this.selectedOptions;
                /** @type {?} */
                var labels = selectedOptions.map(function (o) { return _this.getOptionLabel(o); });
                if (this.isLabelRenderTemplate) {
                    this.labelRenderContext = { labels: labels, selectedOptions: selectedOptions };
                }
                else {
                    this.labelRenderText = defaultDisplayRender.call(this, labels, selectedOptions);
                }
                // When components inits with default value, this would make display label appear correctly.
                this.cdr.detectChanges();
            };
        //#endregion
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzCascaderComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                if (isDisabled) {
                    this.closeMenu();
                }
                this.nzDisabled = isDisabled;
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.closeMenu = /**
         * @return {?}
         */
            function () {
                this.blur();
                this.clearDelayMenuTimer();
                this.setMenuVisible(false);
            };
        /**
         * @return {?}
         */
        NzCascaderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clearDelayMenuTimer();
                this.clearDelaySelectTimer();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCascaderComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCascaderComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @return {?}
         */
        NzCascaderComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var vs = this.defaultValue = toArray(value);
                if (vs.length) {
                    this.initOptions(0);
                }
                else {
                    this.value = vs;
                    this.activatedOptions = [];
                    this.afterWriteValue();
                }
            };
        /**
         * @param {?} position
         * @return {?}
         */
        NzCascaderComponent.prototype.onPositionChange = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                /** @type {?} */
                var newValue = position.connectionPair.originY === 'bottom' ? 'bottom' : 'top';
                if (this.dropDownPosition !== newValue) {
                    this.dropDownPosition = newValue;
                    this.cdr.detectChanges();
                }
            };
        NzCascaderComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: 'nz-cascader,[nz-cascader]',
                        preserveWhitespaces: false,
                        template: "<div\n  cdkOverlayOrigin\n  #origin=\"cdkOverlayOrigin\"\n  #trigger>\n  <div *ngIf=\"nzShowInput\">\n    <input\n      #input\n      nz-input\n      class=\"ant-cascader-input\"\n      [class.ant-cascader-input-disabled]=\"nzDisabled\"\n      [class.ant-cascader-input-lg]=\"nzSize === 'large'\"\n      [class.ant-cascader-input-sm]=\"nzSize === 'small'\"\n      [attr.autoComplete]=\"'off'\"\n      [attr.placeholder]=\"showPlaceholder ? nzPlaceHolder : null\"\n      [attr.autofocus]=\"nzAutoFocus ? 'autofocus' : null\"\n      [readonly]=\"!nzShowSearch\"\n      [disabled]=\"nzDisabled\"\n      [nzSize]=\"nzSize\"\n      [(ngModel)]=\"inputValue\"\n      (blur)=\"handleInputBlur($event)\"\n      (focus)=\"handleInputFocus($event)\"\n      (change)=\"$event.stopPropagation()\">\n    <i *ngIf=\"clearIconVisible\"\n       nz-icon\n       type=\"close-circle\"\n       theme=\"fill\"\n       class=\"ant-cascader-picker-clear\"\n       (click)=\"clearSelection($event)\"></i>\n    <i *ngIf=\"nzShowArrow && !isLoading\"\n       nz-icon\n       type=\"down\"\n       class=\"ant-cascader-picker-arrow\"\n       [class.ant-cascader-picker-arrow-expand]=\"menuVisible\">\n    </i>\n    <i *ngIf=\"isLoading\" nz-icon type=\"loading\" class=\"ant-cascader-picker-arrow\"></i>\n    <span\n      class=\"ant-cascader-picker-label\"\n      [class.ant-cascader-show-search]=\"!!nzShowSearch\"\n      [class.ant-focusd]=\"!!nzShowSearch && isFocused && !inputValue\">\n      <ng-container *ngIf=\"!isLabelRenderTemplate; else labelTemplate\">{{ labelRenderText }}</ng-container>\n      <ng-template #labelTemplate>\n        <ng-template [ngTemplateOutlet]=\"nzLabelRender\" [ngTemplateOutletContext]=\"labelRenderContext\"></ng-template>\n      </ng-template>\n    </span>\n  </div>\n  <ng-content></ng-content>\n</div>\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  (backdropClick)=\"closeMenu()\"\n  (detach)=\"closeMenu()\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayOpen]=\"menuVisible\">\n  <div\n    #menu\n    class=\"ant-cascader-menus\"\n    [class.ant-cascader-menus-hidden]=\"!menuVisible\"\n    [ngClass]=\"menuCls\"\n    [ngStyle]=\"nzMenuStyle\"\n    [@dropDownAnimation]=\"dropDownPosition\"\n    (mouseleave)=\"onTriggerMouseLeave($event)\">\n    <ul *ngFor=\"let options of columns; let i = index;\" class=\"ant-cascader-menu\" [ngClass]=\"menuColumnCls\"\n        [style.height]=\"isSearching && !columns[0].length ? 'auto': ''\" [style.width]=\"dropdownWidthStyle\">\n      <li\n        nz-cascader-option\n        *ngFor=\"let option of options\"\n        [nzLabelProperty]=\"nzLabelProperty\"\n        [activated]=\"isOptionActivated(option, i)\"\n        [highlightText]=\"isSearching ? inputValue : ''\"\n        [option]=\"option\"\n        (mouseenter)=\"onOptionMouseEnter(option, i, $event)\"\n        (mouseleave)=\"onOptionMouseLeave(option, i, $event)\"\n        (click)=\"onOptionClick(option, i, $event)\">\n      </li>\n      <li *ngIf=\"isSearching && !columns[0].length\" class=\"ant-cascader-menu-item ant-cascader-menu-item-expanded ant-cascader-menu-item-disabled\">\n        {{ nzNotFoundContent || ('Select.notFoundContent' | nzI18n) }}\n      </li>\n    </ul>\n  </div>\n</ng-template>\n",
                        animations: [dropDownAnimation],
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzCascaderComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[attr.tabIndex]': '"0"',
                            '[class.ant-cascader]': 'true',
                            '[class.ant-cascader-picker]': 'true',
                            '[class.ant-cascader-lg]': 'nzSize === "large"',
                            '[class.ant-cascader-sm]': 'nzSize === "small"',
                            '[class.ant-cascader-picker-disabled]': 'nzDisabled',
                            '[class.ant-cascader-picker-open]': 'menuVisible',
                            '[class.ant-cascader-picker-with-value]': '!!inputValue',
                            '[class.ant-cascader-focused]': 'isFocused'
                        },
                        styles: ["\n    .ant-cascader-menus {\n      margin-top: 4px;\n      margin-bottom: 4px;\n      top: 100%;\n      left: 0;\n      position: relative;\n      width: 100%;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzCascaderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzCascaderComponent.propDecorators = {
            input: [{ type: i0.ViewChild, args: ['input',] }],
            menu: [{ type: i0.ViewChild, args: ['menu',] }],
            nzShowInput: [{ type: i0.Input }],
            nzShowArrow: [{ type: i0.Input }],
            nzAllowClear: [{ type: i0.Input }],
            nzAutoFocus: [{ type: i0.Input }],
            nzChangeOnSelect: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzColumnClassName: [{ type: i0.Input }],
            nzExpandTrigger: [{ type: i0.Input }],
            nzValueProperty: [{ type: i0.Input }],
            nzLabelRender: [{ type: i0.Input }],
            nzLabelProperty: [{ type: i0.Input }],
            nzNotFoundContent: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzShowSearch: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            nzMenuClassName: [{ type: i0.Input }],
            nzMenuStyle: [{ type: i0.Input }],
            nzMouseEnterDelay: [{ type: i0.Input }],
            nzMouseLeaveDelay: [{ type: i0.Input }],
            nzTriggerAction: [{ type: i0.Input }],
            nzChangeOn: [{ type: i0.Input }],
            nzLoadData: [{ type: i0.Input }],
            nzOptions: [{ type: i0.Input }],
            nzSelectionChange: [{ type: i0.Output }],
            nzSelect: [{ type: i0.Output }],
            nzClear: [{ type: i0.Output }],
            nzVisibleChange: [{ type: i0.Output }],
            nzChange: [{ type: i0.Output }],
            onKeyDown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
            onTriggerClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }],
            onTriggerMouseEnter: [{ type: i0.HostListener, args: ['mouseenter', ['$event'],] }],
            onTriggerMouseLeave: [{ type: i0.HostListener, args: ['mouseleave', ['$event'],] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCascaderComponent.prototype, "nzShowInput", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCascaderComponent.prototype, "nzShowArrow", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCascaderComponent.prototype, "nzAllowClear", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCascaderComponent.prototype, "nzAutoFocus", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCascaderComponent.prototype, "nzChangeOnSelect", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCascaderComponent.prototype, "nzDisabled", void 0);
        return NzCascaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCascaderModule = /** @class */ (function () {
        function NzCascaderModule() {
        }
        NzCascaderModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, i2$1.OverlayModule, NzInputModule, NzIconModule, NzI18nModule],
                        declarations: [
                            NzCascaderComponent,
                            NzCascaderOptionComponent
                        ],
                        exports: [
                            NzCascaderComponent
                        ]
                    },] }
        ];
        return NzCascaderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCheckboxGroupComponent = /** @class */ (function () {
        function NzCheckboxGroupComponent(elementRef, focusMonitor) {
            this.elementRef = elementRef;
            this.focusMonitor = focusMonitor;
            // tslint:disable-next-line:no-any
            this.onChange = function () { return null; };
            // tslint:disable-next-line:no-any
            this.onTouched = function () { return null; };
            this.nzDisabled = false;
        }
        /**
         * @return {?}
         */
        NzCheckboxGroupComponent.prototype.onOptionChange = /**
         * @return {?}
         */
            function () {
                this.onChange(this.options);
            };
        /**
         * @return {?}
         */
        NzCheckboxGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.focusMonitor.monitor(this.elementRef, true).subscribe(function (focusOrigin) {
                    if (!focusOrigin) {
                        Promise.resolve().then(function () { return _this.onTouched(); });
                    }
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzCheckboxGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.options = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCheckboxGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCheckboxGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzCheckboxGroupComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
            };
        NzCheckboxGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-checkbox-group',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<label nz-checkbox\n  *ngFor=\"let option of options\"\n  [nzDisabled]=\"option.disabled || nzDisabled\"\n  [(nzChecked)]=\"option.checked\"\n  (nzCheckedChange)=\"onOptionChange()\">\n  <span>{{ option.label }}</span>\n</label>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzCheckboxGroupComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.ant-checkbox-group]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzCheckboxGroupComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: a11y.FocusMonitor }
            ];
        };
        NzCheckboxGroupComponent.propDecorators = {
            nzDisabled: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCheckboxGroupComponent.prototype, "nzDisabled", void 0);
        return NzCheckboxGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCheckboxWrapperComponent = /** @class */ (function () {
        function NzCheckboxWrapperComponent() {
            this.nzOnChange = new i0.EventEmitter();
            this.checkboxList = [];
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NzCheckboxWrapperComponent.prototype.addCheckbox = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.checkboxList.push(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzCheckboxWrapperComponent.prototype.removeCheckbox = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.checkboxList.splice(this.checkboxList.indexOf(value), 1);
            };
        /**
         * @return {?}
         */
        NzCheckboxWrapperComponent.prototype.outputValue = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var checkedList = this.checkboxList.filter(function (item) { return item.nzChecked; });
                return checkedList.map(function (item) { return item.nzValue; });
            };
        /**
         * @return {?}
         */
        NzCheckboxWrapperComponent.prototype.onChange = /**
         * @return {?}
         */
            function () {
                this.nzOnChange.emit(this.outputValue());
            };
        NzCheckboxWrapperComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-checkbox-wrapper',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-checkbox-group]': 'true'
                        }
                    }] }
        ];
        NzCheckboxWrapperComponent.propDecorators = {
            nzOnChange: [{ type: i0.Output }]
        };
        return NzCheckboxWrapperComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCheckboxComponent = /** @class */ (function () {
        function NzCheckboxComponent(elementRef, renderer, nzCheckboxWrapperComponent, cdr, focusMonitor) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;
            this.cdr = cdr;
            this.focusMonitor = focusMonitor;
            // tslint:disable-next-line:no-any
            this.onChange = function () { return null; };
            // tslint:disable-next-line:no-any
            this.onTouched = function () { return null; };
            this.nzCheckedChange = new i0.EventEmitter();
            this.nzAutoFocus = false;
            this.nzDisabled = false;
            this.nzIndeterminate = false;
            this.nzChecked = false;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NzCheckboxComponent.prototype.onClick = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.preventDefault();
                this.focus();
                if (!this.nzDisabled) {
                    this.nzChecked = !this.nzChecked;
                    this.onChange(this.nzChecked);
                    this.nzCheckedChange.emit(this.nzChecked);
                    if (this.nzCheckboxWrapperComponent) {
                        this.nzCheckboxWrapperComponent.onChange();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.updateAutoFocus = /**
         * @return {?}
         */
            function () {
                if (this.inputElement && this.nzAutoFocus) {
                    this.renderer.setAttribute(this.inputElement.nativeElement, 'autofocus', 'autofocus');
                }
                else {
                    this.renderer.removeAttribute(this.inputElement.nativeElement, 'autofocus');
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzCheckboxComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.nzChecked = value;
                this.cdr.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCheckboxComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCheckboxComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzCheckboxComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
                this.cdr.markForCheck();
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.focusMonitor.focusVia(this.inputElement, 'keyboard');
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.inputElement.nativeElement.blur();
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.checkContent = /**
         * @return {?}
         */
            function () {
                if (isEmpty(this.contentElement.nativeElement)) {
                    this.renderer.setStyle(this.contentElement.nativeElement, 'display', 'none');
                }
                else {
                    this.renderer.removeStyle(this.contentElement.nativeElement, 'display');
                }
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.focusMonitor.monitor(this.elementRef, true).subscribe(function (focusOrigin) {
                    if (!focusOrigin) {
                        Promise.resolve().then(function () { return _this.onTouched(); });
                    }
                });
                if (this.nzCheckboxWrapperComponent) {
                    this.nzCheckboxWrapperComponent.addCheckbox(this);
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzCheckboxComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzAutoFocus"]) {
                    this.updateAutoFocus();
                }
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.updateAutoFocus();
                this.checkContent();
            };
        /**
         * @return {?}
         */
        NzCheckboxComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.focusMonitor.stopMonitoring(this.elementRef);
                if (this.nzCheckboxWrapperComponent) {
                    this.nzCheckboxWrapperComponent.removeCheckbox(this);
                }
            };
        NzCheckboxComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-checkbox]',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<span class=\"ant-checkbox\"\n  [class.ant-checkbox-checked]=\"nzChecked && !nzIndeterminate\"\n  [class.ant-checkbox-disabled]=\"nzDisabled\"\n  [class.ant-checkbox-indeterminate]=\"nzIndeterminate\">\n  <input #inputElement\n    [checked]=\"nzChecked\"\n    type=\"checkbox\"\n    class=\"ant-checkbox-input\">\n  <span class=\"ant-checkbox-inner\"></span>\n</span>\n<span #contentElement (cdkObserveContent)=\"checkContent()\"><ng-content></ng-content></span>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzCheckboxComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.ant-checkbox-wrapper]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzCheckboxComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: NzCheckboxWrapperComponent, decorators: [{ type: i0.Optional }] },
                { type: i0.ChangeDetectorRef },
                { type: a11y.FocusMonitor }
            ];
        };
        NzCheckboxComponent.propDecorators = {
            inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
            contentElement: [{ type: i0.ViewChild, args: ['contentElement',] }],
            nzCheckedChange: [{ type: i0.Output }],
            nzValue: [{ type: i0.Input }],
            nzAutoFocus: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzIndeterminate: [{ type: i0.Input }],
            nzChecked: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCheckboxComponent.prototype, "nzAutoFocus", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCheckboxComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCheckboxComponent.prototype, "nzIndeterminate", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCheckboxComponent.prototype, "nzChecked", void 0);
        return NzCheckboxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCheckboxModule = /** @class */ (function () {
        function NzCheckboxModule() {
        }
        NzCheckboxModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, observers.ObserversModule],
                        declarations: [
                            NzCheckboxComponent,
                            NzCheckboxGroupComponent,
                            NzCheckboxWrapperComponent
                        ],
                        exports: [
                            NzCheckboxComponent,
                            NzCheckboxGroupComponent,
                            NzCheckboxWrapperComponent
                        ]
                    },] }
        ];
        return NzCheckboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCollapsePanelComponent = /** @class */ (function () {
        function NzCollapsePanelComponent(cdr) {
            this.cdr = cdr;
            this.nzActive = false;
            this.nzDisabled = false;
            this.nzShowArrow = true;
            this.nzActiveChange = new i0.EventEmitter();
            this.click$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        NzCollapsePanelComponent.prototype.clickHeader = /**
         * @return {?}
         */
            function () {
                if (!this.nzDisabled) {
                    this.click$.next(this);
                }
            };
        /**
         * @return {?}
         */
        NzCollapsePanelComponent.prototype.markForCheck = /**
         * @return {?}
         */
            function () {
                this.cdr.markForCheck();
            };
        NzCollapsePanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-collapse-panel',
                        template: "<div role=\"tab\" [attr.aria-expanded]=\"nzActive\" class=\"ant-collapse-header\" (click)=\"clickHeader()\">\n  <i nz-icon type=\"right\" class=\"arrow anticon-right\" *ngIf=\"nzShowArrow\"></i>\n  <ng-container *nzStringTemplateOutlet=\"nzHeader\">{{ nzHeader }}</ng-container>\n</div>\n<div class=\"ant-collapse-content\"\n  [class.ant-collapse-content-active]=\"nzActive\"\n  [@collapseState]=\"nzActive?'active':'inactive'\">\n  <div class=\"ant-collapse-content-box\">\n    <ng-content></ng-content>\n  </div>\n</div>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        animations: [
                            animations.trigger('collapseState', [
                                animations.state('inactive', animations.style({
                                    opacity: '0',
                                    height: 0
                                })),
                                animations.state('active', animations.style({
                                    opacity: '1',
                                    height: '*'
                                })),
                                animations.transition('inactive => active', animations.animate('150ms ease-in')),
                                animations.transition('active => inactive', animations.animate('150ms ease-out'))
                            ])
                        ],
                        host: {
                            '[class.ant-collapse-item]': 'true',
                            '[class.ant-collapse-no-arrow]': '!nzShowArrow'
                        },
                        styles: [" nz-collapse-panel {\n      display: block\n    }"]
                    }] }
        ];
        /** @nocollapse */
        NzCollapsePanelComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzCollapsePanelComponent.propDecorators = {
            nzActive: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ant-collapse-item-active',] }],
            nzDisabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ant-collapse-item-disabled',] }],
            nzShowArrow: [{ type: i0.Input }],
            nzHeader: [{ type: i0.Input }],
            nzActiveChange: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCollapsePanelComponent.prototype, "nzActive", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCollapsePanelComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCollapsePanelComponent.prototype, "nzShowArrow", void 0);
        return NzCollapsePanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCollapseComponent = /** @class */ (function () {
        function NzCollapseComponent() {
            this.nzAccordion = false;
            this.nzBordered = true;
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @param {?} collapse
         * @return {?}
         */
        NzCollapseComponent.prototype.click = /**
         * @param {?} collapse
         * @return {?}
         */
            function (collapse) {
                if (this.nzAccordion && !collapse.nzActive) {
                    this.listOfNzCollapsePanelComponent.filter(function (item) { return item !== collapse; }).forEach(function (item) {
                        if (item.nzActive) {
                            item.nzActive = false;
                            item.nzActiveChange.emit(item.nzActive);
                            item.markForCheck();
                        }
                    });
                }
                collapse.nzActive = !collapse.nzActive;
                collapse.nzActiveChange.emit(collapse.nzActive);
            };
        /**
         * @return {?}
         */
        NzCollapseComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.listOfNzCollapsePanelComponent.changes.pipe(operators.startWith(null), operators.takeUntil(this.destroy$)).subscribe(function () {
                    if (_this.clickSubscription) {
                        _this.clickSubscription.unsubscribe();
                    }
                    _this.clickSubscription = rxjs.merge.apply(void 0, __spread(_this.listOfNzCollapsePanelComponent.map(function (item) { return item.click$; }))).pipe(operators.takeUntil(_this.destroy$)).subscribe(function (data) {
                        _this.click(data);
                    });
                });
            };
        /**
         * @return {?}
         */
        NzCollapseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
            };
        NzCollapseComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-collapse',
                        template: "<div class=\"ant-collapse\" [class.ant-collapse-borderless]=\"!nzBordered\">\n  <ng-content></ng-content>\n</div>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: ["nz-collapse {\n      display: block;\n    }"]
                    }] }
        ];
        NzCollapseComponent.propDecorators = {
            listOfNzCollapsePanelComponent: [{ type: i0.ContentChildren, args: [NzCollapsePanelComponent,] }],
            nzAccordion: [{ type: i0.Input }],
            nzBordered: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCollapseComponent.prototype, "nzAccordion", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzCollapseComponent.prototype, "nzBordered", void 0);
        return NzCollapseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzCollapseModule = /** @class */ (function () {
        function NzCollapseModule() {
        }
        NzCollapseModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzCollapsePanelComponent, NzCollapseComponent],
                        exports: [NzCollapsePanelComponent, NzCollapseComponent],
                        imports: [i3.CommonModule, NzIconModule, NzAddOnModule]
                    },] }
        ];
        return NzCollapseModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTimeValueAccessorDirective = /** @class */ (function () {
        function NzTimeValueAccessorDirective(i18n, elementRef) {
            this.i18n = i18n;
            this.elementRef = elementRef;
        }
        /**
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.keyup = /**
         * @return {?}
         */
            function () {
                this.changed();
            };
        /**
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.touched();
            };
        /**
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.changed = /**
         * @return {?}
         */
            function () {
                if (this._onChange) {
                    /** @type {?} */
                    var value = this.i18n.parseTime(this.elementRef.nativeElement.value);
                    this._onChange(value);
                }
            };
        /**
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.touched = /**
         * @return {?}
         */
            function () {
                if (this._onTouch) {
                    this._onTouch();
                }
            };
        /**
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.setRange = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.focus();
                this.elementRef.nativeElement.setSelectionRange(0, this.elementRef.nativeElement.value.length);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.elementRef.nativeElement.value = this.i18n.formatDate(value, this.nzTime);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTimeValueAccessorDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouch = fn;
            };
        NzTimeValueAccessorDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'input[nzTime]',
                        providers: [
                            { provide: forms.NG_VALUE_ACCESSOR, useExisting: NzTimeValueAccessorDirective, multi: true }
                        ]
                    },] }
        ];
        /** @nocollapse */
        NzTimeValueAccessorDirective.ctorParameters = function () {
            return [
                { type: NzI18nService },
                { type: i0.ElementRef }
            ];
        };
        NzTimeValueAccessorDirective.propDecorators = {
            nzTime: [{ type: i0.Input }],
            keyup: [{ type: i0.HostListener, args: ['keyup',] }],
            blur: [{ type: i0.HostListener, args: ['blur',] }]
        };
        return NzTimeValueAccessorDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TimeHolder = /** @class */ (function () {
        function TimeHolder() {
            this._seconds = undefined;
            this._hours = undefined;
            this._minutes = undefined;
            this._defaultOpenValue = new Date();
            this._changes = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        TimeHolder.prototype.setDefaultValueIfNil = /**
         * @return {?}
         */
            function () {
                if (!isNotNil(this._value)) {
                    this._value = new Date(this.defaultOpenValue);
                }
            };
        /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
        TimeHolder.prototype.setMinutes = /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
            function (value, disabled) {
                if (disabled) {
                    return this;
                }
                this.setDefaultValueIfNil();
                this.minutes = value;
                return this;
            };
        /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
        TimeHolder.prototype.setHours = /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
            function (value, disabled) {
                if (disabled) {
                    return this;
                }
                this.setDefaultValueIfNil();
                this.hours = value;
                return this;
            };
        /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
        TimeHolder.prototype.setSeconds = /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
            function (value, disabled) {
                if (disabled) {
                    return this;
                }
                this.setDefaultValueIfNil();
                this.seconds = value;
                return this;
            };
        Object.defineProperty(TimeHolder.prototype, "changes", {
            get: /**
             * @return {?}
             */ function () {
                return this._changes.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeHolder.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._value) {
                    this._value = value;
                    if (isNotNil(this._value)) {
                        this._hours = this._value.getHours();
                        this._minutes = this._value.getMinutes();
                        this._seconds = this._value.getSeconds();
                    }
                    else {
                        this._clear();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        TimeHolder.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                return this;
            };
        /**
         * @return {?}
         */
        TimeHolder.prototype.clear = /**
         * @return {?}
         */
            function () {
                this._clear();
                this.update();
            };
        Object.defineProperty(TimeHolder.prototype, "isEmpty", {
            get: /**
             * @return {?}
             */ function () {
                return !(isNotNil(this._hours) || isNotNil(this._minutes) || isNotNil(this._seconds));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TimeHolder.prototype._clear = /**
         * @return {?}
         */
            function () {
                this._hours = undefined;
                this._minutes = undefined;
                this._seconds = undefined;
            };
        /**
         * @return {?}
         */
        TimeHolder.prototype.update = /**
         * @return {?}
         */
            function () {
                if (this.isEmpty) {
                    this._value = undefined;
                }
                else {
                    if (!isNotNil(this._hours)) {
                        this._hours = this.defaultHours;
                    }
                    else {
                        this._value.setHours(this.hours);
                    }
                    if (!isNotNil(this._minutes)) {
                        this._minutes = this.defaultMinutes;
                    }
                    else {
                        this._value.setMinutes(this.minutes);
                    }
                    if (!isNotNil(this._seconds)) {
                        this._seconds = this.defaultSeconds;
                    }
                    else {
                        this._value.setSeconds(this.seconds);
                    }
                    this._value = new Date(this._value);
                }
                this.changed();
            };
        /**
         * @return {?}
         */
        TimeHolder.prototype.changed = /**
         * @return {?}
         */
            function () {
                this._changes.next(this._value);
            };
        Object.defineProperty(TimeHolder.prototype, "hours", {
            get: /**
             * @return {?}
             */ function () {
                return this._hours;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._hours) {
                    this._hours = value;
                    this.update();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeHolder.prototype, "minutes", {
            get: /**
             * @return {?}
             */ function () {
                return this._minutes;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._minutes) {
                    this._minutes = value;
                    this.update();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeHolder.prototype, "seconds", {
            get: /**
             * @return {?}
             */ function () {
                return this._seconds;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._seconds) {
                    this._seconds = value;
                    this.update();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeHolder.prototype, "defaultOpenValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultOpenValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._defaultOpenValue !== value) {
                    this._defaultOpenValue = value;
                    this.update();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        TimeHolder.prototype.setDefaultOpenValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.defaultOpenValue = value;
                return this;
            };
        Object.defineProperty(TimeHolder.prototype, "defaultHours", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultOpenValue.getHours();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeHolder.prototype, "defaultMinutes", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultOpenValue.getMinutes();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeHolder.prototype, "defaultSeconds", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultOpenValue.getSeconds();
            },
            enumerable: true,
            configurable: true
        });
        return TimeHolder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} length
     * @param {?=} step
     * @return {?}
     */
    function makeRange(length, step) {
        if (step === void 0) {
            step = 1;
        }
        return new Array(Math.ceil(length / step)).fill(0).map(function (_, i) { return i * step; });
    }
    var NzTimePickerPanelComponent = /** @class */ (function () {
        function NzTimePickerPanelComponent(element, updateCls) {
            this.element = element;
            this.updateCls = updateCls;
            this._nzHourStep = 1;
            this._nzMinuteStep = 1;
            this._nzSecondStep = 1;
            this.unsubscribe$ = new rxjs.Subject();
            this._format = 'HH:mm:ss';
            this._defaultOpenValue = new Date();
            this._opened = false;
            this._allowEmpty = true;
            this.prefixCls = 'ant-time-picker-panel';
            this.time = new TimeHolder();
            this.hourEnabled = true;
            this.minuteEnabled = true;
            this.secondEnabled = true;
            this.enabledColumns = 3;
            this.nzInDatePicker = false; // If inside a date-picker, more diff works need to be done
            this.nzHideDisabledOptions = false;
            this.timeClear = new i0.EventEmitter();
        }
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzAllowEmpty", {
            get: /**
             * @return {?}
             */ function () {
                return this._allowEmpty;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._allowEmpty = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "opened", {
            get: /**
             * @return {?}
             */ function () {
                return this._opened;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._opened = value;
                if (this.opened) {
                    this.initPosition();
                    this.selectInputRange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzDefaultOpenValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultOpenValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._defaultOpenValue = value;
                    this.time.setDefaultOpenValue(this.nzDefaultOpenValue);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzDisabledHours", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabledHours;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabledHours = value;
                if (this._disabledHours) {
                    this.buildHours();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzDisabledMinutes", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabledMinutes;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._disabledMinutes = value;
                    this.buildMinutes();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzDisabledSeconds", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabledSeconds;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._disabledSeconds = value;
                    this.buildSeconds();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "format", {
            get: /**
             * @return {?}
             */ function () {
                return this._format;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._format = value;
                    this.enabledColumns = 0;
                    /** @type {?} */
                    var charSet = new Set(value);
                    this.hourEnabled = charSet.has('H') || charSet.has('h');
                    this.minuteEnabled = charSet.has('m');
                    this.secondEnabled = charSet.has('s');
                    if (this.hourEnabled) {
                        this.enabledColumns++;
                    }
                    if (this.minuteEnabled) {
                        this.enabledColumns++;
                    }
                    if (this.secondEnabled) {
                        this.enabledColumns++;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzHourStep", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzHourStep;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._nzHourStep = value;
                    this.buildHours();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzMinuteStep", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzMinuteStep;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._nzMinuteStep = value;
                    this.buildMinutes();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerPanelComponent.prototype, "nzSecondStep", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzSecondStep;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._nzSecondStep = value;
                    this.buildSeconds();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.selectInputRange = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    if (_this.nzTimeValueAccessorDirective) {
                        _this.nzTimeValueAccessorDirective.setRange();
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.buildHours = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.hourRange = makeRange(24, this.nzHourStep).map(function (r) {
                    return {
                        index: r,
                        disabled: _this.nzDisabledHours && (_this.nzDisabledHours().indexOf(r) !== -1)
                    };
                });
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.buildMinutes = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.minuteRange = makeRange(60, this.nzMinuteStep).map(function (r) {
                    return {
                        index: r,
                        disabled: _this.nzDisabledMinutes && (_this.nzDisabledMinutes(_this.time.hours).indexOf(r) !== -1)
                    };
                });
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.buildSeconds = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.secondRange = makeRange(60, this.nzSecondStep).map(function (r) {
                    return {
                        index: r,
                        disabled: _this.nzDisabledSeconds && (_this.nzDisabledSeconds(_this.time.hours, _this.time.minutes).indexOf(r) !== -1)
                    };
                });
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.buildTimes = /**
         * @return {?}
         */
            function () {
                this.buildHours();
                this.buildMinutes();
                this.buildSeconds();
            };
        /**
         * @param {?} hour
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.selectHour = /**
         * @param {?} hour
         * @return {?}
         */
            function (hour) {
                this.time.setHours(hour.index, hour.disabled);
                this.scrollToSelected(this.hourListElement.nativeElement, hour.index, 120, 'hour');
                if (this._disabledMinutes) {
                    this.buildMinutes();
                }
                if (this._disabledSeconds || this._disabledMinutes) {
                    this.buildSeconds();
                }
            };
        /**
         * @param {?} minute
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.selectMinute = /**
         * @param {?} minute
         * @return {?}
         */
            function (minute) {
                this.time.setMinutes(minute.index, minute.disabled);
                this.scrollToSelected(this.minuteListElement.nativeElement, minute.index, 120, 'minute');
                if (this._disabledSeconds) {
                    this.buildSeconds();
                }
            };
        /**
         * @param {?} second
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.selectSecond = /**
         * @param {?} second
         * @return {?}
         */
            function (second) {
                this.time.setSeconds(second.index, second.disabled);
                this.scrollToSelected(this.secondListElement.nativeElement, second.index, 120, 'second');
            };
        /**
         * @param {?} instance
         * @param {?} index
         * @param {?=} duration
         * @param {?=} unit
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.scrollToSelected = /**
         * @param {?} instance
         * @param {?} index
         * @param {?=} duration
         * @param {?=} unit
         * @return {?}
         */
            function (instance, index, duration, unit) {
                if (duration === void 0) {
                    duration = 0;
                }
                /** @type {?} */
                var transIndex = this.translateIndex(index, unit);
                /** @type {?} */
                var currentOption = /** @type {?} */ ((instance.children[0].children[transIndex] || instance.children[0].children[0]));
                this.scrollTo(instance, currentOption.offsetTop, duration);
            };
        /**
         * @param {?} index
         * @param {?} unit
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.translateIndex = /**
         * @param {?} index
         * @param {?} unit
         * @return {?}
         */
            function (index, unit) {
                if (unit === 'hour') {
                    /** @type {?} */
                    var disabledHours = this.nzDisabledHours && this.nzDisabledHours();
                    return this.calcIndex(disabledHours, this.hourRange.map(function (item) { return item.index; }).indexOf(index));
                }
                else if (unit === 'minute') {
                    /** @type {?} */
                    var disabledMinutes = this.nzDisabledMinutes && this.nzDisabledMinutes(this.time.hours);
                    return this.calcIndex(disabledMinutes, this.minuteRange.map(function (item) { return item.index; }).indexOf(index));
                }
                else if (unit === 'second') {
                    /** @type {?} */
                    var disabledSeconds = this.nzDisabledSeconds && this.nzDisabledSeconds(this.time.hours, this.time.minutes);
                    return this.calcIndex(disabledSeconds, this.secondRange.map(function (item) { return item.index; }).indexOf(index));
                }
            };
        /**
         * @param {?} element
         * @param {?} to
         * @param {?} duration
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.scrollTo = /**
         * @param {?} element
         * @param {?} to
         * @param {?} duration
         * @return {?}
         */
            function (element, to, duration) {
                var _this = this;
                if (duration <= 0) {
                    element.scrollTop = to;
                    return;
                }
                /** @type {?} */
                var difference = to - element.scrollTop;
                /** @type {?} */
                var perTick = difference / duration * 10;
                reqAnimFrame(function () {
                    element.scrollTop = element.scrollTop + perTick;
                    if (element.scrollTop === to) {
                        return;
                    }
                    _this.scrollTo(element, to, duration - 10);
                });
            };
        /**
         * @param {?} array
         * @param {?} index
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.calcIndex = /**
         * @param {?} array
         * @param {?} index
         * @return {?}
         */
            function (array, index) {
                if (array && array.length && this.nzHideDisabledOptions) {
                    return index - array.reduce(function (pre, value) {
                        return pre + (value < index ? 1 : 0);
                    }, 0);
                }
                else {
                    return index;
                }
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.time.clear();
                this.timeClear.emit();
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.changed = /**
         * @return {?}
         */
            function () {
                if (this.onChange) {
                    this.onChange(this.time.value);
                }
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.touched = /**
         * @return {?}
         */
            function () {
                if (this.onTouch) {
                    this.onTouch();
                }
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.updateCls.updateHostClass(this.element.nativeElement, (_a = {},
                    _a["" + this.prefixCls] = true,
                    _a[this.prefixCls + "-column-" + this.enabledColumns] = this.nzInDatePicker ? false : true,
                    _a[this.prefixCls + "-narrow"] = this.enabledColumns < 3,
                    _a[this.prefixCls + "-placement-bottomLeft"] = this.nzInDatePicker ? false : true,
                    _a));
            };
        /**
         * @param {?} hour
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.isSelectedHour = /**
         * @param {?} hour
         * @return {?}
         */
            function (hour) {
                return (hour.index === this.time.hours) || (!isNotNil(this.time.hours) && (hour.index === this.time.defaultHours));
            };
        /**
         * @param {?} minute
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.isSelectedMinute = /**
         * @param {?} minute
         * @return {?}
         */
            function (minute) {
                return (minute.index === this.time.minutes) || (!isNotNil(this.time.minutes) && (minute.index === this.time.defaultMinutes));
            };
        /**
         * @param {?} second
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.isSelectedSecond = /**
         * @param {?} second
         * @return {?}
         */
            function (second) {
                return (second.index === this.time.seconds) || (!isNotNil(this.time.seconds) && (second.index === this.time.defaultSeconds));
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.initPosition = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    if (_this.hourEnabled && _this.hourListElement) {
                        if (isNotNil(_this.time.hours)) {
                            _this.scrollToSelected(_this.hourListElement.nativeElement, _this.time.hours, 0, 'hour');
                        }
                        else {
                            _this.scrollToSelected(_this.hourListElement.nativeElement, _this.time.defaultHours, 0, 'hour');
                        }
                    }
                    if (_this.minuteEnabled && _this.minuteListElement) {
                        if (isNotNil(_this.time.minutes)) {
                            _this.scrollToSelected(_this.minuteListElement.nativeElement, _this.time.minutes, 0, 'minute');
                        }
                        else {
                            _this.scrollToSelected(_this.minuteListElement.nativeElement, _this.time.defaultMinutes, 0, 'minute');
                        }
                    }
                    if (_this.secondEnabled && _this.secondListElement) {
                        if (isNotNil(_this.time.seconds)) {
                            _this.scrollToSelected(_this.secondListElement.nativeElement, _this.time.seconds, 0, 'second');
                        }
                        else {
                            _this.scrollToSelected(_this.secondListElement.nativeElement, _this.time.defaultSeconds, 0, 'second');
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.nzInDatePicker) {
                    this.prefixCls = 'ant-calendar-time-picker';
                }
                this.time.changes.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () {
                    _this.changed();
                    _this.touched();
                });
                this.buildTimes();
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.time.value = value;
                this.buildTimes();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTimePickerPanelComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouch = fn;
            };
        NzTimePickerPanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-time-picker-panel',
                        template: "<div class=\"{{ nzInDatePicker ? prefixCls + '-panel' : '' }}\">\n  <div\n    class=\"{{ prefixCls }}-inner {{ nzInDatePicker ? prefixCls + '-column-' + enabledColumns : '' }}\"\n    [style.width.px]=\"nzInDatePicker ? null : enabledColumns * 56\">\n    <div class=\"{{ prefixCls }}-input-wrap\">\n      <input\n        type=\"text\"\n        class=\"{{ prefixCls }}-input\"\n        [placeholder]=\"nzPlaceHolder\"\n        [nzTime]=\"format\"\n        [(ngModel)]=\"time.value\"\n        (blur)=\"time.changed()\">\n      <a\n        *ngIf=\"nzAllowEmpty\"\n        class=\"{{ prefixCls }}-clear-btn\"\n        [attr.title]=\"nzClearText\"\n        (click)=\"clear()\">\n        <i nz-icon type=\"close-circle\" theme=\"fill\" class=\"ant-time-picker-panel-clear-btn-icon\"></i>\n      </a>\n    </div>\n    <div class=\"{{ prefixCls }}-combobox\">\n      <div\n        *ngIf=\"hourEnabled\"\n        #hourListElement\n        class=\"{{ prefixCls }}-select\">\n        <ul>\n          <ng-container *ngFor=\"let hour of hourRange\">\n            <li\n              *ngIf=\"!(nzHideDisabledOptions && hour.disabled)\"\n              (click)=\"selectHour(hour)\"\n              class=\"\n                {{ isSelectedHour(hour) ? prefixCls + '-select-option-selected' : '' }}\n                {{ hour.disabled ? prefixCls + '-select-option-disabled' : '' }}\n              \"\n            >\n              {{ hour.index | number:'2.0-0' }}\n            </li>\n          </ng-container>\n        </ul>\n      </div>\n      <div\n        *ngIf=\"minuteEnabled\"\n        #minuteListElement\n        class=\"{{ prefixCls }}-select\">\n        <ul>\n          <ng-container *ngFor=\"let minute of minuteRange\">\n            <li\n              *ngIf=\"!(nzHideDisabledOptions && minute.disabled)\"\n              (click)=\"selectMinute(minute)\"\n              class=\"\n                {{ isSelectedMinute(minute) ? prefixCls + '-select-option-selected' : '' }}\n                {{ minute.disabled ? prefixCls + '-select-option-disabled' : '' }}\n              \"\n            >\n              {{ minute.index | number:'2.0-0' }}\n            </li>\n          </ng-container>\n        </ul>\n      </div>\n      <div\n        *ngIf=\"secondEnabled\"\n        #secondListElement\n        class=\"{{ prefixCls }}-select\">\n        <ul>\n          <ng-container *ngFor=\"let second of secondRange\">\n            <li\n              *ngIf=\"!(nzHideDisabledOptions && second.disabled)\"\n              (click)=\"selectSecond(second)\"\n              class=\"\n                {{ isSelectedSecond(second) ? prefixCls + '-select-option-selected' : '' }}\n                {{ second.disabled ? prefixCls + '-select-option-disabled' : '' }}\n              \"\n            >\n              {{ second.index | number:'2.0-0' }}\n            </li>\n          </ng-container>\n        </ul>\n      </div>\n    </div>\n    <div class=\"{{ prefixCls }}-addon\" *ngIf=\"nzAddOn\">\n      <ng-template [ngTemplateOutlet]=\"nzAddOn\"></ng-template>\n    </div>\n  </div>\n</div>",
                        providers: [
                            NzUpdateHostClassService,
                            { provide: forms.NG_VALUE_ACCESSOR, useExisting: NzTimePickerPanelComponent, multi: true }
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzTimePickerPanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NzUpdateHostClassService }
            ];
        };
        NzTimePickerPanelComponent.propDecorators = {
            nzTimeValueAccessorDirective: [{ type: i0.ViewChild, args: [NzTimeValueAccessorDirective,] }],
            hourListElement: [{ type: i0.ViewChild, args: ['hourListElement',] }],
            minuteListElement: [{ type: i0.ViewChild, args: ['minuteListElement',] }],
            secondListElement: [{ type: i0.ViewChild, args: ['secondListElement',] }],
            nzInDatePicker: [{ type: i0.Input }],
            nzAddOn: [{ type: i0.Input }],
            nzHideDisabledOptions: [{ type: i0.Input }],
            nzClearText: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            timeClear: [{ type: i0.Output }],
            nzAllowEmpty: [{ type: i0.Input }],
            opened: [{ type: i0.Input }],
            nzDefaultOpenValue: [{ type: i0.Input }],
            nzDisabledHours: [{ type: i0.Input }],
            nzDisabledMinutes: [{ type: i0.Input }],
            nzDisabledSeconds: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            nzHourStep: [{ type: i0.Input }],
            nzMinuteStep: [{ type: i0.Input }],
            nzSecondStep: [{ type: i0.Input }]
        };
        return NzTimePickerPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTimePickerComponent = /** @class */ (function () {
        function NzTimePickerComponent(element, renderer, overlay, positionBuilder, i18n, updateCls) {
            this.element = element;
            this.renderer = renderer;
            this.overlay = overlay;
            this.positionBuilder = positionBuilder;
            this.i18n = i18n;
            this.updateCls = updateCls;
            this._disabled = false;
            this._value = null;
            this._allowEmpty = true;
            this._autoFocus = false;
            this._hideDisabledOptions = false;
            this.isInit = false;
            this.overlayPositions = [{
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 0
                }];
            this.nzSize = null;
            this.nzHourStep = 1;
            this.nzMinuteStep = 1;
            this.nzSecondStep = 1;
            this.nzClearText = 'clear';
            this.nzPopupClassName = '';
            this.nzPlaceHolder = '';
            this.nzDefaultOpenValue = new Date();
            this.nzFormat = 'HH:mm:ss';
            this.nzOpen = false;
            this.nzOpenChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzTimePickerComponent.prototype, "nzHideDisabledOptions", {
            get: /**
             * @return {?}
             */ function () {
                return this._hideDisabledOptions;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._hideDisabledOptions = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerComponent.prototype, "nzAllowEmpty", {
            get: /**
             * @return {?}
             */ function () {
                return this._allowEmpty;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._allowEmpty = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerComponent.prototype, "nzAutoFocus", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoFocus;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoFocus = toBoolean(value);
                this.updateAutoFocus();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
                /** @type {?} */
                var input = /** @type {?} */ (this.inputRef.nativeElement);
                if (this._disabled) {
                    this.renderer.setAttribute(input, 'disabled', '');
                }
                else {
                    this.renderer.removeAttribute(input, 'disabled');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTimePickerComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._value = value;
                if (this._onChange) {
                    this._onChange(this.value);
                }
                if (this._onTouched) {
                    this._onTouched();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                if (this.nzDisabled) {
                    return;
                }
                this.nzOpen = true;
                this.nzOpenChange.emit(this.nzOpen);
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.nzOpen = false;
                this.nzOpenChange.emit(this.nzOpen);
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.updateAutoFocus = /**
         * @return {?}
         */
            function () {
                if (this.isInit && !this.nzDisabled) {
                    if (this.nzAutoFocus) {
                        this.renderer.setAttribute(this.inputRef.nativeElement, 'autofocus', 'autofocus');
                    }
                    else {
                        this.renderer.removeAttribute(this.inputRef.nativeElement, 'autofocus');
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.updateCls.updateHostClass(this.element.nativeElement, (_a = {},
                    _a["ant-time-picker"] = true,
                    _a["ant-time-picker-" + this.nzSize] = isNotNil(this.nzSize),
                    _a));
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                if (this.inputRef.nativeElement) {
                    this.inputRef.nativeElement.focus();
                }
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                if (this.inputRef.nativeElement) {
                    this.inputRef.nativeElement.blur();
                }
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
                this.origin = new i2$1.CdkOverlayOrigin(this.element);
            };
        /**
         * @return {?}
         */
        NzTimePickerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.isInit = true;
                this.updateAutoFocus();
            };
        /**
         * @param {?} time
         * @return {?}
         */
        NzTimePickerComponent.prototype.writeValue = /**
         * @param {?} time
         * @return {?}
         */
            function (time) {
                this._value = time;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTimePickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTimePickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzTimePickerComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
            };
        NzTimePickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-time-picker',
                        template: "<input\n  type=\"text\"\n  [nzTime]=\"nzFormat\"\n  class=\"ant-time-picker-input\"\n  [placeholder]=\"nzPlaceHolder || ('TimePicker.placeholder' | nzI18n)\"\n  [(ngModel)]=\"value\"\n  readonly=\"readonly\"\n  (click)=\"open()\"\n  #inputElement>\n<span class=\"ant-time-picker-icon\">\n  <i nz-icon type=\"clock-circle\"></i>\n</span>\n\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  [cdkConnectedOverlayPositions]=\"overlayPositions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"nzOpen\"\n  [cdkConnectedOverlayOffsetY]=\"-2\"\n  (detach)=\"close()\"\n  (backdropClick)=\"close()\">\n  <nz-time-picker-panel\n    [ngClass]=\"nzPopupClassName\"\n    [@dropDownAnimation]=\"'bottom'\"\n    [format]=\"nzFormat\"\n    [nzHourStep]=\"nzHourStep\"\n    [nzMinuteStep]=\"nzMinuteStep\"\n    [nzSecondStep]=\"nzSecondStep\"\n    [nzDisabledHours]=\"nzDisabledHours\"\n    [nzDisabledMinutes]=\"nzDisabledMinutes\"\n    [nzDisabledSeconds]=\"nzDisabledSeconds\"\n    [nzPlaceHolder]=\"nzPlaceHolder || ('TimePicker.placeholder' | nzI18n)\"\n    [nzHideDisabledOptions]=\"nzHideDisabledOptions\"\n    [nzDefaultOpenValue]=\"nzDefaultOpenValue\"\n    [nzAddOn]=\"nzAddOn\"\n    [opened]=\"nzOpen\"\n    [nzClearText]=\"nzClearText\"\n    [nzAllowEmpty]=\"nzAllowEmpty\"\n    (timeClear)=\"close()\"\n    [(ngModel)]=\"value\">\n  </nz-time-picker-panel>\n</ng-template>\n\n",
                        animations: [
                            animations.trigger('dropDownAnimation', [
                                animations.state('void', animations.style({
                                    opacity: 0,
                                    display: 'none'
                                })),
                                animations.state('*', animations.style({
                                    opacity: 1,
                                    transform: 'scaleY(1)',
                                    transformOrigin: '0% 0%'
                                })),
                                animations.transition('void => *', [
                                    animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 0%'
                                    }),
                                    animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')
                                ]),
                                animations.transition('* => void', [
                                    animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 0%'
                                    }))
                                ])
                            ])
                        ],
                        providers: [
                            NzUpdateHostClassService,
                            { provide: forms.NG_VALUE_ACCESSOR, useExisting: NzTimePickerComponent, multi: true }
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzTimePickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: i2$1.Overlay },
                { type: i2$1.OverlayPositionBuilder },
                { type: NzI18nService },
                { type: NzUpdateHostClassService }
            ];
        };
        NzTimePickerComponent.propDecorators = {
            inputRef: [{ type: i0.ViewChild, args: ['inputElement',] }],
            nzSize: [{ type: i0.Input }],
            nzHourStep: [{ type: i0.Input }],
            nzMinuteStep: [{ type: i0.Input }],
            nzSecondStep: [{ type: i0.Input }],
            nzClearText: [{ type: i0.Input }],
            nzPopupClassName: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            nzAddOn: [{ type: i0.Input }],
            nzDefaultOpenValue: [{ type: i0.Input }],
            nzDisabledHours: [{ type: i0.Input }],
            nzDisabledMinutes: [{ type: i0.Input }],
            nzDisabledSeconds: [{ type: i0.Input }],
            nzFormat: [{ type: i0.Input }],
            nzOpen: [{ type: i0.Input }],
            nzOpenChange: [{ type: i0.Output }],
            nzHideDisabledOptions: [{ type: i0.Input }],
            nzAllowEmpty: [{ type: i0.Input }],
            nzAutoFocus: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }]
        };
        return NzTimePickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTimePickerModule = /** @class */ (function () {
        function NzTimePickerModule() {
        }
        NzTimePickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            NzTimePickerComponent,
                            NzTimePickerPanelComponent,
                            NzTimeValueAccessorDirective
                        ],
                        exports: [
                            NzTimePickerPanelComponent,
                            NzTimePickerComponent
                        ],
                        imports: [i3.CommonModule, forms.FormsModule, NzI18nModule, i2$1.OverlayModule, NzIconModule],
                        entryComponents: []
                    },] }
        ];
        return NzTimePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarFooterComponent = /** @class */ (function () {
        function CalendarFooterComponent() {
            this.showToday = false;
            this.hasTimePicker = false;
            this.isRange = false;
            this.showTimePicker = false;
            this.showTimePickerChange = new i0.EventEmitter();
            // @Input() disabled: boolean = false;
            this.timePickerDisabled = false;
            this.okDisabled = false;
            this.clickOk = new i0.EventEmitter();
            this.clickToday = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar';
            this.isTemplateRef = isTemplateRef;
            this.isNonEmptyString = isNonEmptyString;
        }
        CalendarFooterComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-footer',
                        template: "<div class=\"{{ prefixCls }}-footer {{ isRange ? prefixCls + '-range-bottom' : '' }} {{ hasTimePicker ? prefixCls + '-footer-show-ok' : '' }}\">\n  <div *ngIf=\"rangeQuickSelector\" class=\"{{ prefixCls }}-footer-extra {{ prefixCls }}-range-quick-selector\">\n    <ng-container *ngTemplateOutlet=\"rangeQuickSelector\"></ng-container>\n  </div>\n  <div *ngIf=\"extraFooter\" class=\"{{ prefixCls }}-footer-extra {{ isRange ? prefixCls + '-range-quick-selector' : '' }}\">\n    <ng-container [ngSwitch]=\"true\">\n      <ng-container *ngSwitchCase=\"isTemplateRef(extraFooter)\">\n        <ng-container *ngTemplateOutlet=\"extraFooter\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"isNonEmptyString(extraFooter)\">\n        <span [innerHTML]=\"extraFooter\"></span>\n      </ng-container>\n    </ng-container>\n  </div>\n  <span *ngIf=\"showToday || hasTimePicker\" class=\"{{ prefixCls }}-footer-btn\">\n    <today-button\n      *ngIf=\"showToday\"\n      [locale]=\"locale\"\n      [disabledDate]=\"disabledDate\"\n      [hasTimePicker]=\"hasTimePicker\"\n      (clickToday)=\"clickToday.emit($event)\"\n    ></today-button>\n    <time-picker-button\n      *ngIf=\"hasTimePicker\"\n      [locale]=\"locale\"\n      [timePickerDisabled]=\"timePickerDisabled\"\n      [showTimePicker]=\"showTimePicker\"\n      (showTimePickerChange)=\"showTimePickerChange.emit($event)\"\n    ></time-picker-button>\n    <ok-button\n      *ngIf=\"hasTimePicker\"\n      [okDisabled]=\"okDisabled\"\n      [locale]=\"locale\"\n      (clickOk)=\"clickOk.emit()\"\n    ></ok-button>\n  </span>\n</div>"
                    }] }
        ];
        CalendarFooterComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            showToday: [{ type: i0.Input }],
            hasTimePicker: [{ type: i0.Input }],
            isRange: [{ type: i0.Input }],
            showTimePicker: [{ type: i0.Input }],
            showTimePickerChange: [{ type: i0.Output }],
            timePickerDisabled: [{ type: i0.Input }],
            okDisabled: [{ type: i0.Input }],
            disabledDate: [{ type: i0.Input }],
            extraFooter: [{ type: i0.Input }],
            rangeQuickSelector: [{ type: i0.Input }],
            clickOk: [{ type: i0.Output }],
            clickToday: [{ type: i0.Output }]
        };
        return CalendarFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * [Temporary] Get the first day of week depend on locale (0-6 represent as Sunday-Saturday)
     * @param {?=} locale Locale code
     * @return {?}
     */
    function firstDayOfWeek(locale) {
        return locale && ['zh-cn', 'zh-tw'].indexOf(locale.toLowerCase()) > -1 ? 1 : 0;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Wrapping kind APIs for date operating and unify
     * NOTE: every new API return new CandyDate object without side effects to the former Date object
     * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)
     * TODO: support format() against to angular's core API
     */
    var /**
     * Wrapping kind APIs for date operating and unify
     * NOTE: every new API return new CandyDate object without side effects to the former Date object
     * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)
     * TODO: support format() against to angular's core API
     */ CandyDate = /** @class */ (function () {
        // locale: string; // Custom specified locale ID
        function CandyDate(date) {
            // if (!(this instanceof CandyDate)) {
            //   return new CandyDate(date);
            // }
            if (date) {
                if (date instanceof Date) {
                    this.nativeDate = date;
                }
                else if (typeof date === 'string') {
                    this.nativeDate = new Date(date);
                }
                else {
                    throw new Error('The input date type is not supported ("Date" and "string" is now recommended)');
                }
            }
            else {
                this.nativeDate = new Date();
            }
        }
        // getLocale(): string {
        //   return this.locale;
        // }
        // setLocale(locale: string): CandyDate {
        //   this.locale = locale;
        //   return this;
        // }
        // ---------------------------------------------------------------------
        // | Native shortcuts
        // ---------------------------------------------------------------------
        /**
         * @return {?}
         */
        CandyDate.prototype.getYear = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getFullYear();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getMonth = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getMonth();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getDay = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getDay();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getTime = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getTime();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getDate = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getDate();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getHours = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getHours();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getMinutes = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getMinutes();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getSeconds = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getSeconds();
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.getMilliseconds = /**
         * @return {?}
         */
            function () {
                return this.nativeDate.getMilliseconds();
            };
        // ---------------------------------------------------------------------
        // | New implementing APIs
        // ---------------------------------------------------------------------
        /**
         * @return {?}
         */
        CandyDate.prototype.clone = /**
         * @return {?}
         */
            function () {
                return new CandyDate(new Date(this.nativeDate));
            };
        /**
         * @param {?} hour
         * @param {?} minute
         * @param {?} second
         * @return {?}
         */
        CandyDate.prototype.setHms = /**
         * @param {?} hour
         * @param {?} minute
         * @param {?} second
         * @return {?}
         */
            function (hour, minute, second) {
                /** @type {?} */
                var date = new Date(this.nativeDate);
                date.setHours(hour, minute, second);
                return new CandyDate(date);
            };
        /**
         * @param {?} year
         * @return {?}
         */
        CandyDate.prototype.setYear = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                /** @type {?} */
                var date = new Date(this.nativeDate);
                date.setFullYear(year);
                return new CandyDate(date);
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        CandyDate.prototype.addYears = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                return new CandyDate(addYears(this.nativeDate, amount));
            };
        // NOTE: month starts from 0
        // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28
        /**
         * @param {?} month
         * @return {?}
         */
        CandyDate.prototype.setMonth = /**
         * @param {?} month
         * @return {?}
         */
            function (month) {
                // const date = new Date(this.nativeDate);
                // date.setMonth(month);
                // return new CandyDate(date);
                return new CandyDate(setMonth(this.nativeDate, month));
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        CandyDate.prototype.addMonths = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                return new CandyDate(addMonths(this.nativeDate, amount));
            };
        /**
         * @param {?} day
         * @param {?=} options
         * @return {?}
         */
        CandyDate.prototype.setDay = /**
         * @param {?} day
         * @param {?=} options
         * @return {?}
         */
            function (day, options) {
                return new CandyDate(setDay(this.nativeDate, day, options));
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        CandyDate.prototype.setDate = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                /** @type {?} */
                var date = new Date(this.nativeDate);
                date.setDate(amount);
                return new CandyDate(date);
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        CandyDate.prototype.addDays = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                return this.setDate(this.getDate() + amount);
            };
        /**
         * @param {?} grain
         * @return {?}
         */
        CandyDate.prototype.endOf = /**
         * @param {?} grain
         * @return {?}
         */
            function (grain) {
                switch (grain) {
                    case 'month': return new CandyDate(endOfMonth(this.nativeDate));
                }
                return null;
            };
        /**
         * @param {?} date
         * @param {?} grain
         * @return {?}
         */
        CandyDate.prototype.isSame = /**
         * @param {?} date
         * @param {?} grain
         * @return {?}
         */
            function (date, grain) {
                // TODO: Precipitate into a function "compare()"
                if (date) {
                    /** @type {?} */
                    var left = this.toNativeDate();
                    /** @type {?} */
                    var right = this.toNativeDate(date);
                    switch (grain) {
                        case 'year':
                            return left.getFullYear() === right.getFullYear();
                        case 'month':
                            return left.getFullYear() === right.getFullYear()
                                && left.getMonth() === right.getMonth();
                        case 'day':
                            return left.getFullYear() === right.getFullYear()
                                && left.getMonth() === right.getMonth()
                                && left.getDate() === right.getDate();
                        case 'hour':
                            return left.getFullYear() === right.getFullYear()
                                && left.getMonth() === right.getMonth()
                                && left.getDate() === right.getDate()
                                && left.getHours() === right.getHours();
                        case 'minute':
                            return left.getFullYear() === right.getFullYear()
                                && left.getMonth() === right.getMonth()
                                && left.getDate() === right.getDate()
                                && left.getHours() === right.getHours()
                                && left.getMinutes() === right.getMinutes();
                        case 'second':
                            return left.getFullYear() === right.getFullYear()
                                && left.getMonth() === right.getMonth()
                                && left.getDate() === right.getDate()
                                && left.getHours() === right.getHours()
                                && left.getMinutes() === right.getMinutes()
                                && left.getSeconds() === right.getSeconds();
                    }
                }
                return false;
            };
        /**
         * @param {?} date
         * @param {?} grain
         * @return {?}
         */
        CandyDate.prototype.isAfter = /**
         * @param {?} date
         * @param {?} grain
         * @return {?}
         */
            function (date, grain) {
                // TODO: Precipitate into a function "compare()"
                if (date) {
                    /** @type {?} */
                    var left = this.toNativeDate();
                    /** @type {?} */
                    var right = this.toNativeDate(date);
                    switch (grain) {
                        case 'year':
                            return left.getFullYear() > right.getFullYear();
                        case 'month':
                            return (left.getFullYear() > right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth());
                        case 'day':
                            return (left.getFullYear() > right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate());
                        case 'hour':
                            return (left.getFullYear() > right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() > right.getHours());
                        case 'minute':
                            return (left.getFullYear() > right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() > right.getHours())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() > right.getMinutes());
                        case 'second':
                            return (left.getFullYear() > right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() > right.getHours())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() > right.getMinutes())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() === right.getMinutes() && left.getSeconds() > right.getSeconds());
                    }
                }
                return false;
            };
        /**
         * @param {?} date
         * @param {?} grain
         * @return {?}
         */
        CandyDate.prototype.isBefore = /**
         * @param {?} date
         * @param {?} grain
         * @return {?}
         */
            function (date, grain) {
                // TODO: Precipitate into a function "compare()"
                if (date) {
                    /** @type {?} */
                    var left = this.toNativeDate();
                    /** @type {?} */
                    var right = this.toNativeDate(date);
                    switch (grain) {
                        case 'year':
                            return left.getFullYear() < right.getFullYear();
                        case 'month':
                            return (left.getFullYear() < right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth());
                        case 'day':
                            return (left.getFullYear() < right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate());
                        case 'hour':
                            return (left.getFullYear() < right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() < right.getHours());
                        case 'minute':
                            return (left.getFullYear() < right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() < right.getHours())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() < right.getMinutes());
                        case 'second':
                            return (left.getFullYear() < right.getFullYear())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() < right.getHours())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() < right.getMinutes())
                                || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() === right.getMinutes() && left.getSeconds() < right.getSeconds());
                    }
                }
                return false;
            };
        // Equal to today accurate to "day"
        /**
         * @return {?}
         */
        CandyDate.prototype.isToday = /**
         * @return {?}
         */
            function () {
                return this.isSame(new Date(), 'day');
            };
        /**
         * @return {?}
         */
        CandyDate.prototype.isInvalid = /**
         * @return {?}
         */
            function () {
                return isNaN(this.nativeDate.valueOf());
            };
        /**
         * 0-6 (Sunday to Saturday)
         */
        /**
         * 0-6 (Sunday to Saturday)
         * @param {?=} locale
         * @return {?}
         */
        CandyDate.prototype.firstDayOfWeek = /**
         * 0-6 (Sunday to Saturday)
         * @param {?=} locale
         * @return {?}
         */
            function (locale) {
                return firstDayOfWeek(locale);
            };
        /**
         * @param {?=} date
         * @return {?}
         */
        CandyDate.prototype.toNativeDate = /**
         * @param {?=} date
         * @return {?}
         */
            function (date) {
                if (date === void 0) {
                    date = this;
                }
                return date instanceof CandyDate ? date.nativeDate : date;
            };
        return CandyDate;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarHeaderComponent = /** @class */ (function () {
        function CalendarHeaderComponent(i18n) {
            this.i18n = i18n;
            this.enablePrev = true;
            this.enableNext = true;
            this.showTimePicker = false;
            this.valueChange = new i0.EventEmitter();
            this.panelModeChange = new i0.EventEmitter();
            this.chooseDecade = new i0.EventEmitter();
            this.chooseYear = new i0.EventEmitter();
            this.chooseMonth = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar';
            this.yearToMonth = false;
        }
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.value) {
                    this.value = new CandyDate(); // Show today by default
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CalendarHeaderComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["value"] || changes["showTimePicker"] || changes["panelMode"]) {
                    this.render();
                }
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.previousYear = /**
         * @return {?}
         */
            function () {
                this.gotoYear(-1);
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.nextYear = /**
         * @return {?}
         */
            function () {
                this.gotoYear(1);
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.previousMonth = /**
         * @return {?}
         */
            function () {
                this.gotoMonth(-1);
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.nextMonth = /**
         * @return {?}
         */
            function () {
                this.gotoMonth(1);
            };
        /**
         * @param {?} mode
         * @param {?=} value
         * @return {?}
         */
        CalendarHeaderComponent.prototype.changePanel = /**
         * @param {?} mode
         * @param {?=} value
         * @return {?}
         */
            function (mode, value) {
                this.panelModeChange.emit(mode);
                if (value) {
                    this.changeValueFromInside(value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CalendarHeaderComponent.prototype.onChooseDecade = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.changePanel('year', value);
                this.chooseDecade.emit(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CalendarHeaderComponent.prototype.onChooseYear = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.changePanel(this.yearToMonth ? 'month' : 'date', value);
                this.yearToMonth = false; // Clear
                this.chooseYear.emit(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CalendarHeaderComponent.prototype.onChooseMonth = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.changePanel('date', value);
                this.yearToMonth = false; // Clear
                this.chooseMonth.emit(value);
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.changeToMonthPanel = /**
         * @return {?}
         */
            function () {
                this.changePanel('month');
                this.yearToMonth = true;
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                if (this.value) {
                    this.yearMonthDaySelectors = this.createYearMonthDaySelectors();
                }
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        CalendarHeaderComponent.prototype.gotoMonth = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                this.changeValueFromInside(this.value.addMonths(amount));
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        CalendarHeaderComponent.prototype.gotoYear = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                this.changeValueFromInside(this.value.addYears(amount));
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CalendarHeaderComponent.prototype.changeValueFromInside = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.value !== value) {
                    this.value = value;
                    this.valueChange.emit(this.value);
                    this.render();
                }
            };
        /**
         * @param {?} localeFormat
         * @return {?}
         */
        CalendarHeaderComponent.prototype.formatDateTime = /**
         * @param {?} localeFormat
         * @return {?}
         */
            function (localeFormat) {
                return this.i18n.formatDateCompatible(this.value.nativeDate, localeFormat);
            };
        /**
         * @return {?}
         */
        CalendarHeaderComponent.prototype.createYearMonthDaySelectors = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var year;
                /** @type {?} */
                var month;
                /** @type {?} */
                var day;
                year = {
                    className: this.prefixCls + "-year-select",
                    title: this.locale.yearSelect,
                    onClick: function () { return _this.showTimePicker ? null : _this.changePanel('year'); },
                    label: this.formatDateTime(this.locale.yearFormat)
                };
                month = {
                    className: this.prefixCls + "-month-select",
                    title: this.locale.monthSelect,
                    onClick: function () { return _this.showTimePicker ? null : _this.changeToMonthPanel(); },
                    label: this.locale.monthFormat ? this.formatDateTime(this.locale.monthFormat) : this.i18n.formatDate(this.value.nativeDate, 'MMM')
                };
                if (this.showTimePicker) {
                    day = {
                        className: this.prefixCls + "-day-select",
                        label: this.formatDateTime(this.locale.dayFormat)
                    };
                }
                /** @type {?} */
                var result;
                if (this.locale.monthBeforeYear) {
                    result = [month, day, year];
                }
                else {
                    result = [year, month, day];
                }
                return result.filter(function (selector) { return !!selector; });
            };
        CalendarHeaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-header',
                        template: "<div class=\"{{ prefixCls }}-header\">\n  <div style=\"position: relative;\">\n    <a *ngIf=\"enablePrev && !showTimePicker\"\n      class=\"{{ prefixCls }}-prev-year-btn\"\n      role=\"button\"\n      (click)=\"previousYear()\"\n      title=\"{{ locale.previousYear }}\"\n    ></a>\n    <a *ngIf=\"enablePrev && !showTimePicker\"\n      class=\"{{ prefixCls }}-prev-month-btn\"\n      role=\"button\"\n      (click)=\"previousMonth()\"\n      title=\"{{ locale.previousMonth }}\"\n    ></a>\n\n    <span class=\"{{ prefixCls }}-{{ locale.monthBeforeYear ? 'my-select' : 'ym-select' }}\">\n      <ng-container *ngFor=\"let selector of yearMonthDaySelectors\">\n        <a class=\"{{ selector.className }}\"\n          role=\"button\"\n          (click)=\"selector.onClick ? selector.onClick() : null\"\n          title=\"{{ selector.title || null }}\"\n        >\n          {{ selector.label }}\n        </a>\n      </ng-container>\n    </span>\n\n    <a *ngIf=\"enableNext && !showTimePicker\"\n      class=\"{{ prefixCls }}-next-month-btn\"\n      role=\"button\"\n      (click)=\"nextMonth()\"\n      title=\"{{ locale.nextMonth }}\"\n    ></a>\n    <a *ngIf=\"enableNext && !showTimePicker\"\n      class=\"{{ prefixCls }}-next-year-btn\"\n      role=\"button\"\n      (click)=\"nextYear()\"\n      title=\"{{ locale.nextYear }}\"\n    ></a>\n  </div>\n\n  <ng-container [ngSwitch]=\"panelMode\">\n    <ng-container *ngSwitchCase=\"'decade'\">\n      <decade-panel\n        [locale]=\"locale\"\n        [value]=\"value\"\n        (valueChange)=\"onChooseDecade($event)\"\n      ></decade-panel>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'year'\">\n      <year-panel\n        [locale]=\"locale\"\n        [value]=\"value\"\n        (valueChange)=\"onChooseYear($event)\"\n        (decadePanelShow)=\"changePanel('decade')\"\n      ></year-panel>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'month'\">\n      <month-panel\n        [locale]=\"locale\"\n        [value]=\"value\"\n        [disabledDate]=\"disabledMonth\"\n        (valueChange)=\"onChooseMonth($event)\"\n        (yearPanelShow)=\"changePanel('year')\"\n      ></month-panel>\n    </ng-container>\n  </ng-container>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        CalendarHeaderComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        CalendarHeaderComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            enablePrev: [{ type: i0.Input }],
            enableNext: [{ type: i0.Input }],
            disabledMonth: [{ type: i0.Input }],
            showTimePicker: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            panelMode: [{ type: i0.Input }],
            panelModeChange: [{ type: i0.Output }],
            chooseDecade: [{ type: i0.Output }],
            chooseYear: [{ type: i0.Output }],
            chooseMonth: [{ type: i0.Output }]
        };
        return CalendarHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarInputComponent = /** @class */ (function () {
        function CalendarInputComponent(i18n) {
            this.i18n = i18n;
            this.valueChange = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar';
            this.invalidInputClass = '';
        }
        /**
         * @return {?}
         */
        CalendarInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} event
         * @return {?}
         */
        CalendarInputComponent.prototype.onInputKeyup = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var date = this.checkValidInputDate(event);
                if (!date || (this.disabledDate && this.disabledDate(date.nativeDate))) {
                    return;
                }
                if (!date.isSame(this.value, 'second')) { // Not same with original value
                    // Not same with original value
                    this.value = date;
                    this.valueChange.emit(this.value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CalendarInputComponent.prototype.toReadableInput = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value ? this.i18n.formatDateCompatible(value.nativeDate, this.format) : '';
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CalendarInputComponent.prototype.checkValidInputDate = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var input = ( /** @type {?} */(event.target)).value;
                /** @type {?} */
                var date = new CandyDate(input);
                this.invalidInputClass = '';
                if (date.isInvalid() || input !== this.toReadableInput(date)) { // Should also match the input format exactly
                    // Should also match the input format exactly
                    this.invalidInputClass = this.prefixCls + "-input-invalid";
                    return null;
                }
                return date;
            };
        CalendarInputComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-input',
                        template: "<div class=\"{{ prefixCls }}-input-wrap\">\n  <div class=\"{{ prefixCls }}-date-input-wrap\">\n    <input\n      class=\"{{ prefixCls }}-input {{ invalidInputClass }}\"\n      placeholder=\"{{ placeholder || locale.dateSelect }}\"\n      value=\"{{ toReadableInput(value) }}\"\n      (keyup)=\"onInputKeyup($event)\"\n    />\n  </div>\n  <a class=\"{{ prefixCls }}-clear-btn\" role=\"button\" title=\"{{ locale.clear }}\">\n    <!--<i nz-icon type=\"close\"></i>-->\n  </a>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        CalendarInputComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        CalendarInputComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            disabledDate: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }]
        };
        return CalendarInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var OkButtonComponent = /** @class */ (function () {
        function OkButtonComponent() {
            this.okDisabled = false;
            this.clickOk = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar';
        }
        OkButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ok-button',
                        template: "<a\n    class=\"{{ prefixCls }}-ok-btn {{ okDisabled ? prefixCls + '-ok-btn-disabled' : '' }}\"\n    role=\"button\"\n    (click)=\"okDisabled ? null : clickOk.emit()\"\n  >\n    {{ locale.ok }}\n  </a>"
                    }] }
        ];
        OkButtonComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            okDisabled: [{ type: i0.Input }],
            clickOk: [{ type: i0.Output }]
        };
        return OkButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TimePickerButtonComponent = /** @class */ (function () {
        function TimePickerButtonComponent() {
            this.timePickerDisabled = false;
            this.showTimePicker = false;
            this.showTimePickerChange = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar';
        }
        /**
         * @return {?}
         */
        TimePickerButtonComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                this.showTimePicker = !this.showTimePicker;
                this.showTimePickerChange.emit(this.showTimePicker);
            };
        TimePickerButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'time-picker-button',
                        template: "<a\n  class=\"{{ prefixCls }}-time-picker-btn {{ timePickerDisabled ? prefixCls + '-time-picker-btn-disabled' : '' }}\"\n  role=\"button\"\n  (click)=\"timePickerDisabled ? null : onClick()\"\n>\n  {{ showTimePicker ? locale.dateSelect : locale.timeSelect }}\n</a>"
                    }] }
        ];
        TimePickerButtonComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            timePickerDisabled: [{ type: i0.Input }],
            showTimePicker: [{ type: i0.Input }],
            showTimePickerChange: [{ type: i0.Output }]
        };
        return TimePickerButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TodayButtonComponent = /** @class */ (function () {
        function TodayButtonComponent(i18n) {
            this.i18n = i18n;
            this.hasTimePicker = false;
            this.clickToday = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar';
            this.isDisabled = false;
            this.now = new CandyDate();
        }
        Object.defineProperty(TodayButtonComponent.prototype, "title", {
            get: /**
             * @return {?}
             */ function () {
                return this.i18n.formatDate(this.now.nativeDate, 'longDate');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TodayButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        TodayButtonComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["disabledDate"]) {
                    this.isDisabled = this.disabledDate && this.disabledDate(this.now.nativeDate);
                }
            };
        /**
         * @return {?}
         */
        TodayButtonComponent.prototype.onClickToday = /**
         * @return {?}
         */
            function () {
                this.clickToday.emit(this.now.clone()); // To prevent the "now" being modified from outside, we use clone
            };
        TodayButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'today-button',
                        template: "<a\n  class=\"{{ prefixCls }}-today-btn {{ isDisabled ? prefixCls + '-today-btn-disabled' : '' }}\"\n  role=\"button\"\n  (click)=\"isDisabled ? null : onClickToday()\"\n  title=\"{{ title }}\"\n>\n  {{ hasTimePicker ? locale.now : locale.today }}\n</a>"
                    }] }
        ];
        /** @nocollapse */
        TodayButtonComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        TodayButtonComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            hasTimePicker: [{ type: i0.Input }],
            disabledDate: [{ type: i0.Input }],
            clickToday: [{ type: i0.Output }]
        };
        return TodayButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var DATE_ROW_NUM = 6;
    /** @type {?} */
    var DATE_COL_NUM = 7;
    var DateTableComponent = /** @class */ (function () {
        function DateTableComponent(i18n) {
            this.i18n = i18n;
            this.valueChange = new i0.EventEmitter();
            this.dayHover = new i0.EventEmitter(); // Emitted when hover on a day by mouse enter
            this.prefixCls = 'ant-calendar';
            this.isTemplateRef = isTemplateRef;
            this.isNonEmptyString = isNonEmptyString;
        }
        /**
         * @return {?}
         */
        DateTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        DateTableComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.isDateRealChange(changes["value"]) ||
                    this.isDateRealChange(changes["selectedValue"]) ||
                    this.isDateRealChange(changes["hoverValue"])) {
                    this.render();
                }
            };
        /**
         * @param {?} change
         * @return {?}
         */
        DateTableComponent.prototype.isDateRealChange = /**
         * @param {?} change
         * @return {?}
         */
            function (change) {
                var _this = this;
                if (change) {
                    /** @type {?} */
                    var previousValue_1 = change.previousValue;
                    /** @type {?} */
                    var currentValue = change.currentValue;
                    if (Array.isArray(currentValue)) {
                        return !Array.isArray(previousValue_1) ||
                            currentValue.length !== previousValue_1.length ||
                            currentValue.some(function (value, index) { return !_this.isSameDate(previousValue_1[index], value); });
                    }
                    else {
                        return !this.isSameDate(/** @type {?} */ (previousValue_1), currentValue);
                    }
                }
                return false;
            };
        /**
         * @param {?} left
         * @param {?} right
         * @return {?}
         */
        DateTableComponent.prototype.isSameDate = /**
         * @param {?} left
         * @param {?} right
         * @return {?}
         */
            function (left, right) {
                return (!left && !right) || (left && right && right.isSame(left, 'day'));
            };
        /**
         * @return {?}
         */
        DateTableComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                if (this.value) {
                    this.headWeekDays = this.makeHeadWeekDays();
                    this.weekRows = this.makeWeekRows();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateTableComponent.prototype.changeValueFromInside = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.value !== value) {
                    // this.value = value;
                    // this.valueChange.emit(this.value);
                    // this.render();
                    this.valueChange.emit(value);
                }
            };
        /**
         * @return {?}
         */
        DateTableComponent.prototype.makeHeadWeekDays = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var weekDays = [];
                /** @type {?} */
                var firstDayOfWeek = this.getFirstDayOfWeek();
                for (var colIndex = 0; colIndex < DATE_COL_NUM; colIndex++) {
                    /** @type {?} */
                    var day = (firstDayOfWeek + colIndex) % DATE_COL_NUM;
                    /** @type {?} */
                    var tempDate = this.value.setDay(day);
                    weekDays[colIndex] = {
                        short: this.i18n.formatDate(tempDate.nativeDate, 'E'),
                        // eg. Tue
                        veryShort: this.i18n.formatDate(tempDate.nativeDate, this.getVeryShortWeekFormat()) // eg. Tu
                    };
                }
                return weekDays;
            };
        /**
         * @return {?}
         */
        DateTableComponent.prototype.getVeryShortWeekFormat = /**
         * @return {?}
         */
            function () {
                return this.i18n.getLocaleId().toLowerCase().indexOf('zh') === 0 ? 'EEEEE' : 'EEEEEE'; // Use extreme short for chinese
            };
        /**
         * @return {?}
         */
        DateTableComponent.prototype.makeWeekRows = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var _a;
                /** @type {?} */
                var weekRows = [];
                /** @type {?} */
                var firstDayOfWeek = this.getFirstDayOfWeek();
                /** @type {?} */
                var firstDateOfMonth = this.value.setDate(1);
                /** @type {?} */
                var firstDateOffset = (firstDateOfMonth.getDay() + 7 - firstDayOfWeek) % 7;
                /** @type {?} */
                var firstDateToShow = firstDateOfMonth.addDays(0 - firstDateOffset);
                /** @type {?} */
                var increased = 0;
                for (var rowIndex = 0; rowIndex < DATE_ROW_NUM; rowIndex++) {
                    /** @type {?} */
                    var week = weekRows[rowIndex] = {
                        isActive: false,
                        isCurrent: false,
                        dateCells: []
                    };
                    var _loop_1 = function (colIndex) {
                        var _a;
                        /** @type {?} */
                        var current = firstDateToShow.addDays(increased++);
                        /** @type {?} */
                        var isBeforeMonthYear = this_1.isBeforeMonthYear(current, this_1.value);
                        /** @type {?} */
                        var isAfterMonthYear = this_1.isAfterMonthYear(current, this_1.value);
                        /** @type {?} */
                        var cell = {
                            value: current,
                            isSelected: false,
                            isDisabled: false,
                            isToday: false,
                            title: this_1.getDateTitle(current),
                            customContent: valueFunctionProp(this_1.dateRender, current),
                            // Customized content
                            content: "" + current.getDate(),
                            onClick: function () { return _this.changeValueFromInside(current); },
                            onMouseEnter: function () { return _this.dayHover.emit(cell.value); }
                        };
                        if (this_1.showWeek && !week.weekNum) {
                            week.weekNum = this_1.getWeekNum(current);
                        }
                        if (current.isToday()) {
                            cell.isToday = true;
                            week.isCurrent = true;
                        }
                        if (Array.isArray(this_1.selectedValue) && !isBeforeMonthYear && !isAfterMonthYear) { // Range selections
                            /** @type {?} */
                            var rangeValue = this_1.hoverValue && this_1.hoverValue.length ? this_1.hoverValue : this_1.selectedValue;
                            /** @type {?} */
                            var start = rangeValue[0];
                            /** @type {?} */
                            var end = rangeValue[1];
                            if (start) {
                                if (current.isSame(start, 'day')) {
                                    cell.isSelectedStartDate = true;
                                    cell.isSelected = true;
                                    week.isActive = true;
                                }
                                if (end) {
                                    if (current.isSame(end, 'day')) {
                                        cell.isSelectedEndDate = true;
                                        cell.isSelected = true;
                                        week.isActive = true;
                                    }
                                    else if (current.isAfter(start, 'day') && current.isBefore(end, 'day')) {
                                        cell.isInRange = true;
                                    }
                                }
                            }
                        }
                        else if (current.isSame(this_1.value, 'day')) {
                            cell.isSelected = true;
                            week.isActive = true;
                        }
                        if (this_1.disabledDate && this_1.disabledDate(current.nativeDate)) {
                            cell.isDisabled = true;
                        }
                        cell.classMap = (_a = {},
                            _a[this_1.prefixCls + "-cell"] = true,
                            // [`${this.prefixCls}-selected-date`]: false,
                            _a[this_1.prefixCls + "-today"] = cell.isToday,
                            _a[this_1.prefixCls + "-last-month-cell"] = isBeforeMonthYear,
                            _a[this_1.prefixCls + "-next-month-btn-day"] = isAfterMonthYear,
                            _a[this_1.prefixCls + "-selected-day"] = cell.isSelected,
                            _a[this_1.prefixCls + "-disabled-cell"] = cell.isDisabled,
                            _a[this_1.prefixCls + "-selected-start-date"] = !!cell.isSelectedStartDate,
                            _a[this_1.prefixCls + "-selected-end-date"] = !!cell.isSelectedEndDate,
                            _a[this_1.prefixCls + "-in-range-cell"] = !!cell.isInRange,
                            _a);
                        week.dateCells.push(cell);
                    };
                    var this_1 = this;
                    for (var colIndex = 0; colIndex < DATE_COL_NUM; colIndex++) {
                        _loop_1(colIndex);
                    }
                    week.classMap = (_a = {},
                        _a[this.prefixCls + "-current-week"] = week.isCurrent,
                        _a[this.prefixCls + "-active-week"] = week.isActive,
                        _a);
                }
                return weekRows;
            };
        /**
         * @return {?}
         */
        DateTableComponent.prototype.getFirstDayOfWeek = /**
         * @return {?}
         */
            function () {
                return this.value.firstDayOfWeek(this.i18n.getLocaleId());
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateTableComponent.prototype.getDateTitle = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.i18n.formatDate(date.nativeDate, 'longDate');
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateTableComponent.prototype.getWeekNum = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return +this.i18n.formatDate(date.nativeDate, 'w');
            };
        /**
         * @param {?} current
         * @param {?} target
         * @return {?}
         */
        DateTableComponent.prototype.isBeforeMonthYear = /**
         * @param {?} current
         * @param {?} target
         * @return {?}
         */
            function (current, target) {
                if (current.getYear() < target.getYear()) {
                    return true;
                }
                return current.getYear() === target.getYear() && current.getMonth() < target.getMonth();
            };
        /**
         * @param {?} current
         * @param {?} target
         * @return {?}
         */
        DateTableComponent.prototype.isAfterMonthYear = /**
         * @param {?} current
         * @param {?} target
         * @return {?}
         */
            function (current, target) {
                if (current.getYear() > target.getYear()) {
                    return true;
                }
                return current.getYear() === target.getYear() && current.getMonth() > target.getMonth();
            };
        DateTableComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'date-table',
                        template: "<table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n  <thead>\n    <tr role=\"row\">\n      <th *ngIf=\"showWeek\" role=\"columnheader\" class=\"{{ prefixCls }}-column-header {{ prefixCls }}-week-number-header\">\n        <span class=\"{{ prefixCls }}-column-header-inner\">x</span>\n      </th>\n      <th *ngFor=\"let cell of headWeekDays\"\n        role=\"columnheader\"\n        title=\"{{ cell.short }}\"\n        class=\"{{ prefixCls }}-column-header\"\n      >\n        <span class=\"{{ prefixCls }}-column-header-inner\">{{ cell.veryShort }}</span>\n      </th>\n    </tr>\n  </thead>\n  <tbody class=\"{{ prefixCls }}-tbody\">\n    <tr *ngFor=\"let row of weekRows\" [ngClass]=\"row.classMap\" role=\"row\">\n      <td *ngIf=\"row.weekNum\" role=\"gridcell\" class=\"{{ prefixCls }}-week-number-cell\">\n        {{ row.weekNum }}\n      </td>\n      <td\n        *ngFor=\"let cell of row.dateCells\"\n        (click)=\"cell.isDisabled ? null : cell.onClick()\"\n        (mouseenter)=\"cell.isDisabled ? null : cell.onMouseEnter()\"\n        title=\"{{ cell.title }}\"\n        [ngClass]=\"cell.classMap\"\n        role=\"gridcell\"\n      >\n\n        <ng-container [ngSwitch]=\"true\">\n          <ng-container *ngSwitchCase=\"isTemplateRef(cell.customContent)\">\n            <ng-container *ngTemplateOutlet=\"cell.customContent; context: { $implicit: cell.value }\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"isNonEmptyString(cell.customContent)\">\n            <span [innerHTML]=\"cell.customContent\"></span>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <div\n              class=\"{{ prefixCls }}-date\"\n              [attr.aria-selected]=\"cell.isSelected\"\n              [attr.aria-disabled]=\"cell.isDisabled\"\n            >\n              {{ cell.content }}\n            </div>\n          </ng-container>\n        </ng-container>\n\n      </td>\n    </tr>\n  </tbody>\n</table>"
                    }] }
        ];
        /** @nocollapse */
        DateTableComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        DateTableComponent.propDecorators = {
            selectedValue: [{ type: i0.Input }],
            hoverValue: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            showWeek: [{ type: i0.Input }],
            disabledDate: [{ type: i0.Input }],
            dateRender: [{ type: i0.Input }],
            dayHover: [{ type: i0.Output }]
        };
        return DateTableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var MAX_ROW = 4;
    /** @type {?} */
    var MAX_COL = 3;
    var DecadePanelComponent = /** @class */ (function () {
        function DecadePanelComponent() {
            this.valueChange = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar-decade-panel';
        }
        Object.defineProperty(DecadePanelComponent.prototype, "startYear", {
            get: /**
             * @return {?}
             */ function () {
                return parseInt("" + this.value.getYear() / 100, 10) * 100;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DecadePanelComponent.prototype, "endYear", {
            get: /**
             * @return {?}
             */ function () {
                return this.startYear + 99;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        DecadePanelComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["value"]) {
                    this.render();
                }
            };
        /**
         * @return {?}
         */
        DecadePanelComponent.prototype.previousCentury = /**
         * @return {?}
         */
            function () {
                this.gotoYear(-100);
            };
        /**
         * @return {?}
         */
        DecadePanelComponent.prototype.nextCentury = /**
         * @return {?}
         */
            function () {
                this.gotoYear(100);
            };
        /**
         * @param {?} index
         * @param {?} decadeData
         * @return {?}
         */
        DecadePanelComponent.prototype.trackPanelDecade = /**
         * @param {?} index
         * @param {?} decadeData
         * @return {?}
         */
            function (index, decadeData) {
                return decadeData.content;
            };
        /**
         * @return {?}
         */
        DecadePanelComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                if (this.value) {
                    this.panelDecades = this.makePanelDecades();
                }
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        DecadePanelComponent.prototype.gotoYear = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                this.value = this.value.addYears(amount);
                // this.valueChange.emit(this.value); // Do not try to trigger final value change
                this.render();
            };
        /**
         * @param {?} startYear
         * @return {?}
         */
        DecadePanelComponent.prototype.chooseDecade = /**
         * @param {?} startYear
         * @return {?}
         */
            function (startYear) {
                this.value = this.value.setYear(startYear);
                this.valueChange.emit(this.value);
            };
        /**
         * @return {?}
         */
        DecadePanelComponent.prototype.makePanelDecades = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var decades = [];
                /** @type {?} */
                var currentYear = this.value.getYear();
                /** @type {?} */
                var startYear = this.startYear;
                /** @type {?} */
                var endYear = this.endYear;
                /** @type {?} */
                var previousYear = startYear - 10;
                /** @type {?} */
                var index = 0;
                for (var rowIndex = 0; rowIndex < MAX_ROW; rowIndex++) {
                    decades[rowIndex] = [];
                    var _loop_1 = function (colIndex) {
                        var _a;
                        /** @type {?} */
                        var start = previousYear + index * 10;
                        /** @type {?} */
                        var end = previousYear + index * 10 + 9;
                        /** @type {?} */
                        var content = start + "-" + end;
                        /** @type {?} */
                        var cell = decades[rowIndex][colIndex] = {
                            content: content,
                            title: content,
                            isCurrent: currentYear >= start && currentYear <= end,
                            isLowerThanStart: end < startYear,
                            isBiggerThanEnd: start > endYear,
                            classMap: null,
                            onClick: null
                        };
                        cell.classMap = (_a = {},
                            _a[this_1.prefixCls + "-cell"] = true,
                            _a[this_1.prefixCls + "-selected-cell"] = cell.isCurrent,
                            _a[this_1.prefixCls + "-last-century-cell"] = cell.isLowerThanStart,
                            _a[this_1.prefixCls + "-next-century-cell"] = cell.isBiggerThanEnd,
                            _a);
                        if (cell.isLowerThanStart) {
                            cell.onClick = function () { return _this.previousCentury(); };
                        }
                        else if (cell.isBiggerThanEnd) {
                            cell.onClick = function () { return _this.nextCentury(); };
                        }
                        else {
                            cell.onClick = function () { return _this.chooseDecade(start); };
                        }
                        index++;
                    };
                    var this_1 = this;
                    for (var colIndex = 0; colIndex < MAX_COL; colIndex++) {
                        _loop_1(colIndex);
                    }
                }
                return decades;
            };
        DecadePanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'decade-panel',
                        template: "<div class=\"{{ prefixCls }}\">\n  <div class=\"{{ prefixCls }}-header\">\n    <a\n      class=\"{{ prefixCls }}-prev-century-btn\"\n      role=\"button\"\n      (click)=\"previousCentury()\"\n      title=\"{{ locale.previousCentury }}\"\n    ></a>\n\n    <div class=\"{{ prefixCls }}-century\">\n      {{ startYear }}-{{ endYear }}\n    </div>\n    <a\n      class=\"{{ prefixCls }}-next-century-btn\"\n      role=\"button\"\n      (click)=\"nextCentury()\"\n      title=\"{{ locale.nextCentury }}\"\n    ></a>\n  </div>\n  <div class=\"{{ prefixCls }}-body\">\n    <table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n      <tbody class=\"{{ prefixCls }}-tbody\">\n        <tr *ngFor=\"let row of panelDecades\" role=\"row\">\n          <td *ngFor=\"let cell of row; trackBy: trackPanelDecade\"\n            role=\"gridcell\"\n            title=\"{{ cell.title }}\"\n            (click)=\"cell.onClick()\"\n            [ngClass]=\"cell.classMap\"\n          >\n            <a class=\"{{ prefixCls }}-decade\">{{ cell.content }}</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        DecadePanelComponent.ctorParameters = function () { return []; };
        DecadePanelComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }]
        };
        return DecadePanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MonthPanelComponent = /** @class */ (function () {
        function MonthPanelComponent() {
            this.valueChange = new i0.EventEmitter();
            this.yearPanelShow = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar-month-panel';
        }
        /**
         * @return {?}
         */
        MonthPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        MonthPanelComponent.prototype.previousYear = /**
         * @return {?}
         */
            function () {
                this.gotoYear(-1);
            };
        /**
         * @return {?}
         */
        MonthPanelComponent.prototype.nextYear = /**
         * @return {?}
         */
            function () {
                this.gotoYear(1);
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        MonthPanelComponent.prototype.gotoYear = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                this.value = this.value.addYears(amount);
                // this.valueChange.emit(this.value); // Do not try to trigger final value change
            };
        MonthPanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'month-panel',
                        template: "<div class=\"{{ prefixCls }}\">\n  <div>\n    <div class=\"{{ prefixCls }}-header\">\n      <a\n        class=\"{{ prefixCls }}-prev-year-btn\"\n        role=\"button\"\n        (click)=\"previousYear()\"\n        title=\"{{ locale.previousYear }}\"\n      ></a>\n\n      <a\n        class=\"{{ prefixCls }}-year-select\"\n        role=\"button\"\n        (click)=\"yearPanelShow.emit()\"\n        title=\"{{ locale.yearSelect }}\"\n      >\n        <span class=\"{{ prefixCls }}-year-select-content\">{{ value.getYear() }}</span>\n        <span class=\"{{ prefixCls }}-year-select-arrow\">x</span>\n      </a>\n\n      <a\n        class=\"{{ prefixCls }}-next-year-btn\"\n        role=\"button\"\n        (click)=\"nextYear()\"\n        title=\"{{ locale.nextYear }}\"\n      ></a>\n    </div>\n    <div class=\"{{ prefixCls }}-body\">\n      <month-table [disabledDate]=\"disabledDate\" [value]=\"value\" (valueChange)=\"valueChange.emit($event)\"></month-table>\n    </div>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        MonthPanelComponent.ctorParameters = function () { return []; };
        MonthPanelComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            disabledDate: [{ type: i0.Input }],
            yearPanelShow: [{ type: i0.Output }]
        };
        return MonthPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var MAX_ROW$1 = 4;
    /** @type {?} */
    var MAX_COL$1 = 3;
    var MonthTableComponent = /** @class */ (function () {
        function MonthTableComponent(i18n) {
            this.i18n = i18n;
            this.valueChange = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar-month-panel';
        }
        /**
         * @return {?}
         */
        MonthTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        MonthTableComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["value"] || changes["disabledDate"]) {
                    this.render();
                }
            };
        /**
         * @param {?} index
         * @param {?} monthData
         * @return {?}
         */
        MonthTableComponent.prototype.trackPanelMonth = /**
         * @param {?} index
         * @param {?} monthData
         * @return {?}
         */
            function (index, monthData) {
                return monthData.month;
            };
        /**
         * @return {?}
         */
        MonthTableComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                if (this.value) {
                    this.panelMonths = this.makePanelMonths();
                }
            };
        /**
         * @return {?}
         */
        MonthTableComponent.prototype.makePanelMonths = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var months = [];
                /** @type {?} */
                var currentMonth = this.value.getMonth();
                /** @type {?} */
                var today = new CandyDate();
                /** @type {?} */
                var monthValue = 0;
                for (var rowIndex = 0; rowIndex < MAX_ROW$1; rowIndex++) {
                    months[rowIndex] = [];
                    var _loop_1 = function (colIndex) {
                        var _a;
                        /** @type {?} */
                        var month = this_1.value.setMonth(monthValue);
                        /** @type {?} */
                        var disabled = this_1.disabledDate ? this_1.disabledDate(this_1.value.setMonth(monthValue).nativeDate) : false;
                        /** @type {?} */
                        var content = this_1.i18n.formatDateCompatible(month.nativeDate, 'MMM');
                        /** @type {?} */
                        var cell = months[rowIndex][colIndex] = {
                            disabled: disabled,
                            content: content,
                            month: monthValue,
                            title: content,
                            classMap: null,
                            onClick: function () { return _this.chooseMonth(cell.month); }
                        };
                        cell.classMap = (_a = {},
                            _a[this_1.prefixCls + "-cell"] = true,
                            _a[this_1.prefixCls + "-cell-disabled"] = disabled,
                            _a[this_1.prefixCls + "-selected-cell"] = cell.month === currentMonth,
                            _a[this_1.prefixCls + "-current-cell"] = today.getYear() === this_1.value.getYear() && cell.month === today.getMonth(),
                            _a);
                        monthValue++;
                    };
                    var this_1 = this;
                    for (var colIndex = 0; colIndex < MAX_COL$1; colIndex++) {
                        _loop_1(colIndex);
                    }
                }
                return months;
            };
        /**
         * @param {?} month
         * @return {?}
         */
        MonthTableComponent.prototype.chooseMonth = /**
         * @param {?} month
         * @return {?}
         */
            function (month) {
                this.value = this.value.setMonth(month);
                this.valueChange.emit(this.value);
                this.render();
            };
        MonthTableComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'month-table',
                        template: "<table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n  <tbody class=\"{{ prefixCls }}-tbody\">\n    <tr *ngFor=\"let row of panelMonths\" role=\"row\">\n      <td *ngFor=\"let monthCell of row; trackBy: trackPanelMonth\"\n        role=\"gridcell\"\n        title=\"{{ monthCell.title }}\"\n        (click)=\"monthCell.disabled ? null : monthCell.onClick()\"\n        [ngClass]=\"monthCell.classMap\"\n      >\n        <a class=\"{{ prefixCls }}-month\">{{ monthCell.content }}</a>\n      </td>\n    </tr>\n  </tbody>\n</table>"
                    }] }
        ];
        /** @nocollapse */
        MonthTableComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        MonthTableComponent.propDecorators = {
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            disabledDate: [{ type: i0.Input }]
        };
        return MonthTableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var defaultDisabledTime = {
        nzDisabledHours: /**
         * @return {?}
         */ function () {
            return [];
        },
        nzDisabledMinutes: /**
         * @return {?}
         */ function () {
            return [];
        },
        nzDisabledSeconds: /**
         * @return {?}
         */ function () {
            return [];
        }
    };
    /**
     * @param {?} value
     * @param {?} disabledTime
     * @return {?}
     */
    function getTimeConfig(value, disabledTime) {
        /** @type {?} */
        var disabledTimeConfig = disabledTime ? disabledTime(value && value.nativeDate) : /** @type {?} */ ({});
        disabledTimeConfig = __assign({}, defaultDisabledTime, disabledTimeConfig);
        return disabledTimeConfig;
    }
    /**
     * @param {?} value
     * @param {?} disabledTimeConfig
     * @return {?}
     */
    function isTimeValidByConfig(value, disabledTimeConfig) {
        /** @type {?} */
        var invalidTime = false;
        if (value) {
            /** @type {?} */
            var hour = value.getHours();
            /** @type {?} */
            var minutes = value.getMinutes();
            /** @type {?} */
            var seconds = value.getSeconds();
            /** @type {?} */
            var disabledHours = disabledTimeConfig.nzDisabledHours();
            if (disabledHours.indexOf(hour) === -1) {
                /** @type {?} */
                var disabledMinutes = disabledTimeConfig.nzDisabledMinutes(hour);
                if (disabledMinutes.indexOf(minutes) === -1) {
                    /** @type {?} */
                    var disabledSeconds = disabledTimeConfig.nzDisabledSeconds(hour, minutes);
                    invalidTime = disabledSeconds.indexOf(seconds) !== -1;
                }
                else {
                    invalidTime = true;
                }
            }
            else {
                invalidTime = true;
            }
        }
        return !invalidTime;
    }
    /**
     * @param {?} value
     * @param {?} disabledTime
     * @return {?}
     */
    function isTimeValid(value, disabledTime) {
        /** @type {?} */
        var disabledTimeConfig = getTimeConfig(value, disabledTime);
        return isTimeValidByConfig(value, disabledTimeConfig);
    }
    /**
     * @param {?} value
     * @param {?=} disabledDate
     * @param {?=} disabledTime
     * @return {?}
     */
    function isAllowedDate(value, disabledDate, disabledTime) {
        if (disabledDate) {
            if (disabledDate(value.nativeDate)) {
                return false;
            }
        }
        if (disabledTime) {
            if (!isTimeValid(value, disabledTime)) {
                return false;
            }
        }
        return true;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DateRangePopupComponent = /** @class */ (function () {
        function DateRangePopupComponent() {
            var _this = this;
            this.panelModeChange = new i0.EventEmitter();
            this.valueChange = new i0.EventEmitter();
            this.resultOk = new i0.EventEmitter(); // Emitted when done with date selecting
            this.closePicker = new i0.EventEmitter(); // Notify outside to close the picker panel
            // @Output() selectDate = new EventEmitter<CandyDate>(); // Emitted when the date is selected by click the date panel (if isRange, the returned date is from one of the range parts)
            this.prefixCls = 'ant-calendar';
            this.showTimePicker = false;
            this.partTypeMap = { 'left': 0, 'right': 1 };
            this.disabledStartTime = function (value) {
                return _this.disabledTime && _this.disabledTime(value, 'start');
            };
            this.disabledEndTime = function (value) {
                return _this.disabledTime && _this.disabledTime(value, 'end');
            };
        }
        Object.defineProperty(DateRangePopupComponent.prototype, "hasTimePicker", {
            // initialValue: CandyDate = new CandyDate(); // Initial date to show when no value inputs
            // get valueOrInitial(): CandyDate {
            //   return this.value || this.initialValue;
            // }
            get: /**
             * @return {?}
             */ function () {
                return !!this.showTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateRangePopupComponent.prototype, "hasFooter", {
            get: /**
             * @return {?}
             */ function () {
                return this.showToday || this.hasTimePicker || !!this.extraFooter || !!this.ranges;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Initialization for range properties to prevent errors while later assignment
                if (this.isRange) {
                    ['placeholder', 'panelMode', 'selectedValue', 'hoverValue'].forEach(function (prop) { return _this.initialArray(prop); });
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DateRangePopupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.isRange) {
                    if (changes["value"]) { // Re-initialize all related values
                        // Re-initialize all related values
                        this.clearHoverValue();
                        this.selectedValue = /** @type {?} */ (this.value);
                        this.valueForRangeShow = this.normalizeRangeValue(/** @type {?} */ (this.value));
                    }
                }
                // Parse showTime options
                if (changes["showTime"] || changes["disabledTime"]) {
                    if (this.showTime) {
                        this.buildTimeOptions();
                    }
                }
                // Show time picker when assigned panel mode as "time"
                if (changes["panelMode"] && this.hasTimePicker) {
                    this.showTimePicker = this.panelMode === 'time';
                }
            };
        /**
         * @param {?} show
         * @return {?}
         */
        DateRangePopupComponent.prototype.onShowTimePickerChange = /**
         * @param {?} show
         * @return {?}
         */
            function (show) {
                // this.panelMode = show ? 'time' : 'date';
                // this.panelModeChange.emit(this.panelMode);
                this.panelModeChange.emit(show ? 'time' : 'date');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.onClickToday = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                // if (this.isRange) { // Show today is not support by range
                //   throw new Error('"nzShowToday" is not support for "RangePicker"!');
                // } else {
                if (!this.isRange) {
                    this.value = null; // Clear current value to not sync time by next step
                    this.changeValue(value);
                }
                this.closePickerPanel();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.onDayHover = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.isRange && this.selectedValue[0] && !this.selectedValue[1]) { // When right value is selected, don't do hover
                    /** @type {?} */
                    var base = this.selectedValue[0]; // Use the left of selected value as the base to decide later hoverValue
                    if (base.isBefore(value, 'day')) {
                        this.hoverValue = [base, value];
                    }
                    else {
                        this.hoverValue = [value, base];
                    }
                }
            };
        /**
         * @param {?} mode
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.onPanelModeChange = /**
         * @param {?} mode
         * @param {?=} partType
         * @return {?}
         */
            function (mode, partType) {
                if (this.isRange) {
                    ( /** @type {?} */(this.panelMode))[this.getPartTypeIndex(partType)] = mode;
                }
                else {
                    this.panelMode = mode;
                }
                this.panelModeChange.emit(this.panelMode);
            };
        /**
         * @param {?} value
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.onHeaderChange = /**
         * @param {?} value
         * @param {?=} partType
         * @return {?}
         */
            function (value, partType) {
                if (this.isRange) {
                    this.valueForRangeShow[this.getPartTypeIndex(partType)] = value;
                    this.valueForRangeShow = this.normalizeRangeValue(this.valueForRangeShow); // Should always take care of start/end
                }
            };
        /**
         * @param {?} value
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.onSelectTime = /**
         * @param {?} value
         * @param {?=} partType
         * @return {?}
         */
            function (value, partType) {
                if (this.isRange) {
                    /** @type {?} */
                    var newValue = this.cloneRangeDate(/** @type {?} */ (this.value));
                    /** @type {?} */
                    var index = this.getPartTypeIndex(partType);
                    newValue[index] = this.overrideHms(value, newValue[index]);
                    this.setValue(newValue);
                }
                else {
                    this.setValue(this.overrideHms(value, ( /** @type {?} */(this.value)) || new CandyDate())); // If not select a date currently, use today
                }
            };
        /**
         * @param {?} value
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.changeValue = /**
         * @param {?} value
         * @param {?=} partType
         * @return {?}
         */
            function (value, partType) {
                if (this.isRange) {
                    /** @type {?} */
                    var index = this.getPartTypeIndex(partType);
                    this.selectedValue[index] = value;
                    if (this.isValidRange(this.selectedValue)) {
                        this.valueForRangeShow = this.normalizeRangeValue(this.selectedValue);
                        this.setValue(this.cloneRangeDate(this.selectedValue));
                    }
                }
                else {
                    this.setValue(value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.changeValueFromSelect = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.isRange) {
                    var _a = __read(/** @type {?} */ (this.selectedValue), 2), left = _a[0], right = _a[1]; // NOTE: the left/right maybe not the sequence it select at the date panels
                    if ((!left && !right) || (left && right)) { // If totally full or empty, clean up && re-assign left first
                        // If totally full or empty, clean up && re-assign left first
                        this.hoverValue = this.selectedValue = [value];
                    }
                    else if (left && !right) { // If one of them is empty, assign the other one and sort, then set the final values
                        // If one of them is empty, assign the other one and sort, then set the final values
                        this.clearHoverValue(); // Clean up
                        this.setRangeValue('selectedValue', 'right', value);
                        this.sortRangeValue('selectedValue'); // Sort
                        this.valueForRangeShow = this.normalizeRangeValue(this.selectedValue);
                        this.setValue(this.cloneRangeDate(this.selectedValue));
                    }
                }
                else {
                    this.setValue(value);
                }
                // this.selectDate.emit(value);
            };
        /**
         * @param {?} direction
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.enablePrevNext = /**
         * @param {?} direction
         * @param {?=} partType
         * @return {?}
         */
            function (direction, partType) {
                if (this.isRange) {
                    var _a = __read(this.valueForRangeShow, 2), start = _a[0], end = _a[1];
                    /** @type {?} */
                    var showMiddle = !start.addMonths(1).isSame(end, 'month'); // One month diff then don't show middle prev/next
                    if ((partType === 'left' && direction === 'next') || (partType === 'right' && direction === 'prev')) {
                        return showMiddle;
                    }
                    return true;
                }
                else {
                    return true;
                }
            };
        /**
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.getPanelMode = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                if (this.isRange) {
                    return /** @type {?} */ (this.panelMode[this.getPartTypeIndex(partType)]);
                }
                else {
                    return /** @type {?} */ (this.panelMode);
                }
            };
        // Get single value or part value of a range
        /**
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.getValue = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                if (this.isRange) {
                    return this.value[this.getPartTypeIndex(partType)];
                }
                else {
                    return /** @type {?} */ (this.value);
                }
            };
        /**
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.getValueBySelector = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                if (this.isRange) {
                    /** @type {?} */
                    var valueShow = this.showTimePicker ? this.value : this.valueForRangeShow; // Use the real time value that without decorations when timepicker is shown up
                    return valueShow[this.getPartTypeIndex(partType)];
                }
                else {
                    return /** @type {?} */ (this.value);
                }
            };
        /**
         * @param {?} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.getPartTypeIndex = /**
         * @param {?} partType
         * @return {?}
         */
            function (partType) {
                return this.partTypeMap[partType];
            };
        /**
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.getPlaceholder = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                return this.isRange ? this.placeholder[this.getPartTypeIndex(partType)] : /** @type {?} */ (this.placeholder);
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.hasSelectedValue = /**
         * @return {?}
         */
            function () {
                return this.selectedValue && !!this.selectedValue[1] && !!this.selectedValue[0];
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.isAllowedSelectedValue = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectedValue = this.selectedValue;
                if (selectedValue && selectedValue[0] && selectedValue[1]) {
                    return isAllowedDate(selectedValue[0], this.disabledDate, this.disabledStartTime) &&
                        isAllowedDate(selectedValue[1], this.disabledDate, this.disabledEndTime);
                }
                return false;
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.timePickerDisabled = /**
         * @return {?}
         */
            function () {
                if (!this.hasTimePicker) {
                    return true;
                }
                if (this.isRange) {
                    return !this.hasSelectedValue() || !!this.hoverValue.length;
                }
                else {
                    return false;
                }
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.okDisabled = /**
         * @return {?}
         */
            function () {
                if (!this.hasTimePicker) {
                    return true;
                }
                if (this.isRange) {
                    return !this.isAllowedSelectedValue() || !this.hasSelectedValue() || !!this.hoverValue.length;
                }
                else {
                    return this.value ? !isAllowedDate(/** @type {?} */ (this.value), this.disabledDate, this.disabledTime) : false;
                }
            };
        /**
         * @param {?=} partType
         * @return {?}
         */
        DateRangePopupComponent.prototype.getTimeOptions = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                if (this.showTime && this.timeOptions) {
                    return this.isRange ? this.timeOptions[this.getPartTypeIndex(partType)] : this.timeOptions;
                }
                return null;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        DateRangePopupComponent.prototype.onClickPresetRange = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                /** @type {?} */
                var value = val;
                this.setValue([new CandyDate(value[0]), new CandyDate(value[1])]);
                this.resultOk.emit();
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.onPresetRangeMouseLeave = /**
         * @return {?}
         */
            function () {
                this.clearHoverValue();
            };
        /**
         * @param {?} val
         * @return {?}
         */
        DateRangePopupComponent.prototype.onHoverPresetRange = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                this.hoverValue = ([new CandyDate(val[0]), new CandyDate(val[1])]);
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        DateRangePopupComponent.prototype.getObjectKeys = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                return obj ? Object.keys(obj) : [];
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.closePickerPanel = /**
         * @return {?}
         */
            function () {
                this.closePicker.emit();
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.clearHoverValue = /**
         * @return {?}
         */
            function () {
                this.hoverValue = [];
            };
        /**
         * @return {?}
         */
        DateRangePopupComponent.prototype.buildTimeOptions = /**
         * @return {?}
         */
            function () {
                if (this.showTime) {
                    /** @type {?} */
                    var showTime = typeof this.showTime === 'object' ? this.showTime : {};
                    if (this.isRange) {
                        this.timeOptions = [this.overrideTimeOptions(showTime, this.value[0], 'start'), this.overrideTimeOptions(showTime, this.value[1], 'end')];
                    }
                    else {
                        this.timeOptions = this.overrideTimeOptions(showTime, /** @type {?} */ (this.value));
                    }
                }
                else {
                    this.timeOptions = null;
                }
            };
        /**
         * @param {?} origin
         * @param {?} value
         * @param {?=} partial
         * @return {?}
         */
        DateRangePopupComponent.prototype.overrideTimeOptions = /**
         * @param {?} origin
         * @param {?} value
         * @param {?=} partial
         * @return {?}
         */
            function (origin, value, partial) {
                /** @type {?} */
                var disabledTimeFn;
                if (partial) {
                    disabledTimeFn = partial === 'start' ? this.disabledStartTime : this.disabledEndTime;
                }
                else {
                    disabledTimeFn = this.disabledTime;
                }
                return __assign({}, origin, getTimeConfig(value, disabledTimeFn));
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var newValue = value;
                // TODO: Sync original time (NOTE: this should take more care of beacuse it may depend on many change sources)
                // if (this.isRange) {
                //   // TODO: Sync time
                // } else {
                //   if (this.value) { // Sync time from the original one if it's available
                //     newValue = this.overrideHms(this.value as CandyDate, newValue as CandyDate);
                //   }
                // }
                this.value = newValue;
                this.valueChange.emit(this.value);
                this.buildTimeOptions();
            };
        /**
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        DateRangePopupComponent.prototype.overrideHms = /**
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
            function (from, to) {
                if (!from || !to) {
                    return null;
                }
                return to.setHms(from.getHours(), from.getMinutes(), from.getSeconds());
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.isValidRange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (Array.isArray(value)) {
                    var _a = __read(value, 2), start = _a[0], end = _a[1];
                    /** @type {?} */
                    var grain = this.hasTimePicker ? 'second' : 'day';
                    return start && end && (start.isBefore(end, grain) || start.isSame(end, grain));
                }
                return false;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.normalizeRangeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _a = __read(value, 2), start = _a[0], end = _a[1];
                /** @type {?} */
                var newStart = start || new CandyDate();
                /** @type {?} */
                var newEnd = end && end.isSame(newStart, 'month') ? end.addMonths(1) : end || newStart.addMonths(1);
                return [newStart, newEnd];
            };
        /**
         * @param {?} key
         * @return {?}
         */
        DateRangePopupComponent.prototype.sortRangeValue = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (Array.isArray(this[key])) {
                    var _a = __read(this[key], 2), start = _a[0], end = _a[1];
                    if (start && end && start.isAfter(end, 'day')) {
                        this[key] = [end, start];
                    }
                }
            };
        /**
         * @param {?} key
         * @param {?} partType
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.setRangeValue = /**
         * @param {?} key
         * @param {?} partType
         * @param {?} value
         * @return {?}
         */
            function (key, partType, value) {
                /** @type {?} */
                var ref = this[key] = this.cloneRangeDate(/** @type {?} */ (this[key]));
                ref[this.getPartTypeIndex(partType)] = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePopupComponent.prototype.cloneRangeDate = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return /** @type {?} */ ([value[0] && value[0].clone(), value[1] && value[1].clone()]);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        DateRangePopupComponent.prototype.initialArray = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (!this[key] || !Array.isArray(this[key])) {
                    this[key] = [];
                }
            };
        DateRangePopupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'date-range-popup',
                        template: "<div\n  class=\"{{ prefixCls }}-picker-container {{ dropdownClassName }} {{ prefixCls }}-picker-container-placement-bottomLeft\"\n  [ngStyle]=\"popupStyle\">\n\n  <div class=\"{{ prefixCls }} {{ showWeek ? prefixCls + '-week-number': '' }} {{ hasTimePicker ? prefixCls + '-time' : '' }} {{ isRange ? prefixCls + '-range' : '' }}\" tabindex=\"0\">\n    <div class=\"{{ prefixCls }}-panel\">\n      <ng-container *ngIf=\"!isRange\"> <!-- Single ONLY -->\n        <ng-container *ngTemplateOutlet=\"tplCalendarInput\"></ng-container>\n      </ng-container>\n      <div class=\"{{ prefixCls }}-date-panel\">\n        <ng-container *ngIf=\"isRange; else tplSinglePart\">\n          <!-- Range Selectors -->\n          <ng-container *ngTemplateOutlet=\"tplRangePart; context: { partType: 'left' }\"></ng-container>\n          <div class=\"ant-calendar-range-middle\">~</div>\n          <ng-container *ngTemplateOutlet=\"tplRangePart; context: { partType: 'right' }\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isRange\"> <!-- Single ONLY -->\n          <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\n        </ng-container>\n      </div>\n      <ng-container *ngIf=\"isRange\"> <!-- Range ONLY -->\n        <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #tplCalendarInput let-partType=\"partType\">\n  <calendar-input\n    [value]=\"getValue(partType)\"\n    (valueChange)=\"changeValue($event, partType)\"\n    [locale]=\"locale\"\n    [disabledDate]=\"disabledDate\"\n    [format]=\"format\"\n    [placeholder]=\"getPlaceholder(partType)\"\n  ></calendar-input>\n</ng-template>\n\n<ng-template #tplInnerPopup let-partType=\"partType\">\n  <inner-popup\n    [showWeek]=\"showWeek\"\n    [locale]=\"locale\"\n    [showTimePicker]=\"hasTimePicker && showTimePicker\"\n    [timeOptions]=\"getTimeOptions(partType)\"\n    [panelMode]=\"getPanelMode(partType)\"\n    (panelModeChange)=\"onPanelModeChange($event, partType)\"\n    [value]=\"getValueBySelector(partType)\"\n    [disabledDate]=\"disabledDate\"\n    [dateRender]=\"dateRender\"\n    [selectedValue]=\"selectedValue\"\n    [hoverValue]=\"hoverValue\"\n    [enablePrev]=\"enablePrevNext('prev', partType)\"\n    [enableNext]=\"enablePrevNext('next', partType)\"\n    (dayHover)=\"onDayHover($event)\"\n    (selectDate)=\"changeValueFromSelect($event)\"\n    (selectTime)=\"onSelectTime($event, partType)\"\n    (headerChange)=\"onHeaderChange($event, partType)\"\n  ></inner-popup>\n</ng-template>\n\n<ng-template #tplFooter>\n  <calendar-footer\n    *ngIf=\"hasFooter\"\n    [locale]=\"locale\"\n    [showToday]=\"showToday\"\n    [hasTimePicker]=\"hasTimePicker\"\n    [timePickerDisabled]=\"timePickerDisabled()\"\n    [okDisabled]=\"okDisabled()\"\n    [extraFooter]=\"extraFooter\"\n    [rangeQuickSelector]=\"ranges ? tplRangeQuickSelector : null\"\n    [(showTimePicker)]=\"showTimePicker\"\n    (showTimePickerChange)=\"onShowTimePickerChange($event)\"\n    (clickOk)=\"resultOk.emit()\"\n    (clickToday)=\"onClickToday($event)\"\n  ></calendar-footer>\n</ng-template>\n\n<!-- Single ONLY -->\n<ng-template #tplSinglePart>\n  <ng-container *ngTemplateOutlet=\"tplInnerPopup\"></ng-container>\n</ng-template>\n\n<!-- Range ONLY -->\n<ng-template #tplRangePart let-partType=\"partType\">\n  <div class=\"{{ prefixCls }}-range-part {{ prefixCls }}-range-{{ partType }}\">\n    <ng-container *ngTemplateOutlet=\"tplCalendarInput; context: { partType: partType }\"></ng-container>\n    <div style=\"outline: none;\">\n      <ng-container *ngTemplateOutlet=\"tplInnerPopup; context: { partType: partType }\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<!-- Range ONLY: Range Quick Selector -->\n<ng-template #tplRangeQuickSelector>\n  <a *ngFor=\"let name of getObjectKeys(ranges)\"\n    (click)=\"onClickPresetRange(ranges[name])\"\n    (mouseenter)=\"onHoverPresetRange(ranges[name])\"\n    (mouseleave)=\"onPresetRangeMouseLeave()\"\n  >{{ name }}</a>\n</ng-template>"
                    }] }
        ];
        DateRangePopupComponent.propDecorators = {
            isRange: [{ type: i0.Input }],
            showWeek: [{ type: i0.Input }],
            locale: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            disabledDate: [{ type: i0.Input }],
            disabledTime: [{ type: i0.Input }],
            showToday: [{ type: i0.Input }],
            showTime: [{ type: i0.Input }],
            extraFooter: [{ type: i0.Input }],
            ranges: [{ type: i0.Input }],
            dateRender: [{ type: i0.Input }],
            popupStyle: [{ type: i0.Input }],
            dropdownClassName: [{ type: i0.Input }],
            panelMode: [{ type: i0.Input }],
            panelModeChange: [{ type: i0.Output }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            resultOk: [{ type: i0.Output }],
            closePicker: [{ type: i0.Output }]
        };
        return DateRangePopupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InnerPopupComponent = /** @class */ (function () {
        function InnerPopupComponent() {
            this.panelModeChange = new i0.EventEmitter();
            this.headerChange = new i0.EventEmitter(); // Emitted when user changed the header's value
            this.selectDate = new i0.EventEmitter(); // Emitted when the date is selected by click the date panel
            this.selectTime = new i0.EventEmitter();
            this.dayHover = new i0.EventEmitter(); // Emitted when hover on a day by mouse enter
            this.prefixCls = 'ant-calendar';
        }
        /**
         * @return {?}
         */
        InnerPopupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        InnerPopupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["value"] && !this.value) {
                    this.value = new CandyDate();
                }
            };
        /**
         * @param {?} date
         * @return {?}
         */
        InnerPopupComponent.prototype.onSelectTime = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.selectTime.emit(new CandyDate(date));
            };
        // The value real changed to outside
        /**
         * @param {?} date
         * @return {?}
         */
        InnerPopupComponent.prototype.onSelectDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                /** @type {?} */
                var value = date instanceof CandyDate ? date : new CandyDate(date);
                this.selectDate.emit(value);
            };
        InnerPopupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'inner-popup',
                        template: "<calendar-header\n  [(panelMode)]=\"panelMode\"\n  (panelModeChange)=\"panelModeChange.emit($event)\"\n  [(value)]=\"value\"\n  (valueChange)=\"headerChange.emit($event)\"\n  [locale]=\"locale\"\n  [showTimePicker]=\"showTimePicker\"\n  [enablePrev]=\"enablePrev\"\n  [enableNext]=\"enableNext\"\n></calendar-header>\n\n<ng-container *ngIf=\"showTimePicker && timeOptions\">\n  <nz-time-picker-panel\n    [nzInDatePicker]=\"true\"\n    [ngModel]=\"value.nativeDate\"\n    (ngModelChange)=\"onSelectTime($event)\"\n    [format]=\"timeOptions.nzFormat\"\n    [nzHourStep]=\"timeOptions.nzHourStep\"\n    [nzMinuteStep]=\"timeOptions.nzMinuteStep\"\n    [nzSecondStep]=\"timeOptions.nzSecondStep\"\n    [nzDisabledHours]=\"timeOptions.nzDisabledHours\"\n    [nzDisabledMinutes]=\"timeOptions.nzDisabledMinutes\"\n    [nzDisabledSeconds]=\"timeOptions.nzDisabledSeconds\"\n    [nzHideDisabledOptions]=\"timeOptions.nzHideDisabledOptions\"\n    [nzDefaultOpenValue]=\"timeOptions.nzDefaultOpenValue\"\n    [nzAddOn]=\"timeOptions.nzAddOn\"\n  ></nz-time-picker-panel>\n</ng-container>\n\n<div class=\"{{ prefixCls }}-body\">\n  <date-table\n    [showWeek]=\"showWeek\"\n    [value]=\"value\"\n    (valueChange)=\"onSelectDate($event)\"\n    showWeekNumber=\"false\"\n    [disabledDate]=\"disabledDate\"\n    [dateRender]=\"dateRender\"\n    [selectedValue]=\"selectedValue\"\n    [hoverValue]=\"hoverValue\"\n    (dayHover)=\"dayHover.emit($event)\"\n  ></date-table>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        InnerPopupComponent.ctorParameters = function () { return []; };
        InnerPopupComponent.propDecorators = {
            showWeek: [{ type: i0.Input }],
            locale: [{ type: i0.Input }],
            showTimePicker: [{ type: i0.Input }],
            timeOptions: [{ type: i0.Input }],
            enablePrev: [{ type: i0.Input }],
            enableNext: [{ type: i0.Input }],
            disabledDate: [{ type: i0.Input }],
            dateRender: [{ type: i0.Input }],
            selectedValue: [{ type: i0.Input }],
            hoverValue: [{ type: i0.Input }],
            panelMode: [{ type: i0.Input }],
            panelModeChange: [{ type: i0.Output }],
            value: [{ type: i0.Input }],
            headerChange: [{ type: i0.Output }],
            selectDate: [{ type: i0.Output }],
            selectTime: [{ type: i0.Output }],
            dayHover: [{ type: i0.Output }]
        };
        return InnerPopupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var MAX_ROW$2 = 4;
    /** @type {?} */
    var MAX_COL$2 = 3;
    var YearPanelComponent = /** @class */ (function () {
        function YearPanelComponent() {
            this.valueChange = new i0.EventEmitter();
            this.decadePanelShow = new i0.EventEmitter();
            this.prefixCls = 'ant-calendar-year-panel';
        }
        Object.defineProperty(YearPanelComponent.prototype, "currentYear", {
            get: /**
             * @return {?}
             */ function () {
                return this.value.getYear();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(YearPanelComponent.prototype, "startYear", {
            get: /**
             * @return {?}
             */ function () {
                return parseInt("" + this.currentYear / 10, 10) * 10;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(YearPanelComponent.prototype, "endYear", {
            get: /**
             * @return {?}
             */ function () {
                return this.startYear + 9;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        YearPanelComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["value"]) {
                    this.render();
                }
            };
        /**
         * @return {?}
         */
        YearPanelComponent.prototype.previousDecade = /**
         * @return {?}
         */
            function () {
                this.gotoYear(-10);
            };
        /**
         * @return {?}
         */
        YearPanelComponent.prototype.nextDecade = /**
         * @return {?}
         */
            function () {
                this.gotoYear(10);
            };
        /**
         * @param {?} index
         * @param {?} yearData
         * @return {?}
         */
        YearPanelComponent.prototype.trackPanelYear = /**
         * @param {?} index
         * @param {?} yearData
         * @return {?}
         */
            function (index, yearData) {
                return yearData.content;
            };
        /**
         * @return {?}
         */
        YearPanelComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                if (this.value) {
                    this.panelYears = this.makePanelYears();
                }
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        YearPanelComponent.prototype.gotoYear = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                this.value = this.value.addYears(amount);
                // this.valueChange.emit(this.value); // Do not trigger final value change
                this.render();
            };
        /**
         * @param {?} year
         * @return {?}
         */
        YearPanelComponent.prototype.chooseYear = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                this.value = this.value.setYear(year);
                this.valueChange.emit(this.value);
                this.render();
            };
        /**
         * @return {?}
         */
        YearPanelComponent.prototype.makePanelYears = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var years = [];
                /** @type {?} */
                var currentYear = this.currentYear;
                /** @type {?} */
                var startYear = this.startYear;
                /** @type {?} */
                var endYear = this.endYear;
                /** @type {?} */
                var previousYear = startYear - 1;
                /** @type {?} */
                var index = 0;
                for (var rowIndex = 0; rowIndex < MAX_ROW$2; rowIndex++) {
                    years[rowIndex] = [];
                    var _loop_1 = function (colIndex) {
                        var _a;
                        /** @type {?} */
                        var year = previousYear + index;
                        /** @type {?} */
                        var content = String(year);
                        /** @type {?} */
                        var cell = years[rowIndex][colIndex] = {
                            content: content,
                            year: year,
                            title: content,
                            isCurrent: year === currentYear,
                            isLowerThanStart: year < startYear,
                            isBiggerThanEnd: year > endYear,
                            classMap: null,
                            onClick: null
                        };
                        cell.classMap = (_a = {},
                            _a[this_1.prefixCls + "-cell"] = true,
                            _a[this_1.prefixCls + "-selected-cell"] = cell.isCurrent,
                            _a[this_1.prefixCls + "-last-decade-cell"] = cell.isLowerThanStart,
                            _a[this_1.prefixCls + "-next-decade-cell"] = cell.isBiggerThanEnd,
                            _a);
                        if (cell.isLowerThanStart) {
                            cell.onClick = function () { return _this.previousDecade(); };
                        }
                        else if (cell.isBiggerThanEnd) {
                            cell.onClick = function () { return _this.nextDecade(); };
                        }
                        else {
                            cell.onClick = function () { return _this.chooseYear(cell.year); };
                        }
                        index++;
                    };
                    var this_1 = this;
                    for (var colIndex = 0; colIndex < MAX_COL$2; colIndex++) {
                        _loop_1(colIndex);
                    }
                }
                return years;
            };
        YearPanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'year-panel',
                        template: "<div class=\"{{ prefixCls }}\">\n  <div>\n    <div class=\"{{ prefixCls }}-header\">\n      <a\n        class=\"{{ prefixCls }}-prev-decade-btn\"\n        role=\"button\"\n        (click)=\"previousDecade()\"\n        title=\"{{ locale.previousDecade }}\"\n      ></a>\n      <a\n        class=\"{{ prefixCls }}-decade-select\"\n        role=\"button\"\n        (click)=\"decadePanelShow.emit()\"\n        title=\"{{ locale.decadeSelect }}\"\n      >\n        <span class=\"{{ prefixCls }}-decade-select-content\">\n          {{ startYear }}-{{ endYear }}\n        </span>\n        <span class=\"{{ prefixCls }}-decade-select-arrow\">x</span>\n      </a>\n\n      <a class=\"{{ prefixCls }}-next-decade-btn\" (click)=\"nextDecade()\" title=\"{{ locale.nextDecade }}\" role=\"button\"></a>\n    </div>\n    <div class=\"{{ prefixCls }}-body\">\n      <table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n        <tbody class=\"{{ prefixCls }}-tbody\">\n          <tr *ngFor=\"let row of panelYears\" role=\"row\">\n            <td *ngFor=\"let yearCell of row; trackBy: trackPanelYear\"\n              role=\"gridcell\"\n              title=\"{{ yearCell.title }}\"\n              (click)=\"yearCell.onClick()\"\n              [ngClass]=\"yearCell.classMap\"\n            >\n              <a class=\"{{ prefixCls }}-year\">{{ yearCell.content }}</a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        YearPanelComponent.ctorParameters = function () { return []; };
        YearPanelComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            decadePanelShow: [{ type: i0.Output }]
        };
        return YearPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LibPackerModule = /** @class */ (function () {
        function LibPackerModule() {
        }
        LibPackerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i3.CommonModule,
                            forms.FormsModule,
                            NzI18nModule,
                            NzTimePickerModule
                        ],
                        exports: [
                            CalendarHeaderComponent,
                            CalendarInputComponent,
                            CalendarFooterComponent,
                            OkButtonComponent,
                            TimePickerButtonComponent,
                            TodayButtonComponent,
                            DateTableComponent,
                            YearPanelComponent,
                            MonthPanelComponent,
                            MonthTableComponent,
                            DecadePanelComponent,
                            InnerPopupComponent,
                            DateRangePopupComponent
                        ],
                        declarations: [
                            CalendarHeaderComponent,
                            CalendarInputComponent,
                            CalendarFooterComponent,
                            OkButtonComponent,
                            TimePickerButtonComponent,
                            TodayButtonComponent,
                            DateTableComponent,
                            YearPanelComponent,
                            MonthPanelComponent,
                            MonthTableComponent,
                            DecadePanelComponent,
                            InnerPopupComponent,
                            DateRangePopupComponent
                        ]
                    },] }
        ];
        return LibPackerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPickerComponent = /** @class */ (function () {
        function NzPickerComponent(i18n, changeDetector) {
            this.i18n = i18n;
            this.changeDetector = changeDetector;
            this.isRange = false;
            this.open = undefined; // "undefined" = this value will be not used
            this.valueChange = new i0.EventEmitter();
            this.openChange = new i0.EventEmitter(); // Emitted when overlay's open state change
            this.prefixCls = 'ant-calendar';
            this.animationOpenState = false;
            this.overlayOpen = false; // Available when "open"=undefined
            this.overlayOffsetY = 0;
            this.overlayOffsetX = -2;
            this.overlayPositions = /** @type {?} */ ([
                {
                    // offsetX: -10, // TODO: What a pity, cdk/overlay current not support offset configs even though it already provide these properties
                    // offsetY: -10,
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top'
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom'
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top'
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'bottom'
                }
            ]);
            this.dropdownAnimation = 'bottom';
            this.currentPositionX = 'start';
            this.currentPositionY = 'top';
        }
        Object.defineProperty(NzPickerComponent.prototype, "realOpenState", {
            // get valueReadable(): string {
            //   return this.value && this.i18n.formatDateCompatible(this.value.nativeDate, this.format);
            // }
            get: /**
             * @return {?}
             */ function () {
                // The value that really decide the open state of overlay
                return this.isOpenHandledByUser() ? this.open : this.overlayOpen;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.autoFocus) {
                    if (this.isRange) {
                        /** @type {?} */
                        var firstInput = /** @type {?} */ (( /** @type {?} */(this.pickerInput.nativeElement)).querySelector('input:first-child'));
                        firstInput.focus(); // Focus on the first input
                    }
                    else {
                        this.pickerInput.nativeElement.focus();
                    }
                }
            };
        // Show overlay content
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.showOverlay = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.realOpenState) {
                    this.overlayOpen = true;
                    this.openChange.emit(this.overlayOpen);
                    setTimeout(function () {
                        if (_this.cdkConnectedOverlay && _this.cdkConnectedOverlay.overlayRef) {
                            _this.cdkConnectedOverlay.overlayRef.updatePosition();
                        }
                    });
                }
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.hideOverlay = /**
         * @return {?}
         */
            function () {
                if (this.realOpenState) {
                    this.overlayOpen = false;
                    this.openChange.emit(this.overlayOpen);
                }
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.onClickInputBox = /**
         * @return {?}
         */
            function () {
                if (!this.disabled && !this.isOpenHandledByUser()) {
                    this.showOverlay();
                }
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.onClickBackdrop = /**
         * @return {?}
         */
            function () {
                this.hideOverlay();
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.onOverlayDetach = /**
         * @return {?}
         */
            function () {
                this.hideOverlay();
            };
        // NOTE: A issue here, the first time position change, the animation will not be triggered.
        // Because the overlay's "positionChange" event is emitted after the content's full shown up.
        // All other components like "nz-dropdown" which depends on overlay also has the same issue.
        // See: https://github.com/NG-ZORRO/ng-zorro-antd/issues/1429
        /**
         * @param {?} position
         * @return {?}
         */
        NzPickerComponent.prototype.onPositionChange = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this.dropdownAnimation = position.connectionPair.originY === 'top' ? 'bottom' : 'top';
                this.currentPositionX = /** @type {?} */ (position.connectionPair.originX);
                this.currentPositionY = /** @type {?} */ (position.connectionPair.originY);
                this.changeDetector.detectChanges(); // Take side-effects to position styles
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzPickerComponent.prototype.onClickClear = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.value = this.isRange ? [] : null;
                this.valueChange.emit(this.value);
            };
        /**
         * @param {?=} partType
         * @return {?}
         */
        NzPickerComponent.prototype.getReadableValue = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                /** @type {?} */
                var value;
                if (this.isRange) {
                    value = this.value[this.getPartTypeIndex(partType)];
                }
                else {
                    value = /** @type {?} */ (this.value);
                }
                return value ? this.i18n.formatDateCompatible(value.nativeDate, this.format) : null;
            };
        /**
         * @param {?} partType
         * @return {?}
         */
        NzPickerComponent.prototype.getPartTypeIndex = /**
         * @param {?} partType
         * @return {?}
         */
            function (partType) {
                return { 'left': 0, 'right': 1 }[partType];
            };
        /**
         * @param {?=} partType
         * @return {?}
         */
        NzPickerComponent.prototype.getPlaceholder = /**
         * @param {?=} partType
         * @return {?}
         */
            function (partType) {
                return this.isRange ? this.placeholder[this.getPartTypeIndex(partType)] : /** @type {?} */ (this.placeholder);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzPickerComponent.prototype.isEmptyValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.isRange) {
                    return !value || !Array.isArray(value) || value.every(function (val) { return !val; });
                }
                else {
                    return !value;
                }
            };
        // Whether open state is permanently controlled by user himself
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.isOpenHandledByUser = /**
         * @return {?}
         */
            function () {
                return this.open !== undefined;
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.animationStart = /**
         * @return {?}
         */
            function () {
                if (this.realOpenState) {
                    this.animationOpenState = true;
                }
            };
        /**
         * @return {?}
         */
        NzPickerComponent.prototype.animationDone = /**
         * @return {?}
         */
            function () {
                this.animationOpenState = this.realOpenState;
            };
        NzPickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-picker',
                        template: "<span\n  cdkOverlayOrigin\n  #origin=\"cdkOverlayOrigin\"\n  class=\"{{ prefixCls }}-picker {{ size ? prefixCls + '-picker-' + size : '' }} {{ className }}\"\n  [ngStyle]=\"style\"\n  tabindex=\"0\"\n  (click)=\"onClickInputBox()\"\n>\n  <!-- Content of single picker -->\n  <ng-container *ngIf=\"!isRange\">\n    <input\n      #pickerInput\n      class=\"{{ prefixCls }}-picker-input ant-input\"\n      [class.ant-input-lg]=\"size === 'large'\"\n      [class.ant-input-sm]=\"size === 'small'\"\n      [class.ant-input-disabled]=\"disabled\"\n\n      [disabled]=\"disabled\"\n      readonly\n      value=\"{{ getReadableValue() }}\"\n      placeholder=\"{{ getPlaceholder() }}\"\n    />\n    <ng-container *ngTemplateOutlet=\"tplRightRest\"></ng-container>\n  </ng-container>\n\n  <!-- Content of range picker -->\n  <ng-container *ngIf=\"isRange\">\n    <span\n      #pickerInput\n      class=\"{{ prefixCls }}-picker-input ant-input\"\n      [class.ant-input-lg]=\"size === 'large'\"\n      [class.ant-input-sm]=\"size === 'small'\"\n      [class.ant-input-disabled]=\"disabled\"\n    >\n      <ng-container *ngTemplateOutlet=\"tplRangeInput; context: { partType: 'left' }\"></ng-container>\n      <span class=\"{{ prefixCls }}-range-picker-separator\"> ~ </span>\n      <ng-container *ngTemplateOutlet=\"tplRangeInput; context: { partType: 'right' }\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"tplRightRest\"></ng-container>\n    </span>\n  </ng-container>\n</span>\n\n<!-- Input for Range ONLY -->\n<ng-template #tplRangeInput let-partType=\"partType\">\n  <input\n    class=\"{{ prefixCls }}-range-picker-input\"\n    [disabled]=\"disabled\"\n    readonly\n    value=\"{{ getReadableValue(partType) }}\"\n    placeholder=\"{{ getPlaceholder(partType) }}\"\n  />\n</ng-template>\n\n<!-- Right operator icons -->\n<ng-template #tplRightRest>\n  <i\n    nz-icon\n    type=\"close-circle\"\n    theme=\"fill\"\n    *ngIf=\"!disabled && !isEmptyValue(value) && allowClear\"\n    class=\"{{ prefixCls }}-picker-clear\"\n    (click)=\"onClickClear($event)\"\n  ></i>\n  <span class=\"{{ prefixCls }}-picker-icon\">\n    <i nz-icon type=\"calendar\"></i>\n  </span>\n</ng-template>\n\n<!-- Overlay -->\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"realOpenState\"\n  [cdkConnectedOverlayHasBackdrop]=\"!isOpenHandledByUser()\"\n  [cdkConnectedOverlayPositions]=\"overlayPositions\"\n  (positionChange)=\"onPositionChange($event)\"\n  (backdropClick)=\"onClickBackdrop()\"\n  (detach)=\"onOverlayDetach()\"\n>\n  <div\n    [@dropDownAnimation]=\"dropdownAnimation\"\n    (@dropDownAnimation.start)=\"animationStart()\"\n    (@dropDownAnimation.done)=\"animationDone()\"\n    style=\"position: relative;\"\n    [style.left]=\"currentPositionX === 'start' ? '-2px' : '2px'\"\n    [style.top]=\"currentPositionY === 'top' ? '-2px' : '2px'\"\n  > <!-- Compatible for overlay that not support offset dynamically and immediately -->\n    <ng-content></ng-content>\n  </div>\n</ng-template>",
                        animations: [
                            dropDownAnimation
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzPickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzPickerComponent.propDecorators = {
            isRange: [{ type: i0.Input }],
            open: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            allowClear: [{ type: i0.Input }],
            autoFocus: [{ type: i0.Input }],
            className: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            size: [{ type: i0.Input }],
            style: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            openChange: [{ type: i0.Output }],
            origin: [{ type: i0.ViewChild, args: ['origin',] }],
            cdkConnectedOverlay: [{ type: i0.ViewChild, args: [i2$1.CdkConnectedOverlay,] }],
            pickerInput: [{ type: i0.ViewChild, args: ['pickerInput',] }]
        };
        return NzPickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var POPUP_STYLE_PATCH = { 'position': 'relative' };
    /**
     * The base picker for all common APIs
     * @abstract
     */
    var AbstractPickerComponent = /** @class */ (function () {
        function AbstractPickerComponent(i18n) {
            this.i18n = i18n;
            // --- Common API
            this.nzAllowClear = true;
            this.nzAutoFocus = false;
            this.nzDisabled = false;
            this.nzPopupStyle = POPUP_STYLE_PATCH;
            this.nzOnOpenChange = new i0.EventEmitter();
            this.isRange = false;
            this.destroyed$ = new rxjs.Subject();
            this.isCustomPlaceHolder = false;
            // ------------------------------------------------------------------------
            // | Control value accessor implements
            // ------------------------------------------------------------------------
            // NOTE: onChangeFn/onTouchedFn will not be assigned if user not use as ngModel
            this.onChangeFn = function () { return void 0; };
            this.onTouchedFn = function () { return void 0; };
        }
        Object.defineProperty(AbstractPickerComponent.prototype, "realOpenState", {
            get: /**
             * @return {?}
             */ function () {
                return this.picker.animationOpenState;
            } // Use picker's real open state to let re-render the picker's content when shown up
            ,
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AbstractPickerComponent.prototype.initValue = /**
         * @return {?}
         */
            function () {
                this.nzValue = this.isRange ? [] : null;
            };
        /**
         * @return {?}
         */
        AbstractPickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Subscribe the every locale change if the nzLocale is not handled by user
                if (!this.nzLocale) {
                    this.i18n.localeChange
                        .pipe(operators.takeUntil(this.destroyed$))
                        .subscribe(function () { return _this.setLocale(); });
                }
                // Default value
                this.initValue();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AbstractPickerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzPopupStyle"]) { // Always assign the popup style patch
                    // Always assign the popup style patch
                    this.nzPopupStyle = this.nzPopupStyle ? __assign({}, this.nzPopupStyle, POPUP_STYLE_PATCH) : POPUP_STYLE_PATCH;
                }
                // Mark as customized placeholder by user once nzPlaceHolder assigned at the first time
                if (changes["nzPlaceHolder"] && changes["nzPlaceHolder"].firstChange && typeof this.nzPlaceHolder !== 'undefined') {
                    this.isCustomPlaceHolder = true;
                }
                if (changes["nzLocale"]) { // The nzLocale is currently handled by user
                    // The nzLocale is currently handled by user
                    this.setDefaultPlaceHolder();
                }
            };
        /**
         * @return {?}
         */
        AbstractPickerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroyed$.next();
                this.destroyed$.complete();
            };
        /**
         * @return {?}
         */
        AbstractPickerComponent.prototype.closeOverlay = /**
         * @return {?}
         */
            function () {
                this.picker.hideOverlay();
            };
        /**
         * Common handle for value changes
         * @param value changed value
         */
        /**
         * Common handle for value changes
         * @param {?} value changed value
         * @return {?}
         */
        AbstractPickerComponent.prototype.onValueChange = /**
         * Common handle for value changes
         * @param {?} value changed value
         * @return {?}
         */
            function (value) {
                this.nzValue = value;
                if (this.isRange) {
                    if (( /** @type {?} */(this.nzValue)).length) {
                        this.onChangeFn([this.nzValue[0].nativeDate, this.nzValue[1].nativeDate]);
                    }
                    else {
                        this.onChangeFn([]);
                    }
                }
                else {
                    if (this.nzValue) {
                        this.onChangeFn(( /** @type {?} */(this.nzValue)).nativeDate);
                    }
                    else {
                        this.onChangeFn(null);
                    }
                }
                this.onTouchedFn();
            };
        /**
         * Triggered when overlayOpen changes (different with realOpenState)
         * @param open The overlayOpen in picker component
         */
        /**
         * Triggered when overlayOpen changes (different with realOpenState)
         * @param {?} open The overlayOpen in picker component
         * @return {?}
         */
        AbstractPickerComponent.prototype.onOpenChange = /**
         * Triggered when overlayOpen changes (different with realOpenState)
         * @param {?} open The overlayOpen in picker component
         * @return {?}
         */
            function (open) {
                this.nzOnOpenChange.emit(open);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AbstractPickerComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.setValue(value);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        AbstractPickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                // tslint:disable-line:no-any
                this.onChangeFn = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        AbstractPickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                // tslint:disable-line:no-any
                this.onTouchedFn = fn;
            };
        /**
         * @param {?} disabled
         * @return {?}
         */
        AbstractPickerComponent.prototype.setDisabledState = /**
         * @param {?} disabled
         * @return {?}
         */
            function (disabled) {
                this.nzDisabled = disabled;
            };
        /**
         * @return {?}
         */
        AbstractPickerComponent.prototype.setLocale = /**
         * @return {?}
         */
            function () {
                this.nzLocale = this.i18n.getLocaleData('DatePicker', {});
                this.setDefaultPlaceHolder();
            };
        /**
         * @return {?}
         */
        AbstractPickerComponent.prototype.setDefaultPlaceHolder = /**
         * @return {?}
         */
            function () {
                if (!this.isCustomPlaceHolder && this.nzLocale) {
                    this.nzPlaceHolder = this.isRange ? this.nzLocale.lang.rangePlaceholder : this.nzLocale.lang.placeholder;
                }
            };
        /**
         * @param {?} date
         * @return {?}
         */
        AbstractPickerComponent.prototype.formatDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date ? this.i18n.formatDateCompatible(date.nativeDate, this.nzFormat) : '';
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AbstractPickerComponent.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.isRange) {
                    this.nzValue = value ? ( /** @type {?} */(value)).map(function (val) { return new CandyDate(val); }) : [];
                }
                else {
                    this.nzValue = value ? new CandyDate(/** @type {?} */ (value)) : null;
                }
            };
        AbstractPickerComponent.propDecorators = {
            nzAllowClear: [{ type: i0.Input }],
            nzAutoFocus: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzOpen: [{ type: i0.Input }],
            nzClassName: [{ type: i0.Input }],
            nzDisabledDate: [{ type: i0.Input }],
            nzLocale: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            nzPopupStyle: [{ type: i0.Input }],
            nzDropdownClassName: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzStyle: [{ type: i0.Input }],
            nzOnOpenChange: [{ type: i0.Output }],
            nzFormat: [{ type: i0.Input }],
            nzValue: [{ type: i0.Input }],
            picker: [{ type: i0.ViewChild, args: [NzPickerComponent,] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], AbstractPickerComponent.prototype, "nzAllowClear", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], AbstractPickerComponent.prototype, "nzAutoFocus", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], AbstractPickerComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], AbstractPickerComponent.prototype, "nzOpen", void 0);
        return AbstractPickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DateRangePickerComponent = /** @class */ (function (_super) {
        __extends(DateRangePickerComponent, _super);
        function DateRangePickerComponent(i18n) {
            var _this = _super.call(this, i18n) || this;
            _this.showWeek = false; // Should show as week picker
            _this.nzShowToday = true;
            _this.nzOnPanelChange = new i0.EventEmitter();
            _this.nzOnOk = new i0.EventEmitter();
            return _this;
        }
        Object.defineProperty(DateRangePickerComponent.prototype, "nzShowTime", {
            get: /**
             * @return {?}
             */ function () { return this._showTime; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showTime = typeof value === 'object' ? value : toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateRangePickerComponent.prototype, "realShowToday", {
            get: /**
             * @return {?}
             */ function () {
                // Range not support nzShowToday currently
                return !this.isRange && this.nzShowToday;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DateRangePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // Default format when it's empty
                if (!this.nzFormat) {
                    if (this.showWeek) {
                        this.nzFormat = 'yyyy-ww'; // Format for week
                    }
                    else {
                        this.nzFormat = this.nzShowTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd';
                    }
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DateRangePickerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
                if (changes["nzRenderExtraFooter"]) {
                    this.extraFooter = valueFunctionProp(this.nzRenderExtraFooter);
                }
                if (changes["nzShowTime"] || changes["nzStyle"]) {
                    this.setFixedPickerStyle();
                }
            };
        // If has no timepicker and the user select a date by date panel, then close picker
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangePickerComponent.prototype.onValueChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                _super.prototype.onValueChange.call(this, value);
                if (!this.nzShowTime) {
                    this.closeOverlay();
                }
            };
        // Emitted when done with date selecting
        /**
         * @return {?}
         */
        DateRangePickerComponent.prototype.onResultOk = /**
         * @return {?}
         */
            function () {
                if (this.isRange) {
                    if (( /** @type {?} */(this.nzValue)).length) {
                        this.nzOnOk.emit([this.nzValue[0].nativeDate, this.nzValue[1].nativeDate]);
                    }
                    else {
                        this.nzOnOk.emit([]);
                    }
                }
                else {
                    if (this.nzValue) {
                        this.nzOnOk.emit(( /** @type {?} */(this.nzValue)).nativeDate);
                    }
                    else {
                        this.nzOnOk.emit(null);
                    }
                }
                this.closeOverlay();
            };
        /**
         * @param {?} open
         * @return {?}
         */
        DateRangePickerComponent.prototype.onOpenChange = /**
         * @param {?} open
         * @return {?}
         */
            function (open) {
                this.nzOnOpenChange.emit(open);
            };
        /**
         * @return {?}
         */
        DateRangePickerComponent.prototype.setFixedPickerStyle = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var showTimeFixes = {};
                if (this.nzShowTime) {
                    showTimeFixes.width = this.isRange ? '350px' : '195px';
                }
                this.pickerStyle = __assign({}, showTimeFixes, this.nzStyle);
            };
        DateRangePickerComponent.decorators = [
            { type: i0.Component, args: [{
                        template: "" // Just for rollup
                    }] }
        ];
        /** @nocollapse */
        DateRangePickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        DateRangePickerComponent.propDecorators = {
            nzDateRender: [{ type: i0.Input }],
            nzDisabledTime: [{ type: i0.Input }],
            nzRenderExtraFooter: [{ type: i0.Input }],
            nzShowToday: [{ type: i0.Input }],
            nzMode: [{ type: i0.Input }],
            nzRanges: [{ type: i0.Input }],
            nzOnPanelChange: [{ type: i0.Output }],
            nzShowTime: [{ type: i0.Input }],
            nzOnOk: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], DateRangePickerComponent.prototype, "nzShowToday", void 0);
        return DateRangePickerComponent;
    }(AbstractPickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDatePickerComponent = /** @class */ (function (_super) {
        __extends(NzDatePickerComponent, _super);
        function NzDatePickerComponent(i18n) {
            var _this = _super.call(this, i18n) || this;
            _this.isRange = false;
            return _this;
        }
        NzDatePickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-date-picker',
                        template: "<nz-picker\n  [isRange]=\"isRange\"\n  [value]=\"nzValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"nzOpen\"\n  [disabled]=\"nzDisabled\"\n  [format]=\"nzFormat\"\n  [allowClear]=\"nzAllowClear\"\n  [autoFocus]=\"nzAutoFocus\"\n  [className]=\"nzClassName\"\n  [placeholder]=\"nzPlaceHolder\"\n  [size]=\"nzSize\"\n  [style]=\"pickerStyle\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <date-range-popup *ngIf=\"realOpenState\"\n    [isRange]=\"isRange\"\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"nzMode\"\n    (panelModeChange)=\"nzOnPanelChange.emit($event)\"\n    [value]=\"nzValue\"\n    (valueChange)=\"onValueChange($event)\"\n    [locale]=\"nzLocale?.lang\"\n    [showToday]=\"realShowToday\"\n    [showTime]=\"nzShowTime\"\n    [format]=\"nzFormat\"\n    [dateRender]=\"nzDateRender\"\n    [disabledDate]=\"nzDisabledDate\"\n    [disabledTime]=\"nzDisabledTime\"\n    [placeholder]=\"nzPlaceHolder\"\n    [dropdownClassName]=\"nzDropdownClassName\"\n    [popupStyle]=\"nzPopupStyle\"\n    [extraFooter]=\"extraFooter\"\n    [ranges]=\"nzRanges\"\n    (resultOk)=\"onResultOk()\"\n    (closePicker)=\"closeOverlay()\"\n  ></date-range-popup>\n</nz-picker>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef(function () { return NzDatePickerComponent; })
                            }],
                        host: {
                            '[class.ant-calendar-picker]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzDatePickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        return NzDatePickerComponent;
    }(DateRangePickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * The base picker for header panels, current support: Year/Month
     */
    var HeaderPickerComponent = /** @class */ (function (_super) {
        __extends(HeaderPickerComponent, _super);
        function HeaderPickerComponent(i18n) {
            return _super.call(this, i18n) || this;
        }
        /**
         * @return {?}
         */
        HeaderPickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.panelMode = this.endPanelMode;
                /** @type {?} */
                var allHeaderPanels = ['decade', 'year', 'month'];
                this.supportPanels = allHeaderPanels.slice(0, allHeaderPanels.indexOf(this.endPanelMode) + 1);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        HeaderPickerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
                if (changes["nzRenderExtraFooter"]) {
                    this.extraFooter = valueFunctionProp(this.nzRenderExtraFooter);
                }
            };
        /**
         * @param {?} mode
         * @return {?}
         */
        HeaderPickerComponent.prototype.onPanelModeChange = /**
         * @param {?} mode
         * @return {?}
         */
            function (mode) {
                if (this.supportPanels.indexOf(mode) > -1) {
                    this.panelMode = mode;
                }
                else { // Since the default "click year" logic can be "year panel" -> "date panel", we need force to the end panel otherwise
                    // Since the default "click year" logic can be "year panel" -> "date panel", we need force to the end panel otherwise
                    this.panelMode = this.endPanelMode;
                }
            };
        /**
         * @param {?} mode
         * @param {?} value
         * @return {?}
         */
        HeaderPickerComponent.prototype.onChooseValue = /**
         * @param {?} mode
         * @param {?} value
         * @return {?}
         */
            function (mode, value) {
                if (this.endPanelMode === mode) {
                    _super.prototype.onValueChange.call(this, value);
                    this.closeOverlay();
                }
            };
        /**
         * @param {?} open
         * @return {?}
         */
        HeaderPickerComponent.prototype.onOpenChange = /**
         * @param {?} open
         * @return {?}
         */
            function (open) {
                if (!open) {
                    this.cleanUp();
                }
                this.nzOnOpenChange.emit(open);
            };
        /**
         * @return {?}
         */
        HeaderPickerComponent.prototype.cleanUp = /**
         * @return {?}
         */
            function () {
                this.panelMode = this.endPanelMode;
            };
        HeaderPickerComponent.decorators = [
            { type: i0.Component, args: [{
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        HeaderPickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        HeaderPickerComponent.propDecorators = {
            nzPlaceHolder: [{ type: i0.Input }],
            nzRenderExtraFooter: [{ type: i0.Input }],
            nzDefaultValue: [{ type: i0.Input }],
            nzFormat: [{ type: i0.Input }]
        };
        return HeaderPickerComponent;
    }(AbstractPickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMonthPickerComponent = /** @class */ (function (_super) {
        __extends(NzMonthPickerComponent, _super);
        function NzMonthPickerComponent(i18n) {
            var _this = _super.call(this, i18n) || this;
            _this.nzFormat = 'yyyy-MM';
            _this.endPanelMode = 'month';
            return _this;
        }
        NzMonthPickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-month-picker',
                        template: "<nz-picker\n  [isRange]=\"false\"\n  [value]=\"nzValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"nzOpen\"\n  [disabled]=\"nzDisabled\"\n  [format]=\"nzFormat\"\n  [allowClear]=\"nzAllowClear\"\n  [autoFocus]=\"nzAutoFocus\"\n  [className]=\"nzClassName\"\n  [placeholder]=\"nzPlaceHolder\"\n  [size]=\"nzSize\"\n  [style]=\"nzStyle\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <div *ngIf=\"realOpenState\">\n    <div class=\"ant-calendar-picker-container {{ nzDropdownClassName }} ant-calendar-picker-container-placement-bottomLeft\" [ngStyle]=\"nzPopupStyle\">\n      <div class=\"ant-calendar ant-calendar-month ant-calendar-month-calendar\" tabindex=\"0\">\n        <div class=\"ant-calendar-month-calendar-content\">\n          <div class=\"ant-calendar-month-header-wrap\">\n            <calendar-header\n              [disabledMonth]=\"nzDisabledDate\"\n              [panelMode]=\"panelMode\"\n              (panelModeChange)=\"onPanelModeChange($event)\"\n              [value]=\"nzValue\"\n              (chooseYear)=\"onChooseValue('year', $event)\"\n              (chooseMonth)=\"onChooseValue('month', $event)\"\n              [locale]=\"nzLocale.lang\"\n              [enablePrev]=\"true\"\n              [enableNext]=\"true\"\n            ></calendar-header>\n          </div>\n          <calendar-footer *ngIf=\"extraFooter\" [extraFooter]=\"extraFooter\"></calendar-footer>\n        </div>\n      </div>\n    </div>\n  </div>\n</nz-picker>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef(function () { return NzMonthPickerComponent; })
                            }],
                        host: {
                            '[class.ant-calendar-picker]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzMonthPickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        NzMonthPickerComponent.propDecorators = {
            nzFormat: [{ type: i0.Input }]
        };
        return NzMonthPickerComponent;
    }(HeaderPickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRangePickerComponent = /** @class */ (function (_super) {
        __extends(NzRangePickerComponent, _super);
        function NzRangePickerComponent(i18n) {
            var _this = _super.call(this, i18n) || this;
            _this.isRange = true;
            return _this;
        }
        NzRangePickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-range-picker',
                        template: "<nz-picker\n  [isRange]=\"isRange\"\n  [value]=\"nzValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"nzOpen\"\n  [disabled]=\"nzDisabled\"\n  [format]=\"nzFormat\"\n  [allowClear]=\"nzAllowClear\"\n  [autoFocus]=\"nzAutoFocus\"\n  [className]=\"nzClassName\"\n  [placeholder]=\"nzPlaceHolder\"\n  [size]=\"nzSize\"\n  [style]=\"pickerStyle\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <date-range-popup *ngIf=\"realOpenState\"\n    [isRange]=\"isRange\"\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"nzMode\"\n    (panelModeChange)=\"nzOnPanelChange.emit($event)\"\n    [value]=\"nzValue\"\n    (valueChange)=\"onValueChange($event)\"\n    [locale]=\"nzLocale?.lang\"\n    [showToday]=\"realShowToday\"\n    [showTime]=\"nzShowTime\"\n    [format]=\"nzFormat\"\n    [dateRender]=\"nzDateRender\"\n    [disabledDate]=\"nzDisabledDate\"\n    [disabledTime]=\"nzDisabledTime\"\n    [placeholder]=\"nzPlaceHolder\"\n    [dropdownClassName]=\"nzDropdownClassName\"\n    [popupStyle]=\"nzPopupStyle\"\n    [extraFooter]=\"extraFooter\"\n    [ranges]=\"nzRanges\"\n    (resultOk)=\"onResultOk()\"\n    (closePicker)=\"closeOverlay()\"\n  ></date-range-popup>\n</nz-picker>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef(function () { return NzRangePickerComponent; })
                            }],
                        host: {
                            '[class.ant-calendar-picker]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzRangePickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        return NzRangePickerComponent;
    }(DateRangePickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzWeekPickerComponent = /** @class */ (function (_super) {
        __extends(NzWeekPickerComponent, _super);
        function NzWeekPickerComponent(i18n) {
            var _this = _super.call(this, i18n) || this;
            _this.showWeek = true;
            return _this;
        }
        NzWeekPickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-week-picker',
                        template: "<nz-picker\n  [isRange]=\"isRange\"\n  [value]=\"nzValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"nzOpen\"\n  [disabled]=\"nzDisabled\"\n  [format]=\"nzFormat\"\n  [allowClear]=\"nzAllowClear\"\n  [autoFocus]=\"nzAutoFocus\"\n  [className]=\"nzClassName\"\n  [placeholder]=\"nzPlaceHolder\"\n  [size]=\"nzSize\"\n  [style]=\"pickerStyle\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <date-range-popup *ngIf=\"realOpenState\"\n    [isRange]=\"isRange\"\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"nzMode\"\n    (panelModeChange)=\"nzOnPanelChange.emit($event)\"\n    [value]=\"nzValue\"\n    (valueChange)=\"onValueChange($event)\"\n    [locale]=\"nzLocale?.lang\"\n    [showToday]=\"realShowToday\"\n    [showTime]=\"nzShowTime\"\n    [format]=\"nzFormat\"\n    [dateRender]=\"nzDateRender\"\n    [disabledDate]=\"nzDisabledDate\"\n    [disabledTime]=\"nzDisabledTime\"\n    [placeholder]=\"nzPlaceHolder\"\n    [dropdownClassName]=\"nzDropdownClassName\"\n    [popupStyle]=\"nzPopupStyle\"\n    [extraFooter]=\"extraFooter\"\n    [ranges]=\"nzRanges\"\n    (resultOk)=\"onResultOk()\"\n    (closePicker)=\"closeOverlay()\"\n  ></date-range-popup>\n</nz-picker>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef(function () { return NzWeekPickerComponent; })
                            }],
                        host: {
                            '[class.ant-calendar-picker]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzWeekPickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        return NzWeekPickerComponent;
    }(DateRangePickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzYearPickerComponent = /** @class */ (function (_super) {
        __extends(NzYearPickerComponent, _super);
        function NzYearPickerComponent(i18n) {
            var _this = _super.call(this, i18n) || this;
            _this.nzFormat = 'yyyy';
            _this.endPanelMode = 'year';
            return _this;
        }
        NzYearPickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-year-picker',
                        template: "<nz-picker\n  [isRange]=\"false\"\n  [value]=\"nzValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"nzOpen\"\n  [disabled]=\"nzDisabled\"\n  [format]=\"nzFormat\"\n  [allowClear]=\"nzAllowClear\"\n  [autoFocus]=\"nzAutoFocus\"\n  [className]=\"nzClassName\"\n  [placeholder]=\"nzPlaceHolder\"\n  [size]=\"nzSize\"\n  [style]=\"nzStyle\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <div *ngIf=\"realOpenState\">\n    <div class=\"ant-calendar-picker-container {{ nzDropdownClassName }} ant-calendar-picker-container-placement-bottomLeft\" [ngStyle]=\"nzPopupStyle\">\n      <div class=\"ant-calendar ant-calendar-month ant-calendar-month-calendar\" tabindex=\"0\">\n        <div class=\"ant-calendar-month-calendar-content\">\n          <div class=\"ant-calendar-month-header-wrap\">\n            <calendar-header\n              [disabledMonth]=\"nzDisabledDate\"\n              [panelMode]=\"panelMode\"\n              (panelModeChange)=\"onPanelModeChange($event)\"\n              [value]=\"nzValue\"\n              (chooseYear)=\"onChooseValue('year', $event)\"\n              (chooseMonth)=\"onChooseValue('month', $event)\"\n              [locale]=\"nzLocale.lang\"\n              [enablePrev]=\"true\"\n              [enableNext]=\"true\"\n            ></calendar-header>\n          </div>\n          <calendar-footer *ngIf=\"extraFooter\" [extraFooter]=\"extraFooter\"></calendar-footer>\n        </div>\n      </div>\n    </div>\n  </div>\n</nz-picker>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef(function () { return NzYearPickerComponent; })
                            }],
                        host: {
                            '[class.ant-calendar-picker]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzYearPickerComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        NzYearPickerComponent.propDecorators = {
            nzFormat: [{ type: i0.Input }]
        };
        return NzYearPickerComponent;
    }(HeaderPickerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDatePickerModule = /** @class */ (function () {
        function NzDatePickerModule() {
        }
        NzDatePickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i3.CommonModule,
                            i2$1.OverlayModule,
                            LibPackerModule,
                            NzIconModule
                        ],
                        exports: [
                            NzDatePickerComponent,
                            NzRangePickerComponent,
                            NzMonthPickerComponent,
                            NzYearPickerComponent,
                            NzWeekPickerComponent
                        ],
                        declarations: [
                            HeaderPickerComponent,
                            DateRangePickerComponent,
                            NzPickerComponent,
                            NzDatePickerComponent,
                            NzMonthPickerComponent,
                            NzYearPickerComponent,
                            NzWeekPickerComponent,
                            NzRangePickerComponent
                        ],
                        providers: []
                    },] }
        ];
        return NzDatePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} prefix
     * @return {?}
     */
    function getRegExp(prefix) {
        /** @type {?} */
        var prefixArray = Array.isArray(prefix) ? prefix : [prefix];
        /** @type {?} */
        var prefixToken = prefixArray.join('').replace(/(\$|\^)/g, '\\$1');
        if (prefixArray.length > 1) {
            prefixToken = "[" + prefixToken + "]";
        }
        return new RegExp("(\\s|^)(" + prefixToken + ")[^\\s]*", 'g');
    }
    /**
     * @param {?} value
     * @param {?=} prefix
     * @return {?}
     */
    function getMentions(value, prefix) {
        if (prefix === void 0) {
            prefix = '@';
        }
        if (typeof value !== 'string') {
            return [];
        }
        /** @type {?} */
        var regex = getRegExp(prefix);
        /** @type {?} */
        var mentions = value.match(regex);
        return mentions !== null ? mentions.map(function (e) { return e.trim(); }) : [];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzGlobalMonitorService = /** @class */ (function () {
        function NzGlobalMonitorService() {
            this.counter = 0;
            this.lastClickPos = {
                x: 0,
                y: 0
            };
            this._navItemSource = new i0.EventEmitter();
            this._observeGlobalEvents();
        }
        /**
         * @return {?}
         */
        NzGlobalMonitorService.prototype.getGlobalCount = /**
         * @return {?}
         */
            function () {
                return ++this.counter;
            };
        /**
         * @param {?} status
         * @return {?}
         */
        NzGlobalMonitorService.prototype.setDocumentOverflowHidden = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                document.body.style.overflow = status ? 'hidden' : '';
            };
        /**
         * @return {?}
         */
        NzGlobalMonitorService.prototype._observeGlobalEvents = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // 监听document的点击事件，记录点击坐标，并抛出 documentClick 事件
                document.addEventListener('click', function (e) {
                    _this.lastClickPos = {
                        x: e.clientX,
                        y: e.clientY
                    };
                    _this._navItemSource.emit('documentClick');
                });
            };
        return NzGlobalMonitorService;
    }());
    new NzGlobalMonitorService();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // from https://github.com/component/textarea-caret-position
    /** @type {?} */
    var properties = [
        'direction',
        'boxSizing',
        'width',
        'height',
        'overflowX',
        'overflowY',
        'borderTopWidth',
        'borderRightWidth',
        'borderBottomWidth',
        'borderLeftWidth',
        'borderStyle',
        'paddingTop',
        'paddingRight',
        'paddingBottom',
        'paddingLeft',
        'fontStyle',
        'fontVariant',
        'fontWeight',
        'fontStretch',
        'fontSize',
        'fontSizeAdjust',
        'lineHeight',
        'fontFamily',
        'textAlign',
        'textTransform',
        'textIndent',
        'textDecoration',
        'letterSpacing',
        'wordSpacing',
        'tabSize',
        'MozTabSize'
    ];
    /** @type {?} */
    var isBrowser = (typeof window !== 'undefined');
    /** @type {?} */
    var isFirefox = (isBrowser && ( /** @type {?} */(window)).mozInnerScreenX != null);
    /** @type {?} */
    var _parseInt = function (str) { return parseInt(str, 10); };
    /**
     * @param {?} element
     * @param {?} position
     * @param {?=} options
     * @return {?}
     */
    function getCaretCoordinates(element, position, options) {
        if (!isBrowser) {
            throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');
        }
        /** @type {?} */
        var debug = options && options.debug || false;
        if (debug) {
            /** @type {?} */
            var el = document.querySelector('#input-textarea-caret-position-mirror-div');
            if (el) {
                el.parentNode.removeChild(el);
            }
        }
        /** @type {?} */
        var div = document.createElement('div');
        div.id = 'input-textarea-caret-position-mirror-div';
        document.body.appendChild(div);
        /** @type {?} */
        var style = div.style;
        /** @type {?} */
        var computed = window.getComputedStyle ? window.getComputedStyle(element) : ( /** @type {?} */(element)).currentStyle;
        /** @type {?} */
        var isInput = element.nodeName === 'INPUT';
        // Default textarea styles
        style.whiteSpace = 'pre-wrap';
        if (!isInput) {
            style.wordWrap = 'break-word'; // only for textarea-s
        }
        // Position off-screen
        style.position = 'absolute'; // required to return coordinates properly
        if (!debug) {
            style.visibility = 'hidden';
        } // not 'display: none' because we want rendering
        // Transfer the element's properties to the div
        properties.forEach(function (prop) {
            if (isInput && prop === 'lineHeight') {
                // Special case for <input>s because text is rendered centered and line height may be != height
                style.lineHeight = computed.height;
            }
            else {
                style[prop] = computed[prop];
            }
        });
        if (isFirefox) {
            // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275
            if (element.scrollHeight > _parseInt(computed.height)) {
                style.overflowY = 'scroll';
            }
        }
        else {
            style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'
        }
        div.textContent = element.value.substring(0, position);
        // The second special handling for input type="text" vs textarea:
        // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037
        if (isInput) {
            div.textContent = div.textContent.replace(/\s/g, '\u00a0');
        }
        /** @type {?} */
        var span = document.createElement('span');
        // Wrapping must be replicated *exactly*, including when a long word gets
        // onto the next line, with whitespace at the end of the line before (#7).
        // The  *only* reliable way to do that is to copy the *entire* rest of the
        // textarea's content into the <span> created at the caret position.
        // For inputs, just '.' would be enough, but no need to bother.
        span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all
        div.appendChild(span);
        /** @type {?} */
        var coordinates = {
            top: span.offsetTop + _parseInt(computed.borderTopWidth),
            left: span.offsetLeft + _parseInt(computed.borderLeftWidth),
            height: _parseInt(computed.lineHeight)
        };
        if (debug) {
            span.style.backgroundColor = '#eee';
            createDebugEle(element, coordinates);
        }
        else {
            document.body.removeChild(div);
        }
        return coordinates;
    }
    /**
     * @param {?} element
     * @param {?} coordinates
     * @return {?}
     */
    function createDebugEle(element, coordinates) {
        /** @type {?} */
        var fontSize = getComputedStyle(element).getPropertyValue('font-size');
        /** @type {?} */
        var rect = ( /** @type {?} */(document.querySelector('#DEBUG')))
            || document.createElement('div');
        document.body.appendChild(rect);
        rect.id = 'DEBUG';
        rect.style.position = 'absolute';
        rect.style.backgroundColor = 'red';
        rect.style.height = fontSize;
        rect.style.width = '1px';
        rect.style.top = element.getBoundingClientRect().top - element.scrollTop + window.pageYOffset + coordinates.top + "px";
        rect.style.left = element.getBoundingClientRect().left - element.scrollLeft + window.pageXOffset + coordinates.left + "px";
        console.log(rect.style.top);
        console.log(rect.style.left);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDividerComponent = /** @class */ (function () {
        function NzDividerComponent(elementRef, nzUpdateHostClassService) {
            this.elementRef = elementRef;
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.nzType = 'horizontal';
            this.nzOrientation = '';
            this.nzDashed = false;
        }
        /**
         * @return {?}
         */
        NzDividerComponent.prototype.setClass = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var orientationPrefix = (this.nzOrientation.length > 0) ? '-' + this.nzOrientation : this.nzOrientation;
                /** @type {?} */
                var classMap = (_a = {},
                    _a['ant-divider'] = true,
                    _a["ant-divider-" + this.nzType] = true,
                    _a["ant-divider-with-text" + orientationPrefix] = this.nzText,
                    _a["ant-divider-dashed"] = this.nzDashed,
                    _a);
                this.nzUpdateHostClassService.updateHostClass(this.elementRef.nativeElement, classMap);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzDividerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.setClass();
            };
        /**
         * @return {?}
         */
        NzDividerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClass();
            };
        NzDividerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-divider',
                        template: "<span *ngIf=\"nzText\" class=\"ant-divider-inner-text\">\n  <ng-container *nzStringTemplateOutlet=\"nzText\">{{ nzText }}</ng-container>\n</span>",
                        preserveWhitespaces: false,
                        providers: [NzUpdateHostClassService],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzDividerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NzUpdateHostClassService }
            ];
        };
        NzDividerComponent.propDecorators = {
            nzText: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }],
            nzOrientation: [{ type: i0.Input }],
            nzDashed: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzDividerComponent.prototype, "nzDashed", void 0);
        return NzDividerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDividerModule = /** @class */ (function () {
        function NzDividerModule() {
        }
        NzDividerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, NzAddOnModule],
                        declarations: [NzDividerComponent],
                        exports: [NzDividerComponent]
                    },] }
        ];
        return NzDividerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMeasureScrollbarService = /** @class */ (function () {
        // tslint:disable-next-line:no-any
        function NzMeasureScrollbarService(document) {
            this.document = document;
            this.scrollbarMeasure = {
                position: 'absolute',
                top: '-9999px',
                width: '50px',
                height: '50px',
                overflow: 'scroll'
            };
            this.initScrollBarWidth();
        }
        Object.defineProperty(NzMeasureScrollbarService.prototype, "scrollBarWidth", {
            get: /**
             * @return {?}
             */ function () {
                if (isNotNil(this._scrollbarWidth)) {
                    return this._scrollbarWidth;
                }
                this.initScrollBarWidth();
                return this._scrollbarWidth;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzMeasureScrollbarService.prototype.initScrollBarWidth = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scrollDiv = this.document.createElement('div');
                for (var scrollProp in this.scrollbarMeasure) {
                    if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {
                        scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];
                    }
                }
                this.document.body.appendChild(scrollDiv);
                /** @type {?} */
                var width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                this.document.body.removeChild(scrollDiv);
                this._scrollbarWidth = width;
            };
        NzMeasureScrollbarService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NzMeasureScrollbarService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] }
            ];
        };
        /** @nocollapse */ NzMeasureScrollbarService.ngInjectableDef = i0.defineInjectable({ factory: function NzMeasureScrollbarService_Factory() { return new NzMeasureScrollbarService(i0.inject(i3.DOCUMENT)); }, token: NzMeasureScrollbarService, providedIn: "root" });
        return NzMeasureScrollbarService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzBlockScrollStrategy = /** @class */ (function () {
        function NzBlockScrollStrategy(document, renderer, nzMeasureScrollbarService) {
            this.document = document;
            this.renderer = renderer;
            this.nzMeasureScrollbarService = nzMeasureScrollbarService;
        }
        /**
         * @return {?}
         */
        NzBlockScrollStrategy.prototype.attach = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        NzBlockScrollStrategy.prototype.enable = /**
         * @return {?}
         */
            function () {
                this.renderer.setStyle(document.body, 'overflow', 'hidden');
                this.renderer.setStyle(this.document.body, 'padding-right', this.nzMeasureScrollbarService.scrollBarWidth + "px");
            };
        /**
         * @return {?}
         */
        NzBlockScrollStrategy.prototype.disable = /**
         * @return {?}
         */
            function () {
                this.renderer.removeStyle(document.body, 'overflow');
                this.renderer.removeStyle(document.body, 'padding-right');
            };
        return NzBlockScrollStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzScrollStrategyOptions = /** @class */ (function () {
        function NzScrollStrategyOptions(rendererFactory, nzMeasureScrollbarService, 
        // tslint:disable-next-line:no-any
        document) {
            var _this = this;
            this.nzMeasureScrollbarService = nzMeasureScrollbarService;
            this.block = function () { return new NzBlockScrollStrategy(_this.document, _this.renderer, _this.nzMeasureScrollbarService); };
            this.document = document;
            this.renderer = rendererFactory.createRenderer(null, null);
        }
        NzScrollStrategyOptions.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        NzScrollStrategyOptions.ctorParameters = function () {
            return [
                { type: i0.RendererFactory2 },
                { type: NzMeasureScrollbarService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] }
            ];
        };
        /** @nocollapse */ NzScrollStrategyOptions.ngInjectableDef = i0.defineInjectable({ factory: function NzScrollStrategyOptions_Factory() { return new NzScrollStrategyOptions(i0.inject(i0.RendererFactory2), i0.inject(NzMeasureScrollbarService), i0.inject(i3.DOCUMENT)); }, token: NzScrollStrategyOptions, providedIn: "root" });
        return NzScrollStrategyOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     * @template R
     */
    var /**
     * @abstract
     * @template R
     */ NzDrawerRef = /** @class */ (function () {
        function NzDrawerRef() {
        }
        return NzDrawerRef;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var DRAWER_ANIMATE_DURATION = 300;
    /**
     * @template T, R, D
     */
    var NzDrawerComponent = /** @class */ (function (_super) {
        __extends(NzDrawerComponent, _super);
        function NzDrawerComponent(
        // tslint:disable-next-line:no-any
        document, renderer, overlay, elementRef, injector, changeDetectorRef, focusTrapFactory, nzScrollStrategyOptions, viewContainerRef) {
            var _this = _super.call(this) || this;
            _this.document = document;
            _this.renderer = renderer;
            _this.overlay = overlay;
            _this.elementRef = elementRef;
            _this.injector = injector;
            _this.changeDetectorRef = changeDetectorRef;
            _this.focusTrapFactory = focusTrapFactory;
            _this.nzScrollStrategyOptions = nzScrollStrategyOptions;
            _this.viewContainerRef = viewContainerRef;
            _this.isOpen = false;
            _this.templateContext = {
                $implicit: undefined,
                drawerRef: /** @type {?} */ (_this)
            };
            _this.nzClosable = true;
            _this.nzMaskClosable = true;
            _this.nzMask = true;
            _this.nzPlacement = 'right';
            _this.nzMaskStyle = {};
            _this.nzBodyStyle = {};
            _this.nzWidth = 256;
            _this.nzHeight = 256;
            _this.nzZIndex = 1000;
            _this.nzOffsetX = 0;
            _this.nzOffsetY = 0;
            _this.nzOnViewInit = new i0.EventEmitter();
            _this.nzOnClose = new i0.EventEmitter();
            _this.nzAfterOpen = new rxjs.Subject();
            _this.nzAfterClose = new rxjs.Subject();
            return _this;
        }
        Object.defineProperty(NzDrawerComponent.prototype, "offsetTransform", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.isOpen || (this.nzOffsetX + this.nzOffsetY) === 0) {
                    return null;
                }
                switch (this.nzPlacement) {
                    case 'left':
                        return "translateX(" + this.nzOffsetX + "px)";
                    case 'right':
                        return "translateX(-" + this.nzOffsetX + "px)";
                    case 'top':
                        return "translateY(" + this.nzOffsetY + "px)";
                    case 'bottom':
                        return "translateY(-" + this.nzOffsetY + "px)";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "transform", {
            get: /**
             * @return {?}
             */ function () {
                if (this.isOpen) {
                    return null;
                }
                switch (this.nzPlacement) {
                    case 'left':
                        return "translateX(-100%)";
                    case 'right':
                        return "translateX(100%)";
                    case 'top':
                        return "translateY(-100%)";
                    case 'bottom':
                        return "translateY(100%)";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "width", {
            get: /**
             * @return {?}
             */ function () {
                return this.isLeftOrRight ? toCssPixel(this.nzWidth) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "height", {
            get: /**
             * @return {?}
             */ function () {
                return !this.isLeftOrRight ? toCssPixel(this.nzHeight) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "isLeftOrRight", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzPlacement === 'left' || this.nzPlacement === 'right';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "nzVisible", {
            get: /**
             * @return {?}
             */ function () {
                return this.isOpen;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isOpen = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "afterOpen", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzAfterOpen.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDrawerComponent.prototype, "afterClose", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzAfterClose.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NzDrawerComponent.prototype.isNonEmptyString = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return typeof value === 'string' && value !== '';
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzDrawerComponent.prototype.isTemplateRef = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value instanceof i0.TemplateRef;
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.attachOverlay();
                this.updateOverlayStyle();
                this.updateBodyOverflow();
                this.templateContext = { $implicit: this.nzContentParams, drawerRef: /** @type {?} */ (this) };
                this.changeDetectorRef.detectChanges();
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.attachBodyContent();
                setTimeout(function () {
                    _this.nzOnViewInit.emit();
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzDrawerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes.hasOwnProperty('nzVisible')) {
                    /** @type {?} */
                    var value = changes["nzVisible"].currentValue;
                    this.updateOverlayStyle();
                    if (value) {
                        this.updateBodyOverflow();
                        this.savePreviouslyFocusedElement();
                        this.trapFocus();
                    }
                    else {
                        setTimeout(function () {
                            _this.updateBodyOverflow();
                            _this.restoreFocus();
                        }, DRAWER_ANIMATE_DURATION);
                    }
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.disposeOverlay();
            };
        /**
         * @param {?=} result
         * @return {?}
         */
        NzDrawerComponent.prototype.close = /**
         * @param {?=} result
         * @return {?}
         */
            function (result) {
                var _this = this;
                this.isOpen = false;
                this.updateOverlayStyle();
                this.changeDetectorRef.detectChanges();
                setTimeout(function () {
                    _this.updateBodyOverflow();
                    _this.restoreFocus();
                    _this.nzAfterClose.next(result);
                    _this.nzAfterClose.complete();
                }, DRAWER_ANIMATE_DURATION);
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.isOpen = true;
                this.updateOverlayStyle();
                this.updateBodyOverflow();
                this.savePreviouslyFocusedElement();
                this.trapFocus();
                this.changeDetectorRef.detectChanges();
                setTimeout(function () {
                    _this.nzAfterOpen.next();
                }, DRAWER_ANIMATE_DURATION);
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.closeClick = /**
         * @return {?}
         */
            function () {
                this.nzOnClose.emit();
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.maskClick = /**
         * @return {?}
         */
            function () {
                if (this.nzMaskClosable && this.nzMask) {
                    this.nzOnClose.emit();
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.attachBodyContent = /**
         * @return {?}
         */
            function () {
                this.bodyPortalOutlet.dispose();
                if (this.nzContent instanceof i0.Type) {
                    /** @type {?} */
                    var childInjector = new portal.PortalInjector(this.injector, new WeakMap([[NzDrawerRef, this]]));
                    /** @type {?} */
                    var componentPortal = new portal.ComponentPortal(this.nzContent, null, childInjector);
                    /** @type {?} */
                    var componentRef = this.bodyPortalOutlet.attachComponentPortal(componentPortal);
                    Object.assign(componentRef.instance, this.nzContentParams);
                    componentRef.changeDetectorRef.detectChanges();
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.attachOverlay = /**
         * @return {?}
         */
            function () {
                if (!this.overlayRef) {
                    this.portal = new portal.TemplatePortal(this.drawerTemplate, this.viewContainerRef);
                    this.overlayRef = this.overlay.create(this.getOverlayConfig());
                }
                if (this.overlayRef && !this.overlayRef.hasAttached()) {
                    this.overlayRef.attach(this.portal);
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.disposeOverlay = /**
         * @return {?}
         */
            function () {
                this.overlayRef.dispose();
                this.overlayRef = null;
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.getOverlayConfig = /**
         * @return {?}
         */
            function () {
                return new i2$1.OverlayConfig({
                    scrollStrategy: this.nzScrollStrategyOptions.block()
                });
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.updateOverlayStyle = /**
         * @return {?}
         */
            function () {
                if (this.overlayRef && this.overlayRef.overlayElement) {
                    this.renderer.setStyle(this.overlayRef.overlayElement, 'pointer-events', this.isOpen ? 'auto' : 'none');
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.updateBodyOverflow = /**
         * @return {?}
         */
            function () {
                if (this.overlayRef) {
                    if (this.isOpen) {
                        this.overlayRef.getConfig().scrollStrategy.enable();
                    }
                    else {
                        this.overlayRef.getConfig().scrollStrategy.disable();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.savePreviouslyFocusedElement = /**
         * @return {?}
         */
            function () {
                if (this.document) {
                    this.previouslyFocusedElement = /** @type {?} */ (this.document.activeElement);
                    this.previouslyFocusedElement.blur();
                }
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.trapFocus = /**
         * @return {?}
         */
            function () {
                if (!this.focusTrap) {
                    this.focusTrap = this.focusTrapFactory.create(this.overlayRef.overlayElement);
                }
                this.focusTrap.focusInitialElementWhenReady();
            };
        /**
         * @return {?}
         */
        NzDrawerComponent.prototype.restoreFocus = /**
         * @return {?}
         */
            function () {
                if (this.previouslyFocusedElement) {
                    this.previouslyFocusedElement.focus();
                }
                if (this.focusTrap) {
                    this.focusTrap.destroy();
                }
            };
        NzDrawerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-drawer',
                        template: "<ng-template #drawerTemplate>\n  <div\n    class=\"ant-drawer\"\n    [class.ant-drawer-open]=\"isOpen\"\n    [class.ant-drawer-top]=\"nzPlacement === 'top'\"\n    [class.ant-drawer-bottom]=\"nzPlacement === 'bottom'\"\n    [class.ant-drawer-right]=\"nzPlacement === 'right'\"\n    [class.ant-drawer-left]=\"nzPlacement === 'left'\"\n    [style.transform]=\"offsetTransform\">\n    <div  class=\"ant-drawer-mask\" (click)=\"maskClick()\" *ngIf=\"nzMask\" [style.zIndex]=\"nzZIndex\" [ngStyle]=\"nzMaskStyle\"></div>\n    <div class=\"ant-drawer-content-wrapper {{ nzWrapClassName }}\"\n         [style.zIndex]=\"nzZIndex\"\n         [style.width]=\"width\"\n         [style.height]=\"height\"\n         [style.transform]=\"transform\">\n      <div class=\"ant-drawer-content\">\n        <div class=\"ant-drawer-wrapper-body\"\n          [style.overflow]=\"isLeftOrRight ? 'auto' : null\"\n          [style.height]=\"isLeftOrRight ? '100%' : null\">\n          <div *ngIf=\"nzTitle\" class=\"ant-drawer-header\">\n            <div class=\"ant-drawer-title\">\n              <ng-container [ngSwitch]=\"true\">\n                <ng-container *ngSwitchCase=\"isTemplateRef(nzTitle)\" [ngTemplateOutlet]=\"nzTitle\"></ng-container>\n                <ng-container *ngSwitchCase=\"isNonEmptyString(nzTitle)\"><div [innerHTML]=\"nzTitle\"></div></ng-container>\n              </ng-container>\n            </div>\n          </div>\n          <button *ngIf=\"nzClosable\" (click)=\"closeClick()\" aria-label=\"Close\" class=\"ant-drawer-close\">\n            <span class=\"ant-drawer-close-x\"><i nz-icon type=\"close\"></i></span>\n          </button>\n          <div class=\"ant-drawer-body\" [ngStyle]=\"nzBodyStyle\">\n            <ng-template cdkPortalOutlet></ng-template>\n            <ng-container *ngIf=\"isTemplateRef(nzContent)\">\n              <ng-container *ngTemplateOutlet=\"nzContent; context: templateContext\"></ng-container>\n            </ng-container>\n            <ng-content *ngIf=\"!nzContent\"></ng-content>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>",
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzDrawerComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.Renderer2 },
                { type: i2$1.Overlay },
                { type: i0.ElementRef },
                { type: i0.Injector },
                { type: i0.ChangeDetectorRef },
                { type: a11y.FocusTrapFactory },
                { type: NzScrollStrategyOptions },
                { type: i0.ViewContainerRef }
            ];
        };
        NzDrawerComponent.propDecorators = {
            drawerTemplate: [{ type: i0.ViewChild, args: ['drawerTemplate',] }],
            contentTemplate: [{ type: i0.ViewChild, args: ['contentTemplate',] }],
            bodyPortalOutlet: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet,] }],
            nzContent: [{ type: i0.Input }],
            nzClosable: [{ type: i0.Input }],
            nzMaskClosable: [{ type: i0.Input }],
            nzMask: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzPlacement: [{ type: i0.Input }],
            nzMaskStyle: [{ type: i0.Input }],
            nzBodyStyle: [{ type: i0.Input }],
            nzWrapClassName: [{ type: i0.Input }],
            nzWidth: [{ type: i0.Input }],
            nzHeight: [{ type: i0.Input }],
            nzZIndex: [{ type: i0.Input }],
            nzOffsetX: [{ type: i0.Input }],
            nzOffsetY: [{ type: i0.Input }],
            nzVisible: [{ type: i0.Input }],
            nzOnViewInit: [{ type: i0.Output }],
            nzOnClose: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzDrawerComponent.prototype, "nzClosable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzDrawerComponent.prototype, "nzMaskClosable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzDrawerComponent.prototype, "nzMask", void 0);
        return NzDrawerComponent;
    }(NzDrawerRef));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template R
     */
    var /**
     * @template R
     */ DrawerBuilderForService$$1 = /** @class */ (function () {
        function DrawerBuilderForService$$1(overlay, options) {
            var _this = this;
            this.overlay = overlay;
            this.options = options;
            this.unsubscribe$ = new rxjs.Subject();
            this.createDrawer();
            this.updateOptions(options);
            this.drawerRef.instance.nzOnViewInit
                .pipe(operators.takeUntil(this.unsubscribe$))
                .subscribe(function () {
                _this.drawerRef.instance.open();
            });
            this.drawerRef.instance.nzOnClose
                .subscribe(function () {
                _this.drawerRef.instance.close();
            });
            this.drawerRef.instance.afterClose
                .pipe(operators.takeUntil(this.unsubscribe$))
                .subscribe(function () {
                _this.overlayRef.dispose();
                _this.drawerRef = null;
                _this.unsubscribe$.next();
                _this.unsubscribe$.complete();
            });
        }
        /**
         * @return {?}
         */
        DrawerBuilderForService$$1.prototype.getInstance = /**
         * @return {?}
         */
            function () {
                return this.drawerRef && this.drawerRef.instance;
            };
        /**
         * @return {?}
         */
        DrawerBuilderForService$$1.prototype.createDrawer = /**
         * @return {?}
         */
            function () {
                this.overlayRef = this.overlay.create();
                this.drawerRef = this.overlayRef.attach(new portal.ComponentPortal(NzDrawerComponent));
            };
        /**
         * @param {?} options
         * @return {?}
         */
        DrawerBuilderForService$$1.prototype.updateOptions = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                Object.assign(this.drawerRef.instance, options);
            };
        return DrawerBuilderForService$$1;
    }());
    var NzDrawerService$$1 = /** @class */ (function () {
        function NzDrawerService$$1(overlay) {
            this.overlay = overlay;
        }
        // tslint:disable-next-line:no-any
        /**
         * @template T, D, R
         * @param {?} options
         * @return {?}
         */
        NzDrawerService$$1.prototype.create = /**
         * @template T, D, R
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return new DrawerBuilderForService$$1(this.overlay, options).getInstance();
            };
        NzDrawerService$$1.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        NzDrawerService$$1.ctorParameters = function () {
            return [
                { type: i2$1.Overlay }
            ];
        };
        /** @nocollapse */ NzDrawerService$$1.ngInjectableDef = i0.defineInjectable({ factory: function NzDrawerService_Factory() { return new NzDrawerService$$1(i0.inject(i2$1.Overlay)); }, token: NzDrawerService$$1, providedIn: "root" });
        return NzDrawerService$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDrawerModule = /** @class */ (function () {
        function NzDrawerModule() {
        }
        NzDrawerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, i2$1.OverlayModule, portal.PortalModule, NzIconModule],
                        exports: [NzDrawerComponent],
                        declarations: [NzDrawerComponent],
                        entryComponents: [NzDrawerComponent],
                        providers: [NzDrawerService$$1]
                    },] }
        ];
        return NzDrawerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMenuDividerDirective = /** @class */ (function () {
        function NzMenuDividerDirective() {
        }
        NzMenuDividerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-menu-divider]',
                        host: {
                            '[class.ant-dropdown-menu-item-divider]': 'true'
                        }
                    },] }
        ];
        return NzMenuDividerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMenuGroupComponent = /** @class */ (function () {
        function NzMenuGroupComponent() {
        }
        NzMenuGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-menu-group]',
                        preserveWhitespaces: false,
                        template: "<div class=\"ant-menu-item-group-title\">\n  <ng-content select=\"[title]\"></ng-content>\n</div>\n<ul class=\"ant-menu-item-group-list\">\n  <ng-content></ng-content>\n</ul>",
                        host: {
                            '[class.ant-menu-item-group]': 'true'
                        }
                    }] }
        ];
        return NzMenuGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMenuDirective = /** @class */ (function () {
        function NzMenuDirective(el) {
            this.el = el;
            this._selectable = true;
            this._inlineCollapsed = false;
            this._inDropDown = false;
            /**
             * view init flat
             */
            this.isInit = false;
            /**
             * opened index of array
             */
            this.subMenusOpenIndex = [];
            /**
             * collection of menu item
             */
            this.menuItems = [];
            /**
             * collection of sub menu
             */
            this.subMenus = [];
            this.nzTheme = 'light';
            this.nzInlineIndent = 24;
            this.nzMode = 'vertical';
            this.nzClick = new i0.EventEmitter();
        }
        Object.defineProperty(NzMenuDirective.prototype, "nzInDropDown", {
            get: /**
             * @return {?}
             */ function () {
                return this._inDropDown;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._inDropDown = toBoolean(value);
                this.nzSelectable = !this._inDropDown;
                this.menuItems.forEach(function (menu) { return menu.isInDropDown = _this._inDropDown; });
                this.subMenus.forEach(function (subMenu) { return subMenu.isInDropDown = _this._inDropDown; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "nzSelectable", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectable;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selectable = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "nzInlineCollapsed", {
            get: /**
             * @return {?}
             */ function () {
                return this._inlineCollapsed;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._inlineCollapsed = toBoolean(value);
                if (this.isInit) {
                    this.updateInlineCollapse();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzMenuDirective.prototype.updateInlineCollapse = /**
         * @return {?}
         */
            function () {
                if (this._inlineCollapsed) {
                    this.hideSubMenus();
                    this.nzMode = 'vertical';
                }
                else {
                    this.reductionSubMenus();
                    this.nzMode = this.cacheMode;
                }
            };
        Object.defineProperty(NzMenuDirective.prototype, "isInDropDownClass", {
            /** define host class */
            get: /**
             * define host class
             * @return {?}
             */ function () {
                return this.nzInDropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "isNotInDropDownClass", {
            get: /**
             * @return {?}
             */ function () {
                return !this.nzInDropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setDropDownThemeLightClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzInDropDown && (this.nzTheme === 'light');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setDropDownThemeDarkClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzInDropDown && (this.nzTheme === 'dark');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setMenuThemeLightClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzInDropDown) && (this.nzTheme === 'light');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setMenuThemeDarkClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzInDropDown) && (this.nzTheme === 'dark');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setMenuVerticalClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzInDropDown) && (this.nzMode === 'vertical');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setMenuHorizontalClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzInDropDown) && (this.nzMode === 'horizontal');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setMenuInlineClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzInDropDown) && (this.nzMode === 'inline');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuDirective.prototype, "setMenuInlineCollapsedClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzInDropDown) && (this.nzMode !== 'horizontal') && this.nzInlineCollapsed;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzMenuDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.isInit = true;
                this.cacheMode = this.nzMode;
                this.updateInlineCollapse();
            };
        /** trigger when menu item clicked */
        /**
         * trigger when menu item clicked
         * @return {?}
         */
        NzMenuDirective.prototype.clearAllSelected = /**
         * trigger when menu item clicked
         * @return {?}
         */
            function () {
                this.menuItems.forEach(function (menu) { return menu.nzSelected = false; });
            };
        /**
         * @return {?}
         */
        NzMenuDirective.prototype.hideSubMenus = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subMenusOpenIndex = [];
                this.subMenus.forEach(function (submenu, index) {
                    if (submenu.nzOpen) {
                        _this.subMenusOpenIndex.push(index);
                    }
                    submenu.nzOpen = false;
                });
            };
        /**
         * @return {?}
         */
        NzMenuDirective.prototype.reductionSubMenus = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subMenusOpenIndex.forEach(function (i) { return _this.subMenus[i].nzOpen = true; });
                this.subMenusOpenIndex = [];
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzMenuDirective.prototype.clickItem = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.nzClick.emit(value);
            };
        NzMenuDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-menu]'
                    },] }
        ];
        /** @nocollapse */
        NzMenuDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NzMenuDirective.propDecorators = {
            nzTheme: [{ type: i0.Input }],
            nzInlineIndent: [{ type: i0.Input }],
            nzMode: [{ type: i0.Input }],
            nzClick: [{ type: i0.Output }],
            nzInDropDown: [{ type: i0.Input }],
            nzSelectable: [{ type: i0.Input }],
            nzInlineCollapsed: [{ type: i0.Input }],
            isInDropDownClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu',] }, { type: i0.HostBinding, args: ['class.ant-menu-dropdown-vertical',] }, { type: i0.HostBinding, args: ['class.ant-dropdown-menu-root',] }],
            isNotInDropDownClass: [{ type: i0.HostBinding, args: ['class.ant-menu',] }, { type: i0.HostBinding, args: ['class.ant-menu-root',] }],
            setDropDownThemeLightClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-light',] }],
            setDropDownThemeDarkClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-dark',] }],
            setMenuThemeLightClass: [{ type: i0.HostBinding, args: ['class.ant-menu-light',] }],
            setMenuThemeDarkClass: [{ type: i0.HostBinding, args: ['class.ant-menu-dark',] }],
            setMenuVerticalClass: [{ type: i0.HostBinding, args: ['class.ant-menu-vertical',] }],
            setMenuHorizontalClass: [{ type: i0.HostBinding, args: ['class.ant-menu-horizontal',] }],
            setMenuInlineClass: [{ type: i0.HostBinding, args: ['class.ant-menu-inline',] }],
            setMenuInlineCollapsedClass: [{ type: i0.HostBinding, args: ['class.ant-menu-inline-collapsed',] }]
        };
        return NzMenuDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDropDownDirective = /** @class */ (function () {
        function NzDropDownDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.$mouseenter = new rxjs.Subject();
            this.$mouseleave = new rxjs.Subject();
            this.$click = new rxjs.Subject();
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NzDropDownDirective.prototype.onMouseEnter = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.$mouseenter.next(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzDropDownDirective.prototype.onMouseLeave = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.$mouseleave.next(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzDropDownDirective.prototype.onClick = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.stopPropagation();
                this.$click.next(e);
            };
        /**
         * @return {?}
         */
        NzDropDownDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.elementRef.nativeElement.nodeName === 'A') {
                    this.renderer.addClass(this.elementRef.nativeElement, 'ant-dropdown-link');
                }
            };
        NzDropDownDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-dropdown]',
                        host: {
                            '[class.ant-dropdown-trigger]': 'true'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzDropDownDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzDropDownDirective.propDecorators = {
            onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter', ['$event'],] }],
            onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave', ['$event'],] }],
            onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
        };
        return NzDropDownDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDropDownComponent = /** @class */ (function () {
        function NzDropDownComponent(renderer, changeDetector) {
            var _this = this;
            this.renderer = renderer;
            this.changeDetector = changeDetector;
            this._clickHide = true;
            this._visible = false;
            this._disabled = false;
            this.unsubscribe$ = new rxjs.Subject();
            this.hasFilterButton = false;
            this.triggerWidth = 0;
            this.placement = 'bottomLeft';
            this.dropDownPosition = 'bottom';
            this.positions = __spread(DEFAULT_DROPDOWN_POSITIONS);
            this.$subOpen = new rxjs.BehaviorSubject(false);
            this.$visibleChange = new rxjs.Subject();
            this.nzTrigger = 'hover';
            this.nzVisibleChange = new i0.EventEmitter();
            this.onVisibleChange = function (visible) {
                if (visible) {
                    _this.setTriggerWidth();
                }
                if (_this.nzVisible !== visible) {
                    _this.nzVisible = visible;
                    _this.nzVisibleChange.emit(_this.nzVisible);
                }
                _this.changeDetector.markForCheck();
            };
        }
        Object.defineProperty(NzDropDownComponent.prototype, "nzClickHide", {
            get: /**
             * @return {?}
             */ function () {
                return this._clickHide;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._clickHide = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDropDownComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
                if (this._disabled) {
                    this.renderer.setAttribute(this.nzOrigin.elementRef.nativeElement, 'disabled', '');
                }
                else {
                    this.renderer.removeAttribute(this.nzOrigin.elementRef.nativeElement, 'disabled');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDropDownComponent.prototype, "nzVisible", {
            get: /**
             * @return {?}
             */ function () {
                return this._visible;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._visible = toBoolean(value);
                /** handle nzVisible change with mouse event **/
                this.$visibleChange.next(this._visible);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzDropDownComponent.prototype, "nzPlacement", {
            get: /**
             * @return {?}
             */ function () {
                return this.placement;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.placement = value;
                this.dropDownPosition = (this.nzPlacement.indexOf('top') !== -1) ? 'top' : 'bottom';
                this.positions.unshift(/** @type {?} */ (POSITION_MAP[this.placement]));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.onClickEvent = /**
         * @return {?}
         */
            function () {
                if (this.nzTrigger === 'click') {
                    this.show();
                }
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.onMouseEnterEvent = /**
         * @return {?}
         */
            function () {
                if (this.nzTrigger === 'hover') {
                    this.show();
                }
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.onMouseLeaveEvent = /**
         * @return {?}
         */
            function () {
                if (this.nzTrigger === 'hover') {
                    this.hide();
                }
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.$visibleChange.next(false);
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                this.$visibleChange.next(true);
            };
        /**
         * @param {?} position
         * @return {?}
         */
        NzDropDownComponent.prototype.onPositionChange = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this.dropDownPosition = position.connectionPair.originY;
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.setTriggerWidth = /**
         * @return {?}
         */
            function () {
                this.triggerWidth = this.nzOrigin.elementRef.nativeElement.getBoundingClientRect().width;
                /** should remove after https://github.com/angular/material2/pull/8765 merged **/
                if (this.cdkOverlay && this.cdkOverlay.overlayRef) {
                    this.cdkOverlay.overlayRef.updateSize({
                        minWidth: this.triggerWidth
                    });
                }
            };
        /**
         * @param {?} observable$
         * @return {?}
         */
        NzDropDownComponent.prototype.startSubscribe = /**
         * @param {?} observable$
         * @return {?}
         */
            function (observable$) {
                /** @type {?} */
                var $pre = observable$;
                if (this.nzClickHide && this.nzMenu) {
                    /** @type {?} */
                    var $menuItemClick = this.nzMenu.nzClick.asObservable().pipe(operators.mapTo(false));
                    $pre = rxjs.merge($pre, $menuItemClick);
                }
                /** @type {?} */
                var final$ = rxjs.combineLatest($pre, this.$subOpen).pipe(operators.map(function (value) { return value[0] || value[1]; }), operators.debounceTime(50), operators.distinctUntilChanged());
                final$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(this.onVisibleChange);
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.nzMenu) {
                    this.nzMenu.nzInDropDown = true;
                }
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        /**
         * @return {?}
         */
        NzDropDownComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var mouse$;
                if (this.nzTrigger === 'hover') {
                    /** @type {?} */
                    var mouseEnterOrigin$ = this.nzOrigin.$mouseenter.pipe(operators.mapTo(true));
                    /** @type {?} */
                    var mouseLeaveOrigin$ = this.nzOrigin.$mouseleave.pipe(operators.mapTo(false));
                    mouse$ = rxjs.merge(mouseLeaveOrigin$, mouseEnterOrigin$);
                }
                if (this.nzTrigger === 'click') {
                    mouse$ = this.nzOrigin.$click.pipe(operators.mapTo(true));
                }
                /** @type {?} */
                var observable$ = rxjs.merge(this.$visibleChange, mouse$);
                this.startSubscribe(observable$);
            };
        Object.defineProperty(NzDropDownComponent.prototype, "hasBackdrop", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzTrigger === 'click';
            },
            enumerable: true,
            configurable: true
        });
        NzDropDownComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-dropdown',
                        preserveWhitespaces: false,
                        animations: [
                            dropDownAnimation
                        ],
                        template: "<ng-content select=\"[nz-dropdown]\"></ng-content>\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"nzOrigin\"\n  (backdropClick)=\"hide()\"\n  (detach)=\"hide()\"\n  [cdkConnectedOverlayMinWidth]=\"triggerWidth\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayOpen]=\"nzVisible\">\n  <div\n    class=\"{{'ant-dropdown ant-dropdown-placement-'+nzPlacement}}\"\n    [@dropDownAnimation]=\"dropDownPosition\"\n    (mouseenter)=\"onMouseEnterEvent()\"\n    (mouseleave)=\"onMouseLeaveEvent()\"\n    [style.minWidth.px]=\"triggerWidth\">\n    <div [class.ant-table-filter-dropdown]=\"hasFilterButton\">\n      <ng-content select=\"[nz-menu]\"></ng-content>\n      <ng-content select=\".ant-table-filter-dropdown-btns\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n  </div>\n</ng-template>",
                        styles: ["\n      .ant-dropdown {\n        top: 100%;\n        left: 0;\n        position: relative;\n        width: 100%;\n        margin-top: 4px;\n        margin-bottom: 4px;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzDropDownComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzDropDownComponent.propDecorators = {
            hasFilterButton: [{ type: i0.Input }],
            nzOrigin: [{ type: i0.ContentChild, args: [NzDropDownDirective,] }],
            nzMenu: [{ type: i0.ContentChild, args: [NzMenuDirective,] }],
            nzTrigger: [{ type: i0.Input }],
            nzVisibleChange: [{ type: i0.Output }],
            cdkOverlay: [{ type: i0.ViewChild, args: [i2$1.CdkConnectedOverlay,] }],
            nzClickHide: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzVisible: [{ type: i0.Input }],
            nzPlacement: [{ type: i0.Input }]
        };
        return NzDropDownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDropDownButtonComponent = /** @class */ (function (_super) {
        __extends(NzDropDownButtonComponent, _super);
        function NzDropDownButtonComponent(renderer, changeDetector) {
            var _this = _super.call(this, renderer, changeDetector) || this;
            _this.nzSize = 'default';
            _this.nzType = 'default';
            _this.nzClick = new i0.EventEmitter();
            _this.onVisibleChange = function (visible) {
                if (_this.nzDisabled) {
                    return;
                }
                if (visible) {
                    _this.setTriggerWidth();
                }
                if (_this.nzVisible !== visible) {
                    _this.nzVisible = visible;
                    _this.nzVisibleChange.emit(_this.nzVisible);
                }
                _this.changeDetector.markForCheck();
            };
            return _this;
        }
        /** rewrite afterViewInit hook */
        /**
         * rewrite afterViewInit hook
         * @return {?}
         */
        NzDropDownButtonComponent.prototype.ngAfterViewInit = /**
         * rewrite afterViewInit hook
         * @return {?}
         */
            function () {
                this.startSubscribe(this.$visibleChange);
            };
        NzDropDownButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-dropdown-button',
                        preserveWhitespaces: false,
                        animations: [
                            dropDownAnimation
                        ],
                        template: "<div class=\"ant-btn-group ant-dropdown-button\" nz-dropdown>\n  <button\n    type=\"button\"\n    nz-button\n    [disabled]=\"nzDisabled\"\n    [nzType]=\"nzType\"\n    [nzSize]=\"nzSize\"\n    (click)=\"nzClick.emit($event)\">\n    <span><ng-content></ng-content></span>\n  </button>\n  <button\n    nz-button\n    type=\"button\"\n    class=\"ant-dropdown-trigger\"\n    [nzType]=\"nzType\"\n    [nzSize]=\"nzSize\"\n    [disabled]=\"nzDisabled\"\n    (click)=\"onClickEvent()\"\n    (mouseenter)=\"onMouseEnterEvent()\"\n    (mouseleave)=\"onMouseLeaveEvent()\">\n    <i nz-icon type=\"ellipsis\"></i>\n  </button>\n</div>\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"nzOrigin\"\n  (backdropClick)=\"hide()\"\n  (detach)=\"hide()\"\n  [cdkConnectedOverlayMinWidth]=\"triggerWidth\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayOpen]=\"nzVisible\">\n  <div\n    class=\"{{'ant-dropdown ant-dropdown-placement-'+nzPlacement}}\"\n    [@dropDownAnimation]=\"dropDownPosition\"\n    (mouseenter)=\"onMouseEnterEvent()\"\n    (mouseleave)=\"onMouseLeaveEvent()\"\n    [style.minWidth.px]=\"triggerWidth\">\n    <ng-content select=\"[nz-menu]\"></ng-content>\n  </div>\n</ng-template>",
                        styles: ["\n    :host {\n      position: relative;\n      display: inline-block;\n    }\n\n    .ant-dropdown {\n      top: 100%;\n      left: 0;\n      position: relative;\n      width: 100%;\n      margin-top: 4px;\n      margin-bottom: 4px;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzDropDownButtonComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzDropDownButtonComponent.propDecorators = {
            nzSize: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }],
            content: [{ type: i0.ViewChild, args: ['content',] }],
            nzClick: [{ type: i0.Output }],
            nzOrigin: [{ type: i0.ViewChild, args: [NzDropDownDirective,] }]
        };
        return NzDropDownButtonComponent;
    }(NzDropDownComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSubMenuComponent = /** @class */ (function () {
        function NzSubMenuComponent(nzMenuDirective, cd, nzSubMenuComponent, nzDropDownComponent, nzDropDownButtonComponent) {
            var _this = this;
            this.nzMenuDirective = nzMenuDirective;
            this.cd = cd;
            this.nzSubMenuComponent = nzSubMenuComponent;
            this.nzDropDownComponent = nzDropDownComponent;
            this.nzDropDownButtonComponent = nzDropDownButtonComponent;
            this._open = false;
            this._disabled = false;
            this.$mouseSubject = new rxjs.Subject();
            this.unsubscribe$ = new rxjs.Subject();
            this.placement = 'rightTop';
            this.$subOpen = new rxjs.BehaviorSubject(false);
            this.isInDropDown = false;
            this.isInSubMenu = false;
            this.level = 1;
            this.triggerWidth = null;
            this.nzOpenChange = new i0.EventEmitter();
            this.handleOpenEvent = function (data) {
                if (_this.nzDisabled) {
                    return;
                }
                if (_this.nzOpen !== data) {
                    _this.nzOpen = data;
                    _this.nzOpenChange.emit(_this.nzOpen);
                }
                if (_this.nzSubMenuComponent) {
                    _this.nzSubMenuComponent.$subOpen.next(_this.nzOpen);
                }
                if (_this.nzDropDownComponent) {
                    _this.nzDropDownComponent.$subOpen.next(_this.nzOpen);
                }
                if (_this.nzDropDownButtonComponent) {
                    _this.nzDropDownButtonComponent.$subOpen.next(_this.nzOpen);
                }
            };
        }
        Object.defineProperty(NzSubMenuComponent.prototype, "nzOpen", {
            get: /**
             * @return {?}
             */ function () {
                return this._open;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._open = toBoolean(value);
                this.setTriggerWidth();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "subItemSelected", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return !!this.nzMenuDirective.menuItems.find(function (e) { return e.nzSelected && e.nzSubMenuComponent === _this; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "submenuSelected", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return !!this.subMenus.toArray().find(function (e) { return e !== _this && e.subItemSelected; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "expandState", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzOpen && this.subMenuMode === 'inline') {
                    return 'expand';
                }
                else if (this.nzOpen && this.subMenuMode === 'horizontal') {
                    return 'bottom';
                }
                else if (this.nzOpen && this.subMenuMode === 'vertical') {
                    return 'fade';
                }
                else {
                    return 'hidden';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "overlayPositions", {
            get: /**
             * @return {?}
             */ function () {
                if (this.subMenuMode === 'horizontal') {
                    return [POSITION_MAP["bottomLeft"]];
                }
                else {
                    return [POSITION_MAP["rightTop"], POSITION_MAP["leftTop"]];
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} $event
         * @return {?}
         */
        NzSubMenuComponent.prototype.clickSubMenuTitle = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.nzDisabled) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    return;
                }
                if ((this.subMenuMode === 'inline') && (!this.isInDropDown)) {
                    this.nzOpen = !this.nzOpen;
                    this.nzOpenChange.emit(this.nzOpen);
                }
            };
        /**
         * @return {?}
         */
        NzSubMenuComponent.prototype.clickSubMenuDropDown = /**
         * @return {?}
         */
            function () {
                if (this.isInDropDown || (this.subMenuMode === 'vertical') || (this.subMenuMode === 'horizontal')) {
                    this.$mouseSubject.next(false);
                }
            };
        Object.defineProperty(NzSubMenuComponent.prototype, "subMenuMode", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzMenuDirective.nzMode === 'inline') {
                    return 'inline';
                }
                else if ((this.nzMenuDirective.nzMode === 'vertical') || (this.isInSubMenu)) {
                    return 'vertical';
                }
                else {
                    return 'horizontal';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} e
         * @return {?}
         */
        NzSubMenuComponent.prototype.onMouseEnterEvent = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if ((this.subMenuMode === 'horizontal') || (this.subMenuMode === 'vertical') || this.isInDropDown) {
                    this.$mouseSubject.next(true);
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzSubMenuComponent.prototype.onMouseLeaveEvent = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if ((this.subMenuMode === 'horizontal') || (this.subMenuMode === 'vertical') || this.isInDropDown) {
                    this.$mouseSubject.next(false);
                }
            };
        Object.defineProperty(NzSubMenuComponent.prototype, "setDropDownSubmenuClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.isInDropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuSubmenuOpenClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isInDropDown) && (this.nzOpen);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setDropDownVerticalClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.isInDropDown && (this.subMenuMode === 'vertical');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setDropDownHorizontalClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.isInDropDown && (this.subMenuMode === 'horizontal');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setDropDownDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this.isInDropDown && this.nzDisabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuSubmenuClass", {
            get: /**
             * @return {?}
             */ function () {
                return !this.isInDropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuSubmenuSelectedClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.submenuSelected || this.subItemSelected;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuVerticalClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isInDropDown) && (this.subMenuMode === 'vertical');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuHorizontalClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isInDropDown) && (this.subMenuMode === 'horizontal');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuInlineClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isInDropDown) && (this.subMenuMode === 'inline');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSubMenuComponent.prototype, "setMenuDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isInDropDown) && this.nzDisabled;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzSubMenuComponent.prototype.setTriggerWidth = /**
         * @return {?}
         */
            function () {
                if (this.subMenuMode === 'horizontal') {
                    this.triggerWidth = this.trigger.nativeElement.getBoundingClientRect().width;
                    /** should remove after after https://github.com/angular/material2/pull/8765 merged **/
                    if (this.cdkOverlay && this.cdkOverlay.overlayRef) {
                        this.cdkOverlay.overlayRef.updateSize({
                            width: this.triggerWidth
                        });
                    }
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzSubMenuComponent.prototype.onPositionChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if ($event.connectionPair) {
                    /** @type {?} */
                    var originMap_1 = {
                        originX: $event.connectionPair.originX,
                        originY: $event.connectionPair.originY,
                        overlayX: $event.connectionPair.overlayX,
                        overlayY: $event.connectionPair.overlayY
                    };
                    /** @type {?} */
                    var keyList = ['originX', 'originY', 'overlayX', 'overlayY'];
                    if (keyList.every(function (key) { return originMap_1[key] === POSITION_MAP["leftTop"][key]; })) {
                        this.placement = 'leftTop';
                    }
                    else if (keyList.every(function (key) { return originMap_1[key] === POSITION_MAP["rightTop"][key]; })) {
                        this.placement = 'rightTop';
                    }
                    this.cd.detectChanges();
                }
            };
        /**
         * @return {?}
         */
        NzSubMenuComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.nzSubMenuComponent) {
                    this.level = this.nzSubMenuComponent.level + 1;
                    this.isInSubMenu = true;
                }
                this.nzMenuDirective.subMenus.push(this);
                /** @type {?} */
                var $combineAll = rxjs.combineLatest(this.$subOpen, this.$mouseSubject.asObservable()).pipe(operators.map(function (value) { return value[0] || value[1]; }), operators.auditTime(150));
                $combineAll.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(this.handleOpenEvent);
                this.isInDropDown = this.nzMenuDirective.nzInDropDown;
            };
        /**
         * @return {?}
         */
        NzSubMenuComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        NzSubMenuComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-submenu]',
                        preserveWhitespaces: false,
                        animations: [
                            animations.trigger('expandAnimation', [
                                animations.state('expand', animations.style({ height: '*' })),
                                animations.state('hidden', animations.style({ height: 0, overflow: 'hidden' })),
                                animations.transition('expand => hidden', animations.animate(150)),
                                animations.transition('hidden => expand', animations.animate(150)),
                                animations.state('fade', animations.style({ opacity: 1 })),
                                animations.transition('fade => void', [
                                    animations.animate(150, animations.style({ opacity: 0 }))
                                ]),
                                animations.transition('void => fade', [
                                    animations.style({ opacity: '0' }),
                                    animations.animate(150)
                                ]),
                                animations.state('bottom', animations.style({
                                    opacity: 1,
                                    transform: 'scaleY(1)',
                                    transformOrigin: '0% 0%'
                                })),
                                animations.transition('void => bottom', [
                                    animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 0%'
                                    }),
                                    animations.animate('150ms cubic-bezier(0.23, 1, 0.32, 1)')
                                ]),
                                animations.transition('bottom => void', [
                                    animations.animate('150ms cubic-bezier(0.23, 1, 0.32, 1)', animations.style({
                                        opacity: 0,
                                        transform: 'scaleY(0.8)',
                                        transformOrigin: '0% 0%'
                                    }))
                                ])
                            ])
                        ],
                        template: "<div\n  #trigger\n  cdkOverlayOrigin\n  #origin=\"cdkOverlayOrigin\"\n  [class.ant-dropdown-menu-submenu-title]=\"isInDropDown\"\n  [class.ant-menu-submenu-title]=\"!isInDropDown\"\n  (mouseenter)=\"onMouseEnterEvent($event)\"\n  (mouseleave)=\"onMouseLeaveEvent($event)\"\n  (click)=\"clickSubMenuTitle($event)\"\n  [style.paddingLeft.px]=\"(nzMenuDirective.nzMode === 'inline')?(level*nzMenuDirective.nzInlineIndent):null\">\n  <ng-content select=\"[title]\"></ng-content>\n  <span *ngIf=\"isInDropDown; else notDropdownTpl\" class=\"ant-dropdown-menu-submenu-arrow\">\n    <i nz-icon type=\"right\" class=\"anticon-right ant-dropdown-menu-submenu-arrow-icon\"></i>\n  </span>\n  <ng-template #notDropdownTpl>\n    <i class=\"ant-menu-submenu-arrow\"></i>\n  </ng-template>\n</div>\n<ul\n  [class.ant-dropdown-menu]=\"isInDropDown\"\n  [@expandAnimation]=\"expandState\"\n  [class.ant-menu]=\"!isInDropDown\"\n  [class.ant-dropdown-menu-vertical]=\"isInDropDown\"\n  [class.ant-menu-inline]=\"!isInDropDown\"\n  [class.ant-dropdown-menu-sub]=\"isInDropDown\"\n  [class.ant-menu-sub]=\"!isInDropDown\"\n  (mouseleave)=\"onMouseLeaveEvent($event)\"\n  (mouseenter)=\"onMouseEnterEvent($event)\"\n  *ngIf=\"(nzMenuDirective.nzMode=='inline')\">\n  <ng-template [ngTemplateOutlet]=\"subMenuTemplate\"></ng-template>\n</ul>\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayPositions]=\"overlayPositions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayWidth]=\"triggerWidth\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayOpen]=\"nzOpen&&(nzMenuDirective.nzMode!='inline')\">\n  <div\n    class=\"ant-menu-submenu ant-menu-submenu-popup\"\n    [class.ant-menu-light]=\"nzMenuDirective.nzTheme=='light'\"\n    [class.ant-menu-dark]=\"nzMenuDirective.nzTheme=='dark'\"\n    [class.ant-menu-submenu-placement-bottomLeft]=\"subMenuMode=='horizontal'\"\n    [class.ant-menu-submenu-placement-rightTop]=\"(subMenuMode=='vertical')&&(placement=='rightTop')\"\n    [class.ant-menu-submenu-placement-leftTop]=\"(subMenuMode=='vertical')&&(placement=='leftTop')\"\n    [@expandAnimation]=\"expandState\"\n    (mouseleave)=\"onMouseLeaveEvent($event)\"\n    (mouseenter)=\"onMouseEnterEvent($event)\">\n    <ul\n      [class.ant-dropdown-menu]=\"isInDropDown\"\n      [class.ant-menu]=\"!isInDropDown\"\n      [class.ant-dropdown-menu-vertical]=\"isInDropDown\"\n      [class.ant-menu-vertical]=\"!isInDropDown\"\n      [class.ant-dropdown-menu-sub]=\"isInDropDown\"\n      [class.ant-menu-sub]=\"!isInDropDown\">\n      <ng-template [ngTemplateOutlet]=\"subMenuTemplate\"></ng-template>\n    </ul>\n  </div>\n</ng-template>\n<ng-template #subMenuTemplate>\n  <ng-content></ng-content>\n</ng-template>",
                        styles: ["\n      .ant-menu-submenu-placement-bottomLeft {\n        top: 6px;\n        position: relative;\n      }\n\n      .ant-menu-submenu-placement-rightTop {\n        left: 4px;\n        position: relative;\n      }\n\n      .ant-menu-submenu-placement-leftTop {\n        right: 4px;\n        position: relative;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzSubMenuComponent.ctorParameters = function () {
            return [
                { type: NzMenuDirective },
                { type: i0.ChangeDetectorRef },
                { type: NzSubMenuComponent, decorators: [{ type: i0.SkipSelf }, { type: i0.Optional }] },
                { type: NzDropDownComponent, decorators: [{ type: i0.Host }, { type: i0.Optional }] },
                { type: NzDropDownButtonComponent, decorators: [{ type: i0.Host }, { type: i0.Optional }] }
            ];
        };
        NzSubMenuComponent.propDecorators = {
            subMenus: [{ type: i0.ContentChildren, args: [NzSubMenuComponent, { descendants: true },] }],
            nzOpenChange: [{ type: i0.Output }],
            cdkOverlay: [{ type: i0.ViewChild, args: [i2$1.CdkConnectedOverlay,] }],
            trigger: [{ type: i0.ViewChild, args: ['trigger',] }],
            nzOpen: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            setDropDownSubmenuClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-submenu',] }],
            setMenuSubmenuOpenClass: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu-open',] }],
            setDropDownVerticalClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-submenu-vertical',] }],
            setDropDownHorizontalClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-submenu-horizontal',] }],
            setDropDownDisabled: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-submenu-disabled',] }],
            setMenuSubmenuClass: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu',] }],
            setMenuSubmenuSelectedClass: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu-selected',] }],
            setMenuVerticalClass: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu-vertical',] }],
            setMenuHorizontalClass: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu-horizontal',] }],
            setMenuInlineClass: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu-inline',] }],
            setMenuDisabled: [{ type: i0.HostBinding, args: ['class.ant-menu-submenu-disabled',] }]
        };
        return NzSubMenuComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMenuItemDirective = /** @class */ (function () {
        function NzMenuItemDirective(renderer, cd, nzMenuDirective, nzSubMenuComponent, hostElement) {
            this.renderer = renderer;
            this.cd = cd;
            this.nzMenuDirective = nzMenuDirective;
            this.nzSubMenuComponent = nzSubMenuComponent;
            this.hostElement = hostElement;
            this._disabled = false;
            this._selected = false;
            this._initialized = false;
            this.level = 0;
            this.padding = null;
            this.isInDropDown = false;
        }
        Object.defineProperty(NzMenuItemDirective.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuItemDirective.prototype, "nzSelected", {
            get: /**
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = toBoolean(value);
                if (this._initialized) {
                    this.setClass();
                }
            },
            enumerable: true,
            configurable: true
        });
        /** clear all item selected status except this */
        /**
         * clear all item selected status except this
         * @param {?} e
         * @return {?}
         */
        NzMenuItemDirective.prototype.onClickItem = /**
         * clear all item selected status except this
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.nzDisabled) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                this.nzMenuDirective.clickItem(this);
                if (this.nzMenuDirective.nzSelectable) {
                    this.nzMenuDirective.clearAllSelected();
                    this.nzSelected = true;
                }
                if (this.nzSubMenuComponent) {
                    this.nzSubMenuComponent.clickSubMenuDropDown();
                }
            };
        Object.defineProperty(NzMenuItemDirective.prototype, "isInDropDownClass", {
            /** define host class */
            get: /**
             * define host class
             * @return {?}
             */ function () {
                return this.isInDropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuItemDirective.prototype, "isNotInDropDownClass", {
            get: /**
             * @return {?}
             */ function () {
                return !this.isInDropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuItemDirective.prototype, "setDropDownDisableClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.isInDropDown && this.nzDisabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuItemDirective.prototype, "setMenuDisableClass", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.isInDropDown) && this.nzDisabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMenuItemDirective.prototype, "setPaddingLeft", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzMenuDirective.nzMode === 'inline') {
                    if (this.nzSubMenuComponent) {
                        /** if in sub menu component and host menu's mode is inline add PADDING_BASE * level padding */
                        return (this.nzSubMenuComponent.level + 1) * this.nzMenuDirective.nzInlineIndent;
                    }
                    else {
                        /** not in sub menu component but root menu's mode is inline return default padding */
                        return this.nzMenuDirective.nzInlineIndent;
                    }
                }
                else {
                    return this.padding;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzMenuItemDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.nzMenuDirective.menuItems.push(this);
                /** store origin padding in padding */
                if (this.hostElement.nativeElement.style['padding-left']) {
                    this.padding = parseInt(this.hostElement.nativeElement.style['padding-left'], 10);
                }
                this.isInDropDown = this.nzMenuDirective.nzInDropDown;
                this.setClass();
                this._initialized = true;
            };
        /**
         * @return {?}
         */
        NzMenuItemDirective.prototype.setClass = /**
         * @return {?}
         */
            function () {
                if (this._selected) {
                    this.renderer.addClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');
                }
                else {
                    this.renderer.removeClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');
                }
            };
        NzMenuItemDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-menu-item]'
                    },] }
        ];
        /** @nocollapse */
        NzMenuItemDirective.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef },
                { type: NzMenuDirective },
                { type: NzSubMenuComponent, decorators: [{ type: i0.Optional }] },
                { type: i0.ElementRef }
            ];
        };
        NzMenuItemDirective.propDecorators = {
            nzDisabled: [{ type: i0.Input }],
            nzSelected: [{ type: i0.Input }],
            onClickItem: [{ type: i0.HostListener, args: ['click', ['$event'],] }],
            isInDropDownClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-item',] }],
            isNotInDropDownClass: [{ type: i0.HostBinding, args: ['class.ant-menu-item',] }],
            setDropDownDisableClass: [{ type: i0.HostBinding, args: ['class.ant-dropdown-menu-item-disabled',] }],
            setMenuDisableClass: [{ type: i0.HostBinding, args: ['class.ant-menu-item-disabled',] }],
            setPaddingLeft: [{ type: i0.HostBinding, args: ['style.padding-left.px',] }]
        };
        return NzMenuItemDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMenuModule = /** @class */ (function () {
        function NzMenuModule() {
        }
        NzMenuModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, NzButtonModule, i2$1.OverlayModule, NzIconModule],
                        declarations: [NzMenuDirective, NzMenuItemDirective, NzSubMenuComponent, NzMenuDividerDirective, NzMenuGroupComponent],
                        exports: [NzMenuDirective, NzMenuItemDirective, NzSubMenuComponent, NzMenuDividerDirective, NzMenuGroupComponent]
                    },] }
        ];
        return NzMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDropdownContextComponent = /** @class */ (function () {
        function NzDropdownContextComponent() {
            this.dropDownPosition = 'bottom';
            this.open = true;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NzDropdownContextComponent.prototype.setTemplateRef = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.template = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzDropdownContextComponent.prototype.setControl = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.control = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzDropdownContextComponent.prototype.setDropDownPosition = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.dropDownPosition = value;
            };
        /**
         * @return {?}
         */
        NzDropdownContextComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.open = false;
            };
        /**
         * @return {?}
         */
        NzDropdownContextComponent.prototype.afterAnimation = /**
         * @return {?}
         */
            function () {
                if (!this.open) {
                    this.control.close();
                }
            };
        /**
         * @return {?}
         */
        NzDropdownContextComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // TODO auto set dropdown class after the bug resolved
                /** https://github.com/angular/angular/issues/14842 **/
            };
        NzDropdownContextComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-dropdown-context',
                        animations: [
                            dropDownAnimation
                        ],
                        template: "<div class=\"ant-dropdown ant-dropdown-placement-bottomLeft\" [@dropDownAnimation]=\"dropDownPosition\" (@dropDownAnimation.done)=\"afterAnimation()\" *ngIf=\"open\">\n  <ng-template [ngTemplateOutlet]=\"template\"></ng-template>\n</div>",
                        styles: ["\n      .ant-dropdown {\n        top: 100%;\n        left: 0;\n        position: relative;\n        width: 100%;\n        margin-top: 4px;\n        margin-bottom: 4px;\n      }\n    "]
                    }] }
        ];
        return NzDropdownContextComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDropDownModule = /** @class */ (function () {
        function NzDropDownModule() {
        }
        NzDropDownModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, i2$1.OverlayModule, forms.FormsModule, NzButtonModule, NzMenuModule, NzIconModule],
                        declarations: [NzDropDownComponent, NzDropDownButtonComponent, NzDropDownDirective, NzDropdownContextComponent],
                        entryComponents: [NzDropdownContextComponent],
                        exports: [NzDropDownComponent, NzDropDownButtonComponent, NzDropDownDirective]
                    },] }
        ];
        return NzDropDownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var Breakpoint = {
        'xxl': 0,
        'xl': 1,
        'lg': 2,
        'md': 3,
        'sm': 4,
        'xs': 5,
    };
    Breakpoint[Breakpoint['xxl']] = 'xxl';
    Breakpoint[Breakpoint['xl']] = 'xl';
    Breakpoint[Breakpoint['lg']] = 'lg';
    Breakpoint[Breakpoint['md']] = 'md';
    Breakpoint[Breakpoint['sm']] = 'sm';
    Breakpoint[Breakpoint['xs']] = 'xs';
    /** @type {?} */
    var responsiveMap = {
        xs: '(max-width: 575px)',
        sm: '(min-width: 576px)',
        md: '(min-width: 768px)',
        lg: '(min-width: 992px)',
        xl: '(min-width: 1200px)',
        xxl: '(min-width: 1600px)'
    };
    var NzRowComponent = /** @class */ (function () {
        function NzRowComponent(elementRef, renderer, nzUpdateHostClassService, mediaMatcher, ngZone, platform$$1) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.mediaMatcher = mediaMatcher;
            this.ngZone = ngZone;
            this.platform = platform$$1;
            this.nzAlign = 'top';
            this.nzJustify = 'start';
            this.el = this.elementRef.nativeElement;
            this.prefixCls = 'ant-row';
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        NzRowComponent.prototype.calculateGutter = /**
         * @return {?}
         */
            function () {
                if (typeof this.nzGutter !== 'object') {
                    return this.nzGutter;
                }
                else if (this.breakPoint && this.nzGutter[this.breakPoint]) {
                    return this.nzGutter[this.breakPoint];
                }
                else {
                    return;
                }
            };
        /**
         * @return {?}
         */
        NzRowComponent.prototype.updateGutter = /**
         * @return {?}
         */
            function () {
                this.actualGutter = this.calculateGutter();
                this.renderer.setStyle(this.el, 'margin-left', "-" + this.actualGutter / 2 + "px");
                this.renderer.setStyle(this.el, 'margin-right', "-" + this.actualGutter / 2 + "px");
            };
        /**
         * @return {?}
         */
        NzRowComponent.prototype.watchMedia = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // @ts-ignore
                Object.keys(responsiveMap).map(function (screen) {
                    /** @type {?} */
                    var matchBelow = _this.mediaMatcher.matchMedia(responsiveMap[screen]).matches;
                    if (matchBelow) {
                        _this.breakPoint = screen;
                    }
                });
                this.updateGutter();
            };
        /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289*/
        /**
         * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
         * @return {?}
         */
        NzRowComponent.prototype.setClassMap = /**
         * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a["" + this.prefixCls] = !this.nzType,
                    _a[this.prefixCls + "-" + this.nzType] = this.nzType,
                    _a[this.prefixCls + "-" + this.nzType + "-" + this.nzAlign] = this.nzType && this.nzAlign,
                    _a[this.prefixCls + "-" + this.nzType + "-" + this.nzJustify] = this.nzType && this.nzJustify,
                    _a);
                this.nzUpdateHostClassService.updateHostClass(this.el, classMap);
            };
        /**
         * @return {?}
         */
        NzRowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
                this.watchMedia();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzRowComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzType"] || changes["nzAlign"] || changes["nzJustify"]) {
                    this.setClassMap();
                }
                if (changes["nzGutter"]) {
                    this.updateGutter();
                }
            };
        /**
         * @return {?}
         */
        NzRowComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.platform.isBrowser) {
                    this.ngZone.runOutsideAngular(function () {
                        rxjs.fromEvent(window, 'resize')
                            .pipe(operators.auditTime(16), operators.takeUntil(_this.destroy$))
                            .subscribe(function () { return _this.watchMedia(); });
                    });
                }
            };
        /**
         * @return {?}
         */
        NzRowComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
            };
        NzRowComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-row',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [NzUpdateHostClassService],
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        NzRowComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: NzUpdateHostClassService },
                { type: layout.MediaMatcher },
                { type: i0.NgZone },
                { type: platform.Platform }
            ];
        };
        NzRowComponent.propDecorators = {
            nzType: [{ type: i0.Input }],
            nzAlign: [{ type: i0.Input }],
            nzJustify: [{ type: i0.Input }],
            nzGutter: [{ type: i0.Input }]
        };
        return NzRowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRowDirective = /** @class */ (function (_super) {
        __extends(NzRowDirective, _super);
        function NzRowDirective(elementRef, renderer, nzUpdateHostClassService, mediaMatcher, ngZone, platform$$1) {
            return _super.call(this, elementRef, renderer, nzUpdateHostClassService, mediaMatcher, ngZone, platform$$1) || this;
        }
        NzRowDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-row]',
                        providers: [NzUpdateHostClassService]
                    },] }
        ];
        /** @nocollapse */
        NzRowDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: NzUpdateHostClassService },
                { type: layout.MediaMatcher },
                { type: i0.NgZone },
                { type: platform.Platform }
            ];
        };
        return NzRowDirective;
    }(NzRowComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzColComponent = /** @class */ (function () {
        function NzColComponent(nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective) {
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.elementRef = elementRef;
            this.nzRowComponent = nzRowComponent;
            this.nzRowDirective = nzRowDirective;
            this.el = this.elementRef.nativeElement;
            this.prefixCls = 'ant-col';
        }
        Object.defineProperty(NzColComponent.prototype, "paddingLeft", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzRow && this.nzRow.actualGutter / 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzColComponent.prototype, "paddingRight", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzRow && this.nzRow.actualGutter / 2;
            },
            enumerable: true,
            configurable: true
        });
        /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289*/
        /**
         * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
         * @return {?}
         */
        NzColComponent.prototype.setClassMap = /**
         * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = __assign((_a = {}, _a[this.prefixCls + "-" + this.nzSpan] = isNotNil(this.nzSpan), _a[this.prefixCls + "-order-" + this.nzOrder] = isNotNil(this.nzOrder), _a[this.prefixCls + "-offset-" + this.nzOffset] = isNotNil(this.nzOffset), _a[this.prefixCls + "-pull-" + this.nzPull] = isNotNil(this.nzPull), _a[this.prefixCls + "-push-" + this.nzPush] = isNotNil(this.nzPush), _a), this.generateClass());
                this.nzUpdateHostClassService.updateHostClass(this.el, classMap);
            };
        /**
         * @return {?}
         */
        NzColComponent.prototype.generateClass = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var listOfSizeInputName = ['nzXs', 'nzSm', 'nzMd', 'nzLg', 'nzXl', 'nzXXl'];
                /** @type {?} */
                var listClassMap = {};
                listOfSizeInputName.forEach(function (name) {
                    /** @type {?} */
                    var sizeName = name.replace('nz', '').toLowerCase();
                    if (isNotNil(_this[name])) {
                        if ((typeof (_this[name]) === 'number') || (typeof (_this[name]) === 'string')) {
                            listClassMap[_this.prefixCls + "-" + sizeName + "-" + _this[name]] = true;
                        }
                        else {
                            listClassMap[_this.prefixCls + "-" + sizeName + "-" + _this[name].span] = _this[name] && isNotNil(_this[name].span);
                            listClassMap[_this.prefixCls + "-" + sizeName + "-pull-" + _this[name].pull] = _this[name] && isNotNil(_this[name].pull);
                            listClassMap[_this.prefixCls + "-" + sizeName + "-push-" + _this[name].push] = _this[name] && isNotNil(_this[name].push);
                            listClassMap[_this.prefixCls + "-" + sizeName + "-offset-" + _this[name].offset] = _this[name] && isNotNil(_this[name].offset);
                            listClassMap[_this.prefixCls + "-" + sizeName + "-order-" + _this[name].order] = _this[name] && isNotNil(_this[name].order);
                        }
                    }
                });
                return listClassMap;
            };
        Object.defineProperty(NzColComponent.prototype, "nzRow", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzRowComponent || this.nzRowDirective;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzColComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzColComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        NzColComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-col',
                        providers: [NzUpdateHostClassService],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        NzColComponent.ctorParameters = function () {
            return [
                { type: NzUpdateHostClassService },
                { type: i0.ElementRef },
                { type: NzRowComponent, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
                { type: NzRowDirective, decorators: [{ type: i0.Optional }, { type: i0.Host }] }
            ];
        };
        NzColComponent.propDecorators = {
            paddingLeft: [{ type: i0.HostBinding, args: ['style.padding-left.px',] }],
            paddingRight: [{ type: i0.HostBinding, args: ['style.padding-right.px',] }],
            nzSpan: [{ type: i0.Input }],
            nzOrder: [{ type: i0.Input }],
            nzOffset: [{ type: i0.Input }],
            nzPush: [{ type: i0.Input }],
            nzPull: [{ type: i0.Input }],
            nzXs: [{ type: i0.Input }],
            nzSm: [{ type: i0.Input }],
            nzMd: [{ type: i0.Input }],
            nzLg: [{ type: i0.Input }],
            nzXl: [{ type: i0.Input }],
            nzXXl: [{ type: i0.Input }]
        };
        return NzColComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzColDirective = /** @class */ (function (_super) {
        __extends(NzColDirective, _super);
        function NzColDirective(nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective) {
            return _super.call(this, nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective) || this;
        }
        NzColDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-col]',
                        providers: [NzUpdateHostClassService]
                    },] }
        ];
        /** @nocollapse */
        NzColDirective.ctorParameters = function () {
            return [
                { type: NzUpdateHostClassService },
                { type: i0.ElementRef },
                { type: NzRowComponent, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
                { type: NzRowDirective, decorators: [{ type: i0.Optional }, { type: i0.Host }] }
            ];
        };
        return NzColDirective;
    }(NzColComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzGridModule = /** @class */ (function () {
        function NzGridModule() {
        }
        NzGridModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzRowComponent, NzColDirective, NzColComponent, NzRowDirective],
                        exports: [NzRowComponent, NzColDirective, NzColComponent, NzRowDirective],
                        imports: [i3.CommonModule, layout.LayoutModule, platform.PlatformModule]
                    },] }
        ];
        return NzGridModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormExplainComponent = /** @class */ (function () {
        function NzFormExplainComponent() {
        }
        NzFormExplainComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-explain',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        animations: [
                            animations.trigger('formExplainAnimation', [
                                animations.transition('void => *', [
                                    animations.style({
                                        opacity: 0,
                                        transform: 'translateY(-5px)'
                                    }),
                                    animations.animate('0.3s cubic-bezier(0.645, 0.045, 0.355, 1)', animations.style({
                                        opacity: 1,
                                        transform: 'translateY(0)'
                                    }))
                                ]),
                                animations.transition('* => void', [
                                    animations.style({
                                        opacity: 1,
                                        transform: 'translateY(0)'
                                    }),
                                    animations.animate('0.3s cubic-bezier(0.645, 0.045, 0.355, 1)', animations.style({
                                        opacity: 0,
                                        transform: 'translateY(-5px)'
                                    }))
                                ])
                            ])
                        ],
                        template: "<div [@formExplainAnimation]>\n  <ng-content></ng-content>\n</div>",
                        host: {
                            '[class.ant-form-explain]': 'true'
                        },
                        styles: ["nz-form-explain {\n      display: block;\n    }"]
                    }] }
        ];
        return NzFormExplainComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * should add nz-row directive to host, track https://github.com/angular/angular/issues/8785 *
     */
    var NzFormItemComponent = /** @class */ (function (_super) {
        __extends(NzFormItemComponent, _super);
        function NzFormItemComponent(elementRef, renderer, nzUpdateHostClassService, mediaMatcher, ngZone, platform$$1, cdr) {
            var _this = _super.call(this, elementRef, renderer, nzUpdateHostClassService, mediaMatcher, ngZone, platform$$1) || this;
            _this.cdr = cdr;
            _this._flex = false;
            return _this;
        }
        Object.defineProperty(NzFormItemComponent.prototype, "nzFlex", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._flex = toBoolean(value);
                if (this._flex) {
                    this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'flex');
                }
                else {
                    this.renderer.removeStyle(this.elementRef.nativeElement, 'display');
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzFormItemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.listOfNzFormExplainComponent) {
                    this.listOfNzFormExplainComponent.changes.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                        _this.cdr.markForCheck();
                    });
                }
            };
        NzFormItemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-item',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        providers: [NzUpdateHostClassService],
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-form-item]': 'true',
                            '[class.ant-form-item-with-help]': 'listOfNzFormExplainComponent && (listOfNzFormExplainComponent.length>0)'
                        },
                        styles: ["\n      nz-form-item {\n        display: block;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzFormItemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: NzUpdateHostClassService },
                { type: layout.MediaMatcher },
                { type: i0.NgZone },
                { type: platform.Platform },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzFormItemComponent.propDecorators = {
            listOfNzFormExplainComponent: [{ type: i0.ContentChildren, args: [NzFormExplainComponent, { descendants: true },] }],
            nzFlex: [{ type: i0.Input }]
        };
        return NzFormItemComponent;
    }(NzRowComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormControlComponent = /** @class */ (function (_super) {
        __extends(NzFormControlComponent, _super);
        function NzFormControlComponent(nzUpdateHostClassService, elementRef, nzFormItemComponent, nzRowDirective, cdr) {
            var _this = _super.call(this, nzUpdateHostClassService, elementRef, nzFormItemComponent, nzRowDirective) || this;
            _this.cdr = cdr;
            _this._hasFeedback = false;
            _this.controlClassMap = {};
            return _this;
        }
        Object.defineProperty(NzFormControlComponent.prototype, "nzHasFeedback", {
            get: /**
             * @return {?}
             */ function () {
                return this._hasFeedback;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._hasFeedback = toBoolean(value);
                this.setControlClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzFormControlComponent.prototype, "nzValidateStatus", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value instanceof forms.FormControl) {
                    this.validateControl = value;
                    this.validateString = null;
                    this.watchControl();
                }
                else if (value instanceof forms.FormControlName) {
                    this.validateControl = value.control;
                    this.validateString = null;
                    this.watchControl();
                }
                else {
                    this.validateString = value;
                    this.validateControl = null;
                    this.setControlClassMap();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzFormControlComponent.prototype.removeSubscribe = /**
         * @return {?}
         */
            function () {
                if (this.validateChanges) {
                    this.validateChanges.unsubscribe();
                    this.validateChanges = null;
                }
            };
        /**
         * @return {?}
         */
        NzFormControlComponent.prototype.watchControl = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.removeSubscribe();
                /** miss detect https://github.com/angular/angular/issues/10887 **/
                if (this.validateControl && this.validateControl.statusChanges) {
                    this.validateChanges = this.validateControl.statusChanges.pipe(operators.startWith(null)).subscribe(function () {
                        _this.setControlClassMap();
                        _this.cdr.markForCheck();
                    });
                }
            };
        /**
         * @param {?} status
         * @return {?}
         */
        NzFormControlComponent.prototype.validateControlStatus = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                return this.validateControl && (this.validateControl.dirty || this.validateControl.touched) && (this.validateControl.status === status);
            };
        /**
         * @return {?}
         */
        NzFormControlComponent.prototype.setControlClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.controlClassMap = (_a = {},
                    _a["has-warning"] = this.validateString === 'warning',
                    _a["is-validating"] = this.validateString === 'validating' || this.validateString === 'pending' || this.validateControlStatus('PENDING'),
                    _a["has-error"] = this.validateString === 'error' || this.validateControlStatus('INVALID'),
                    _a["has-success"] = this.validateString === 'success' || this.validateControlStatus('VALID'),
                    _a["has-feedback"] = this.nzHasFeedback,
                    _a);
                if (this.controlClassMap['has-warning']) {
                    this.iconType = 'exclamation-circle-fill';
                }
                else if (this.controlClassMap['is-validating']) {
                    this.iconType = 'loading';
                }
                else if (this.controlClassMap['has-error']) {
                    this.iconType = 'close-circle-fill';
                }
                else if (this.controlClassMap['has-success']) {
                    this.iconType = 'check-circle-fill';
                }
                else {
                    this.iconType = '';
                }
            };
        /**
         * @return {?}
         */
        NzFormControlComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.setControlClassMap();
            };
        /**
         * @return {?}
         */
        NzFormControlComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeSubscribe();
            };
        /**
         * @return {?}
         */
        NzFormControlComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this.defaultValidateControl && (!this.validateControl) && (!this.validateString)) {
                    this.nzValidateStatus = this.defaultValidateControl;
                }
            };
        NzFormControlComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-control',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [NzUpdateHostClassService],
                        template: "<div class=\"ant-form-item-control\" [ngClass]=\"controlClassMap\">\n  <span class=\"ant-form-item-children\">\n    <ng-content></ng-content>\n    <span class=\"ant-form-item-children-icon\">\n      <i *ngIf=\"nzHasFeedback && iconType\" nz-icon [type]=\"iconType\"></i>\n    </span>\n  </span>\n  <ng-content select=\"nz-form-explain\"></ng-content>\n</div>",
                        host: {
                            '[class.ant-form-item-control-wrapper]': 'true'
                        },
                        styles: ["\n      nz-form-control {\n        display: block;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzFormControlComponent.ctorParameters = function () {
            return [
                { type: NzUpdateHostClassService },
                { type: i0.ElementRef },
                { type: NzFormItemComponent, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
                { type: NzRowDirective, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzFormControlComponent.propDecorators = {
            defaultValidateControl: [{ type: i0.ContentChild, args: [forms.NgControl,] }],
            nzHasFeedback: [{ type: i0.Input }],
            nzValidateStatus: [{ type: i0.Input }]
        };
        return NzFormControlComponent;
    }(NzColComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormExtraComponent = /** @class */ (function () {
        function NzFormExtraComponent() {
        }
        NzFormExtraComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-extra',
                        template: "<ng-content></ng-content>",
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[class.ant-form-extra]': 'true'
                        },
                        styles: ["\n      nz-form-extra {\n        display: block;\n      }\n    "]
                    }] }
        ];
        return NzFormExtraComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormLabelComponent = /** @class */ (function (_super) {
        __extends(NzFormLabelComponent, _super);
        function NzFormLabelComponent(nzUpdateHostClassService, elementRef, nzFormItemComponent, nzRowDirective) {
            var _this = _super.call(this, nzUpdateHostClassService, elementRef, nzFormItemComponent, nzRowDirective) || this;
            _this.nzRequired = false;
            return _this;
        }
        NzFormLabelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-label',
                        providers: [NzUpdateHostClassService],
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<label [attr.for]=\"nzFor\" [class.ant-form-item-required]=\"nzRequired\">\n  <ng-content></ng-content>\n</label>",
                        host: {
                            '[class.ant-form-item-label]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzFormLabelComponent.ctorParameters = function () {
            return [
                { type: NzUpdateHostClassService },
                { type: i0.ElementRef },
                { type: NzFormItemComponent, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
                { type: NzRowDirective, decorators: [{ type: i0.Optional }, { type: i0.Host }] }
            ];
        };
        NzFormLabelComponent.propDecorators = {
            nzFor: [{ type: i0.Input }],
            nzRequired: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzFormLabelComponent.prototype, "nzRequired", void 0);
        return NzFormLabelComponent;
    }(NzColComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormSplitComponent = /** @class */ (function () {
        function NzFormSplitComponent() {
        }
        NzFormSplitComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-split',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-form-split]': 'true'
                        }
                    }] }
        ];
        return NzFormSplitComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormTextComponent = /** @class */ (function () {
        function NzFormTextComponent() {
        }
        NzFormTextComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-form-text',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-form-text]': 'true'
                        }
                    }] }
        ];
        return NzFormTextComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormDirective = /** @class */ (function () {
        function NzFormDirective(elementRef, renderer, nzUpdateHostClassService) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.nzLayout = 'horizontal';
        }
        /**
         * @return {?}
         */
        NzFormDirective.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.nzUpdateHostClassService.updateHostClass(this.elementRef.nativeElement, (_a = {},
                    _a["ant-form-" + this.nzLayout] = this.nzLayout,
                    _a));
            };
        /**
         * @return {?}
         */
        NzFormDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzFormDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        NzFormDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-form]',
                        providers: [NzUpdateHostClassService],
                        host: {
                            '[class.ant-form]': 'true'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzFormDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: NzUpdateHostClassService }
            ];
        };
        NzFormDirective.propDecorators = {
            nzLayout: [{ type: i0.Input }]
        };
        return NzFormDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFormModule = /** @class */ (function () {
        function NzFormModule() {
        }
        NzFormModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            NzFormExtraComponent,
                            NzFormLabelComponent,
                            NzFormDirective,
                            NzFormItemComponent,
                            NzFormControlComponent,
                            NzFormExplainComponent,
                            NzFormTextComponent,
                            NzFormSplitComponent
                        ],
                        exports: [
                            NzFormExtraComponent,
                            NzFormLabelComponent,
                            NzFormDirective,
                            NzFormItemComponent,
                            NzFormControlComponent,
                            NzFormExplainComponent,
                            NzFormTextComponent,
                            NzFormSplitComponent
                        ],
                        imports: [i3.CommonModule, NzGridModule, NzIconModule, layout.LayoutModule, platform.PlatformModule]
                    },] }
        ];
        return NzFormModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzInputNumberComponent = /** @class */ (function () {
        function NzInputNumberComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.isInit = false;
            this._disabled = false;
            this._step = 1;
            this._autoFocus = false;
            this._formatter = function (value) { return value; };
            this.isFocused = false;
            this.el = this.elementRef.nativeElement;
            this.prefixCls = 'ant-input-number';
            this.disabledUp = false;
            this.disabledDown = false;
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
            this.nzSize = 'default';
            this.nzMin = -Infinity;
            this.nzMax = Infinity;
            this.nzParser = function (value) { return value; };
            this.nzPlaceHolder = '';
        }
        Object.defineProperty(NzInputNumberComponent.prototype, "isLarge", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSize === 'large';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputNumberComponent.prototype, "isSmall", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSize === 'small';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputNumberComponent.prototype, "nzAutoFocus", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoFocus;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoFocus = toBoolean(value);
                this.updateAutoFocus();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputNumberComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputNumberComponent.prototype, "nzStep", {
            get: /**
             * @return {?}
             */ function () {
                return this._step;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._step = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzInputNumberComponent.prototype, "nzFormatter", {
            get: /**
             * @return {?}
             */ function () {
                return this._formatter;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._formatter = v;
                /** @type {?} */
                var value = this.getCurrentValidValue(this.actualValue);
                this.writeValue(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzInputNumberComponent.prototype.updateAutoFocus = /**
         * @return {?}
         */
            function () {
                if (this.nzAutoFocus) {
                    this.renderer.setAttribute(this.inputElement.nativeElement, 'autofocus', 'autofocus');
                }
                else {
                    this.renderer.removeAttribute(this.inputElement.nativeElement, 'autofocus');
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzInputNumberComponent.prototype.onModelChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.actualValue = this.nzParser(value.trim().replace(/。/g, '.').replace(/[^\w\.-]+/g, ''));
                this.inputElement.nativeElement.value = this.actualValue;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzInputNumberComponent.prototype.getCurrentValidValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var val = value;
                if (val === '') {
                    val = '';
                }
                else if (!this.isNotCompleteNumber(val)) {
                    val = /** @type {?} */ (this.getValidValue(val));
                }
                else {
                    val = this.value;
                }
                return this.toNumber(val);
            };
        // '1.' '1x' 'xx' '' => are not complete numbers
        /**
         * @param {?} num
         * @return {?}
         */
        NzInputNumberComponent.prototype.isNotCompleteNumber = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                return (isNaN(/** @type {?} */ (num)) ||
                    num === '' ||
                    num === null ||
                    (num && num.toString().indexOf('.') === num.toString().length - 1));
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzInputNumberComponent.prototype.getValidValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var val = parseFloat(/** @type {?} */ (value));
                // https://github.com/ant-design/ant-design/issues/7358
                if (isNaN(val)) {
                    return value;
                }
                if (val < this.nzMin) {
                    val = this.nzMin;
                }
                if (val > this.nzMax) {
                    val = this.nzMax;
                }
                return val;
            };
        /**
         * @param {?} num
         * @return {?}
         */
        NzInputNumberComponent.prototype.toNumber = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                if (this.isNotCompleteNumber(num)) {
                    return /** @type {?} */ (num);
                }
                if (isNotNil(this.nzPrecision)) {
                    return Number(Number(num).toFixed(this.nzPrecision));
                }
                return Number(num);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzInputNumberComponent.prototype.onBlur = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onTouched();
                this.isFocused = false;
                /** @type {?} */
                var value = this.getCurrentValidValue(this.actualValue);
                this.setValue(value, "" + this.value !== "" + value);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzInputNumberComponent.prototype.onFocus = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.isFocused = true;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzInputNumberComponent.prototype.getRatio = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var ratio = 1;
                if (e.metaKey || e.ctrlKey) {
                    ratio = 0.1;
                }
                else if (e.shiftKey) {
                    ratio = 10;
                }
                return ratio;
            };
        /**
         * @param {?} e
         * @param {?=} ratio
         * @return {?}
         */
        NzInputNumberComponent.prototype.down = /**
         * @param {?} e
         * @param {?=} ratio
         * @return {?}
         */
            function (e, ratio) {
                if (!this.isFocused) {
                    this.focus();
                }
                this.step('down', e, ratio);
            };
        /**
         * @param {?} e
         * @param {?=} ratio
         * @return {?}
         */
        NzInputNumberComponent.prototype.up = /**
         * @param {?} e
         * @param {?=} ratio
         * @return {?}
         */
            function (e, ratio) {
                if (!this.isFocused) {
                    this.focus();
                }
                this.step('up', e, ratio);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzInputNumberComponent.prototype.getPrecision = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var valueString = value.toString();
                if (valueString.indexOf('e-') >= 0) {
                    return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);
                }
                /** @type {?} */
                var precision = 0;
                if (valueString.indexOf('.') >= 0) {
                    precision = valueString.length - valueString.indexOf('.') - 1;
                }
                return precision;
            };
        // step={1.0} value={1.51}
        // press +
        // then value should be 2.51, rather than 2.5
        // if this.props.precision is undefined
        // https://github.com/react-component/input-number/issues/39
        /**
         * @param {?} currentValue
         * @param {?} ratio
         * @return {?}
         */
        NzInputNumberComponent.prototype.getMaxPrecision = /**
         * @param {?} currentValue
         * @param {?} ratio
         * @return {?}
         */
            function (currentValue, ratio) {
                if (isNotNil(this.nzPrecision)) {
                    return this.nzPrecision;
                }
                /** @type {?} */
                var ratioPrecision = this.getPrecision(ratio);
                /** @type {?} */
                var stepPrecision = this.getPrecision(this.nzStep);
                /** @type {?} */
                var currentValuePrecision = this.getPrecision(/** @type {?} */ (currentValue));
                if (!currentValue) {
                    return ratioPrecision + stepPrecision;
                }
                return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);
            };
        /**
         * @param {?} currentValue
         * @param {?} ratio
         * @return {?}
         */
        NzInputNumberComponent.prototype.getPrecisionFactor = /**
         * @param {?} currentValue
         * @param {?} ratio
         * @return {?}
         */
            function (currentValue, ratio) {
                /** @type {?} */
                var precision = this.getMaxPrecision(currentValue, ratio);
                return Math.pow(10, precision);
            };
        /**
         * @param {?} val
         * @param {?} rat
         * @return {?}
         */
        NzInputNumberComponent.prototype.upStep = /**
         * @param {?} val
         * @param {?} rat
         * @return {?}
         */
            function (val, rat) {
                /** @type {?} */
                var precisionFactor = this.getPrecisionFactor(val, rat);
                /** @type {?} */
                var precision = Math.abs(this.getMaxPrecision(val, rat));
                /** @type {?} */
                var result;
                if (typeof val === 'number') {
                    result =
                        ((precisionFactor * val + precisionFactor * this.nzStep * rat) /
                            precisionFactor).toFixed(precision);
                }
                else {
                    result = this.nzMin === -Infinity ? this.nzStep : this.nzMin;
                }
                return this.toNumber(result);
            };
        /**
         * @param {?} val
         * @param {?} rat
         * @return {?}
         */
        NzInputNumberComponent.prototype.downStep = /**
         * @param {?} val
         * @param {?} rat
         * @return {?}
         */
            function (val, rat) {
                /** @type {?} */
                var precisionFactor = this.getPrecisionFactor(val, rat);
                /** @type {?} */
                var precision = Math.abs(this.getMaxPrecision(val, rat));
                /** @type {?} */
                var result;
                if (typeof val === 'number') {
                    result =
                        ((precisionFactor * val - precisionFactor * this.nzStep * rat) /
                            precisionFactor).toFixed(precision);
                }
                else {
                    result = this.nzMin === -Infinity ? -this.nzStep : this.nzMin;
                }
                return this.toNumber(result);
            };
        /**
         * @param {?} type
         * @param {?} e
         * @param {?=} ratio
         * @return {?}
         */
        NzInputNumberComponent.prototype.step = /**
         * @param {?} type
         * @param {?} e
         * @param {?=} ratio
         * @return {?}
         */
            function (type, e, ratio) {
                var _this = this;
                if (ratio === void 0) {
                    ratio = 1;
                }
                this.stop();
                e.preventDefault();
                if (this.nzDisabled) {
                    return;
                }
                /** @type {?} */
                var value = this.getCurrentValidValue(this.actualValue) || 0;
                /** @type {?} */
                var val;
                if (type === 'up') {
                    val = this.upStep(value, ratio);
                }
                else if (type === 'down') {
                    val = this.downStep(value, ratio);
                }
                /** @type {?} */
                var outOfRange = val > this.nzMax || val < this.nzMin;
                if (val > this.nzMax) {
                    val = this.nzMax;
                }
                else if (val < this.nzMin) {
                    val = this.nzMin;
                }
                this.setValue(val, true);
                this.isFocused = true;
                if (outOfRange) {
                    return;
                }
                this.autoStepTimer = setTimeout(function () {
                    _this[type](e, ratio, true);
                }, 600);
            };
        /**
         * @return {?}
         */
        NzInputNumberComponent.prototype.stop = /**
         * @return {?}
         */
            function () {
                if (this.autoStepTimer) {
                    clearTimeout(this.autoStepTimer);
                }
            };
        /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
        NzInputNumberComponent.prototype.setValue = /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
            function (value, emit) {
                if (emit && ("" + this.value !== "" + value)) {
                    this.onChange(value);
                }
                this.value = value;
                this.actualValue = value;
                /** @type {?} */
                var displayValue = isNotNil(this.nzFormatter(this.value)) ? this.nzFormatter(this.value) : '';
                this.displayValue = displayValue;
                this.inputElement.nativeElement.value = displayValue;
                this.disabledUp = this.disabledDown = false;
                if (value || value === 0) {
                    /** @type {?} */
                    var val = Number(value);
                    if (val >= this.nzMax) {
                        this.disabledUp = true;
                    }
                    if (val <= this.nzMin) {
                        this.disabledDown = true;
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzInputNumberComponent.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.code === 'ArrowUp' || e.keyCode === keycodes.UP_ARROW) {
                    /** @type {?} */
                    var ratio = this.getRatio(e);
                    this.up(e, ratio);
                    this.stop();
                }
                else if (e.code === 'ArrowDown' || e.keyCode === keycodes.DOWN_ARROW) {
                    /** @type {?} */
                    var ratio = this.getRatio(e);
                    this.down(e, ratio);
                    this.stop();
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzInputNumberComponent.prototype.onKeyUp = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.stop();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzInputNumberComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.setValue(value, false);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzInputNumberComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzInputNumberComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzInputNumberComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
            };
        /**
         * @return {?}
         */
        NzInputNumberComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.inputElement.nativeElement.focus();
            };
        /**
         * @return {?}
         */
        NzInputNumberComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.inputElement.nativeElement.blur();
            };
        /**
         * @return {?}
         */
        NzInputNumberComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.isInit = true;
                if (this._autoFocus) {
                    this.focus();
                }
            };
        NzInputNumberComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-input-number',
                        template: "<div class=\"ant-input-number-handler-wrap\">\n  <span\n    unselectable=\"unselectable\"\n    (mousedown)=\"up($event)\"\n    (mouseup)=\"stop()\"\n    (mouseleave)=\"stop()\"\n    class=\"ant-input-number-handler ant-input-number-handler-up\"\n    [class.ant-input-number-handler-up-disabled]=\"disabledUp\">\n    <i nz-icon type=\"up\" class=\"ant-input-number-handler-up-inner\"></i>\n  </span>\n  <span\n    unselectable=\"unselectable\"\n    (mousedown)=\"down($event)\"\n    (mouseup)=\"stop()\"\n    (mouseleave)=\"stop()\"\n    class=\"ant-input-number-handler ant-input-number-handler-down\"\n    [class.ant-input-number-handler-down-disabled]=\"disabledDown\">\n    <i nz-icon type=\"down\" class=\"ant-input-number-handler-down-inner\"></i>\n  </span>\n</div>\n<div class=\"ant-input-number-input-wrap\">\n  <input\n    #inputElement\n    class=\"ant-input-number-input\"\n    [disabled]=\"nzDisabled\"\n    [attr.min]=\"nzMin\"\n    [attr.max]=\"nzMax\"\n    [placeholder]=\"nzPlaceHolder\"\n    [attr.step]=\"nzStep\"\n    (keydown)=\"onKeyDown($event)\"\n    (keyup)=\"onKeyUp($event)\"\n    (blur)=\"onBlur($event)\"\n    (focus)=\"onFocus($event)\"\n    [ngModel]=\"displayValue\"\n    (ngModelChange)=\"onModelChange($event)\"\n    autocomplete=\"off\">\n</div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzInputNumberComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.ant-input-number]': 'true',
                            '[class.ant-input-number-focused]': 'isFocused'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzInputNumberComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzInputNumberComponent.propDecorators = {
            inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
            nzSize: [{ type: i0.Input }],
            nzMin: [{ type: i0.Input }],
            nzMax: [{ type: i0.Input }],
            nzParser: [{ type: i0.Input }],
            nzPrecision: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            isLarge: [{ type: i0.HostBinding, args: ['class.ant-input-number-lg',] }],
            isSmall: [{ type: i0.HostBinding, args: ['class.ant-input-number-sm',] }],
            nzAutoFocus: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ant-input-number-disabled',] }],
            nzStep: [{ type: i0.Input }],
            nzFormatter: [{ type: i0.Input }]
        };
        return NzInputNumberComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzInputNumberModule = /** @class */ (function () {
        function NzInputNumberModule() {
        }
        NzInputNumberModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, NzIconModule],
                        declarations: [NzInputNumberComponent],
                        exports: [NzInputNumberComponent]
                    },] }
        ];
        return NzInputNumberModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzContentComponent = /** @class */ (function () {
        function NzContentComponent() {
        }
        NzContentComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-content',
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-layout-content]': 'true'
                        },
                        styles: ["nz-content {\n      display: block;\n    }"]
                    }] }
        ];
        return NzContentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzFooterComponent = /** @class */ (function () {
        function NzFooterComponent() {
        }
        NzFooterComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-footer',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-layout-footer]': 'true'
                        },
                        styles: ["nz-footer {\n      display: block;\n    }"]
                    }] }
        ];
        return NzFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzHeaderComponent = /** @class */ (function () {
        function NzHeaderComponent() {
        }
        NzHeaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-header',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-layout-header]': 'true'
                        },
                        styles: ["nz-header {\n      display: block;\n    }"]
                    }] }
        ];
        return NzHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzLayoutComponent = /** @class */ (function () {
        function NzLayoutComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        NzLayoutComponent.prototype.destroySider = /**
         * @return {?}
         */
            function () {
                this.renderer.removeClass(this.elementRef.nativeElement, 'ant-layout-has-sider');
            };
        /**
         * @return {?}
         */
        NzLayoutComponent.prototype.initSider = /**
         * @return {?}
         */
            function () {
                this.renderer.addClass(this.elementRef.nativeElement, 'ant-layout-has-sider');
            };
        NzLayoutComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-layout',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "<ng-content></ng-content>",
                        host: {
                            '[class.ant-layout]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzLayoutComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        return NzLayoutComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSiderComponent = /** @class */ (function () {
        function NzSiderComponent(nzLayoutComponent, mediaMatcher, ngZone, platform$$1, cdr) {
            this.nzLayoutComponent = nzLayoutComponent;
            this.mediaMatcher = mediaMatcher;
            this.ngZone = ngZone;
            this.platform = platform$$1;
            this.cdr = cdr;
            this.below = false;
            this.destroy$ = new rxjs.Subject();
            this.dimensionMap = {
                xs: '480px',
                sm: '576px',
                md: '768px',
                lg: '992px',
                xl: '1200px',
                xxl: '1600px'
            };
            this.nzWidth = 200;
            this.nzCollapsedWidth = 80;
            this.nzReverseArrow = false;
            this.nzCollapsible = false;
            this.nzCollapsed = false;
            this.nzCollapsedChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzSiderComponent.prototype, "flexSetting", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzCollapsed) {
                    return "0 0 " + this.nzCollapsedWidth + "px";
                }
                else {
                    return "0 0 " + this.nzWidth + "px";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSiderComponent.prototype, "widthSetting", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzCollapsed) {
                    return this.nzCollapsedWidth;
                }
                else {
                    return this.nzWidth;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzSiderComponent.prototype.watchMatchMedia = /**
         * @return {?}
         */
            function () {
                if (this.nzBreakpoint) {
                    /** @type {?} */
                    var matchBelow = this.mediaMatcher.matchMedia("(max-width: " + this.dimensionMap[this.nzBreakpoint] + ")").matches;
                    this.below = matchBelow;
                    this.nzCollapsed = matchBelow;
                    this.nzCollapsedChange.emit(matchBelow);
                    this.cdr.markForCheck();
                }
            };
        /**
         * @return {?}
         */
        NzSiderComponent.prototype.toggleCollapse = /**
         * @return {?}
         */
            function () {
                this.nzCollapsed = !this.nzCollapsed;
                this.nzCollapsedChange.emit(this.nzCollapsed);
            };
        Object.defineProperty(NzSiderComponent.prototype, "isZeroTrigger", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth === 0) && ((this.nzBreakpoint && this.below) || (!this.nzBreakpoint));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSiderComponent.prototype, "isSiderTrigger", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth !== 0);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzSiderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.nzLayoutComponent) {
                    this.nzLayoutComponent.initSider();
                }
            };
        /**
         * @return {?}
         */
        NzSiderComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.platform.isBrowser) {
                    this.ngZone.runOutsideAngular(function () {
                        rxjs.fromEvent(window, 'resize')
                            .pipe(operators.startWith(null), operators.auditTime(16), operators.takeUntil(_this.destroy$))
                            .subscribe(function () { return _this.watchMatchMedia(); });
                    });
                }
            };
        /**
         * @return {?}
         */
        NzSiderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
                if (this.nzLayoutComponent) {
                    this.nzLayoutComponent.destroySider();
                }
            };
        NzSiderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-sider',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<div class=\"ant-layout-sider-children\">\n  <ng-content></ng-content>\n</div>\n<span class=\"ant-layout-sider-zero-width-trigger\"\n  *ngIf=\"isZeroTrigger\"\n  (click)=\"toggleCollapse()\">\n  <i nz-icon type=\"bars\"></i>\n</span>\n<div class=\"ant-layout-sider-trigger\"\n  *ngIf=\"isSiderTrigger\"\n  (click)=\"toggleCollapse()\"\n  [style.width.px]=\"nzCollapsed ? nzCollapsedWidth : nzWidth\">\n  <ng-template [ngTemplateOutlet]=\"nzTrigger\"></ng-template>\n</div>\n<ng-template #defaultTrigger>\n  <i nz-icon [type]=\"nzCollapsed ? 'right' : 'left'\" *ngIf=\"!nzReverseArrow\"></i>\n  <i nz-icon [type]=\"nzCollapsed ? 'left' : 'right'\" *ngIf=\"nzReverseArrow\"></i>\n</ng-template>",
                        host: {
                            '[class.ant-layout-sider]': 'true',
                            '[class.ant-layout-sider-zero-width]': 'nzCollapsed && (nzCollapsedWidth===0)',
                            '[style.flex]': 'flexSetting',
                            '[style.max-width.px]': 'widthSetting',
                            '[style.min-width.px]': 'widthSetting',
                            '[style.width.px]': 'widthSetting'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzSiderComponent.ctorParameters = function () {
            return [
                { type: NzLayoutComponent, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
                { type: layout.MediaMatcher },
                { type: i0.NgZone },
                { type: platform.Platform },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzSiderComponent.propDecorators = {
            nzWidth: [{ type: i0.Input }],
            nzCollapsedWidth: [{ type: i0.Input }],
            nzBreakpoint: [{ type: i0.Input }],
            nzReverseArrow: [{ type: i0.Input }],
            nzCollapsible: [{ type: i0.Input }],
            nzTrigger: [{ type: i0.Input }, { type: i0.ViewChild, args: ['defaultTrigger',] }],
            nzCollapsed: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ant-layout-sider-collapsed',] }],
            nzCollapsedChange: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzSiderComponent.prototype, "nzReverseArrow", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzSiderComponent.prototype, "nzCollapsible", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzSiderComponent.prototype, "nzCollapsed", void 0);
        return NzSiderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzLayoutModule = /** @class */ (function () {
        function NzLayoutModule() {
        }
        NzLayoutModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzLayoutComponent, NzHeaderComponent, NzContentComponent, NzFooterComponent, NzSiderComponent],
                        exports: [NzLayoutComponent, NzHeaderComponent, NzContentComponent, NzFooterComponent, NzSiderComponent],
                        imports: [i3.CommonModule, NzIconModule, layout.LayoutModule, platform.PlatformModule]
                    },] }
        ];
        return NzLayoutModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSpinComponent = /** @class */ (function () {
        function NzSpinComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.spinning$ = new rxjs.BehaviorSubject(true);
            this.debounceSpinning$ = this.spinning$.asObservable().pipe(operators.debounceTime(0));
            this.nzSize = 'default';
        }
        Object.defineProperty(NzSpinComponent.prototype, "nzDelay", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this.debounceSpinning$ = this.spinning$.asObservable().pipe(operators.debounceTime(value));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSpinComponent.prototype, "nzSpinning", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.spinning$.next(toBoolean(value));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzSpinComponent.prototype.checkNested = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.elementRef.nativeElement;
                /** @type {?} */
                var containerElement = this.containerElement.nativeElement;
                /** @type {?} */
                var nestedElement = this.nestedElement.nativeElement;
                /** no way to detect empty https://github.com/angular/angular/issues/12530 **/
                /** https://github.com/angular/material2/issues/11280 **/
                if (!isEmpty(containerElement)) {
                    this.renderer.removeStyle(containerElement, 'display');
                    this.renderer.setStyle(el, 'display', 'block');
                    this.renderer.addClass(nestedElement, 'ant-spin-nested-loading');
                }
                else {
                    this.renderer.setStyle(containerElement, 'display', 'none');
                    this.renderer.removeStyle(el, 'display');
                    this.renderer.removeClass(nestedElement, 'ant-spin-nested-loading');
                }
            };
        /**
         * @return {?}
         */
        NzSpinComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.checkNested();
            };
        NzSpinComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-spin',
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<ng-template #defaultIndicatorTemplate>\n  <span class=\"ant-spin-dot\"\n    [class.ant-spin-dot-spin]=\"(debounceSpinning$ | async) === true\">\n    <i></i><i></i><i></i><i></i>\n  </span>\n</ng-template>\n<div #nestedElement>\n  <div [hidden]=\"!((debounceSpinning$ | async) === true)\">\n    <div class=\"ant-spin\"\n      [class.ant-spin-spinning]=\"(debounceSpinning$ | async) === true\"\n      [class.ant-spin-lg]=\"nzSize === 'large'\"\n      [class.ant-spin-sm]=\"nzSize === 'small'\"\n      [class.ant-spin-show-text]=\"nzTip\">\n      <ng-template [ngTemplateOutlet]=\"nzIndicator || defaultIndicatorTemplate\"></ng-template>\n      <div class=\"ant-spin-text\" *ngIf=\"nzTip\">{{ nzTip }}</div>\n    </div>\n  </div>\n  <div #containerElement\n    class=\"ant-spin-container\"\n    [class.ant-spin-blur]=\"(debounceSpinning$ | async) === true\"\n    (cdkObserveContent)=\"checkNested()\">\n    <ng-content></ng-content>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzSpinComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzSpinComponent.propDecorators = {
            containerElement: [{ type: i0.ViewChild, args: ['containerElement',] }],
            nestedElement: [{ type: i0.ViewChild, args: ['nestedElement',] }],
            nzIndicator: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzTip: [{ type: i0.Input }],
            nzDelay: [{ type: i0.Input }],
            nzSpinning: [{ type: i0.Input }]
        };
        return NzSpinComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSpinModule = /** @class */ (function () {
        function NzSpinModule() {
        }
        NzSpinModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [NzSpinComponent],
                        declarations: [NzSpinComponent],
                        imports: [i3.CommonModule, observers.ObserversModule]
                    },] }
        ];
        return NzSpinModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzListItemMetaComponent = /** @class */ (function () {
        function NzListItemMetaComponent() {
            this.avatarStr = '';
        }
        Object.defineProperty(NzListItemMetaComponent.prototype, "nzAvatar", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value instanceof i0.TemplateRef) {
                    this.avatarStr = null;
                    this.avatarTpl = value;
                }
                else {
                    this.avatarStr = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        NzListItemMetaComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-list-item-meta',
                        template: "<div *ngIf=\"avatarStr || avatarTpl\" class=\"ant-list-item-meta-avatar\">\n  <ng-container *ngIf=\"avatarStr; else avatarTpl\">\n    <nz-avatar [nzSrc]=\"avatarStr\"></nz-avatar>\n  </ng-container>\n</div>\n<div *ngIf=\"nzTitle || nzDescription\" class=\"ant-list-item-meta-content\">\n  <h4 *ngIf=\"nzTitle\" class=\"ant-list-item-meta-title\">\n    <ng-container *nzStringTemplateOutlet=\"nzTitle\">{{ nzTitle }}</ng-container>\n  </h4>\n  <div *ngIf=\"nzDescription\" class=\"ant-list-item-meta-description\">\n    <ng-container *nzStringTemplateOutlet=\"nzDescription\">{{ nzDescription }}</ng-container>\n  </div>\n</div>",
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        host: {
                            '[class.ant-list-item-meta]': 'true'
                        }
                    }] }
        ];
        NzListItemMetaComponent.propDecorators = {
            nzAvatar: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzDescription: [{ type: i0.Input }]
        };
        return NzListItemMetaComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzListItemComponent = /** @class */ (function () {
        function NzListItemComponent() {
            this.nzActions = [];
        }
        NzListItemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-list-item',
                        template: "<ng-template #contentTpl>\n  <div *ngIf=\"nzContent\" class=\"ant-list-item-content\" [ngClass]=\"{'ant-list-item-content-single': metas.length < 1}\">\n    <ng-container *nzStringTemplateOutlet=\"nzContent\">{{ nzContent }}</ng-container>\n  </div>\n</ng-template>\n<ng-template #actionsTpl>\n  <ul *ngIf=\"nzActions?.length > 0\" class=\"ant-list-item-action\">\n    <li *ngFor=\"let i of nzActions; let last=last;\">\n      <ng-template [ngTemplateOutlet]=\"i\"></ng-template>\n      <em *ngIf=\"!last\" class=\"ant-list-item-action-split\"></em>\n    </li>\n  </ul>\n</ng-template>\n<ng-template #mainTpl>\n  <ng-content></ng-content>\n  <ng-template [ngTemplateOutlet]=\"contentTpl\"></ng-template>\n  <ng-template [ngTemplateOutlet]=\"actionsTpl\"></ng-template>\n</ng-template>\n<div *ngIf=\"nzExtra; else mainTpl\" class=\"ant-list-item-extra-wrap\">\n  <div class=\"ant-list-item-main\">\n    <ng-template [ngTemplateOutlet]=\"mainTpl\"></ng-template>\n  </div>\n  <div class=\"ant-list-item-extra\">\n    <ng-template [ngTemplateOutlet]=\"nzExtra\"></ng-template>\n  </div>\n</div>",
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[class.ant-list-item]': 'true'
                        }
                    }] }
        ];
        NzListItemComponent.propDecorators = {
            metas: [{ type: i0.ContentChildren, args: [NzListItemMetaComponent,] }],
            nzActions: [{ type: i0.Input }],
            nzContent: [{ type: i0.Input }],
            nzExtra: [{ type: i0.Input }]
        };
        return NzListItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzListComponent = /** @class */ (function () {
        // #endregion
        function NzListComponent(el, cd, updateHostClassService, i18n) {
            this.el = el;
            this.cd = cd;
            this.updateHostClassService = updateHostClassService;
            this.i18n = i18n;
            /* tslint:disable-next-line:no-any */
            this.locale = {};
            this.nzBordered = false;
            this.nzItemLayout = 'horizontal';
            this.nzLoading = false;
            this.nzSize = 'default';
            this.nzSplit = true;
            this.prefixCls = 'ant-list';
        }
        /**
         * @return {?}
         */
        NzListComponent.prototype._setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-vertical"] = this.nzItemLayout === 'vertical',
                    _a[this.prefixCls + "-lg"] = this.nzSize === 'large',
                    _a[this.prefixCls + "-sm"] = this.nzSize === 'small',
                    _a[this.prefixCls + "-split"] = this.nzSplit,
                    _a[this.prefixCls + "-bordered"] = this.nzBordered,
                    _a[this.prefixCls + "-loading"] = this.nzLoading,
                    _a[this.prefixCls + "-grid"] = this.nzGrid,
                    _a[this.prefixCls + "-something-after-last-item"] = !!(this.nzLoadMore || this.nzPagination || this.nzFooter),
                    _a);
                this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);
            };
        /**
         * @return {?}
         */
        NzListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18n$ = this.i18n.localeChange.subscribe(function () {
                    _this.locale = _this.i18n.getLocaleData('Table');
                    _this.cd.detectChanges();
                });
                this._setClassMap();
            };
        /**
         * @return {?}
         */
        NzListComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this._setClassMap();
            };
        /**
         * @return {?}
         */
        NzListComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.i18n$.unsubscribe();
            };
        NzListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-list',
                        template: "<ng-template #itemsTpl>\n  <ng-container *ngFor=\"let item of nzDataSource; let index = index\">\n    <ng-template [ngTemplateOutlet]=\"nzRenderItem\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"></ng-template>\n  </ng-container>\n</ng-template>\n<div *ngIf=\"nzHeader\" class=\"ant-list-header\">\n  <ng-container *nzStringTemplateOutlet=\"nzHeader\">{{ nzHeader }}</ng-container>\n</div>\n<nz-spin [nzSpinning]=\"nzLoading\">\n  <ng-container *ngIf=\"nzDataSource\">\n    <div *ngIf=\"nzLoading && nzDataSource.length === 0\" [style.min-height.px]=\"53\"></div>\n    <div *ngIf=\"nzGrid; else itemsTpl\" nz-row [nzGutter]=\"nzGrid.gutter\">\n      <div nz-col [nzSpan]=\"nzGrid.span\" [nzXs]=\"nzGrid.xs\" [nzSm]=\"nzGrid.sm\" [nzMd]=\"nzGrid.md\" [nzLg]=\"nzGrid.lg\" [nzXl]=\"nzGrid.xl\"\n           [nzXXl]=\"nzGrid.xxl\" *ngFor=\"let item of nzDataSource; let index = index\">\n        <ng-template [ngTemplateOutlet]=\"nzRenderItem\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"></ng-template>\n      </div>\n    </div>\n    <div *ngIf=\"!nzLoading && nzDataSource.length === 0\" class=\"ant-list-empty-text\">\n      {{locale.emptyText}}\n    </div>\n  </ng-container>\n  <ng-content></ng-content>\n</nz-spin>\n<div *ngIf=\"nzFooter\" class=\"ant-list-footer\">\n  <ng-container *nzStringTemplateOutlet=\"nzFooter\">{{ nzFooter }}</ng-container>\n</div>\n<ng-template [ngTemplateOutlet]=\"nzLoadMore\"></ng-template>\n<div *ngIf=\"nzPagination\" class=\"ant-list-pagination\">\n  <ng-template [ngTemplateOutlet]=\"nzPagination\"></ng-template>\n</div>",
                        providers: [NzUpdateHostClassService],
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    :host {\n      display: block;\n    }\n\n    nz-spin {\n      display: block;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzListComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ChangeDetectorRef },
                { type: NzUpdateHostClassService },
                { type: NzI18nService }
            ];
        };
        NzListComponent.propDecorators = {
            nzDataSource: [{ type: i0.Input }],
            nzBordered: [{ type: i0.Input }],
            nzGrid: [{ type: i0.Input }],
            nzHeader: [{ type: i0.Input }],
            nzFooter: [{ type: i0.Input }],
            nzItemLayout: [{ type: i0.Input }],
            nzRenderItem: [{ type: i0.Input }],
            nzLoading: [{ type: i0.Input }],
            nzLoadMore: [{ type: i0.Input }],
            nzPagination: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzSplit: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzListComponent.prototype, "nzBordered", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzListComponent.prototype, "nzLoading", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzListComponent.prototype, "nzSplit", void 0);
        return NzListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzListModule = /** @class */ (function () {
        function NzListModule() {
        }
        NzListModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, NzSpinModule, NzGridModule, NzAvatarModule, NzI18nModule, NzAddOnModule],
                        declarations: [NzListComponent, NzListItemComponent, NzListItemMetaComponent],
                        exports: [NzListComponent, NzListItemComponent, NzListItemMetaComponent]
                    },] }
        ];
        return NzListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMentionSuggestionDirective = /** @class */ (function () {
        function NzMentionSuggestionDirective() {
        }
        NzMentionSuggestionDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nzMentionSuggestion]'
                    },] }
        ];
        return NzMentionSuggestionDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_MENTION_TRIGGER_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NzMentionTriggerDirective; }),
        multi: true
    };
    var NzMentionTriggerDirective = /** @class */ (function () {
        function NzMentionTriggerDirective(el) {
            this.el = el;
            this.onFocusin = new i0.EventEmitter();
            this.onBlur = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onKeydown = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.completeEvents();
            };
        /**
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.completeEvents = /**
         * @return {?}
         */
            function () {
                this.onFocusin.complete();
                this.onBlur.complete();
                this.onInput.complete();
                this.onKeydown.complete();
                this.onClick.complete();
            };
        /**
         * @param {?=} caretPos
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.focus = /**
         * @param {?=} caretPos
         * @return {?}
         */
            function (caretPos) {
                this.el.nativeElement.focus();
                this.el.nativeElement.setSelectionRange(caretPos, caretPos);
            };
        /**
         * @param {?} mention
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.insertMention = /**
         * @param {?} mention
         * @return {?}
         */
            function (mention) {
                /** @type {?} */
                var value = this.el.nativeElement.value;
                /** @type {?} */
                var insertValue = mention.mention.trim() + ' ';
                /** @type {?} */
                var newValue = [
                    value.slice(0, mention.startPos + 1),
                    insertValue,
                    value.slice(mention.endPos, value.length)
                ].join('');
                this.el.nativeElement.value = newValue;
                this.focus(mention.startPos + insertValue.length + 1);
                this.onChange(newValue);
                this.value = newValue;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                if (typeof value === 'string') {
                    this.el.nativeElement.value = value;
                }
                else {
                    this.el.nativeElement.value = '';
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzMentionTriggerDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        NzMentionTriggerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'input[nzMentionTrigger], textarea[nzMentionTrigger]',
                        providers: [NZ_MENTION_TRIGGER_ACCESSOR],
                        host: {
                            'autocomplete': 'off',
                            '(focusin)': 'onFocusin.emit()',
                            '(blur)': 'onBlur.emit()',
                            '(input)': 'onInput.emit($event)',
                            '(keydown)': 'onKeydown.emit($event)',
                            '(click)': 'onClick.emit($event)'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzMentionTriggerDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        return NzMentionTriggerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMentionComponent = /** @class */ (function () {
        function NzMentionComponent(ngDocument, changeDetectorRef, ngZone, overlay, viewContainerRef) {
            this.ngDocument = ngDocument;
            this.changeDetectorRef = changeDetectorRef;
            this.ngZone = ngZone;
            this.overlay = overlay;
            this.viewContainerRef = viewContainerRef;
            this.nzValueWith = function (value) { return value; }; // tslint:disable-line:no-any
            this.nzPrefix = '@';
            this.nzLoading = false;
            this.nzNotFoundContent = '无匹配结果，轻敲空格完成输入';
            this.nzPlacement = 'bottom';
            this.nzSuggestions = [];
            this.nzOnSelect = new i0.EventEmitter();
            this.nzOnSearchChange = new i0.EventEmitter();
            this.isOpen = false;
            this.filteredSuggestions = [];
            this.suggestionTemplate = null; // tslint:disable-line:no-any
            this.activeIndex = -1;
        }
        Object.defineProperty(NzMentionComponent.prototype, "suggestionChild", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.suggestionTemplate = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzMentionComponent.prototype, "triggerNativeElement", {
            get: /**
             * @return {?}
             */ function () {
                return this.trigger.el.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzMentionComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.hasOwnProperty('nzSuggestions')) {
                    if (this.isOpen) {
                        this.previousValue = null;
                        this.activeIndex = -1;
                        this.resetDropdown(false);
                    }
                }
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.bindTriggerEvents();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.closeDropdown();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.closeDropdown = /**
         * @return {?}
         */
            function () {
                if (this.overlayRef && this.overlayRef.hasAttached()) {
                    this.overlayRef.detach();
                    this.overlayBackdropClickSubscription.unsubscribe();
                    this.isOpen = false;
                    this.changeDetectorRef.markForCheck();
                }
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.openDropdown = /**
         * @return {?}
         */
            function () {
                this.attachOverlay();
                this.isOpen = true;
                this.changeDetectorRef.markForCheck();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.getMentions = /**
         * @return {?}
         */
            function () {
                return getMentions(this.trigger.value, this.nzPrefix);
            };
        /**
         * @param {?} suggestion
         * @return {?}
         */
        NzMentionComponent.prototype.selectSuggestion = /**
         * @param {?} suggestion
         * @return {?}
         */
            function (suggestion) {
                /** @type {?} */
                var value = this.nzValueWith(suggestion);
                this.trigger.insertMention({
                    mention: value,
                    startPos: this.cursorMentionStart,
                    endPos: this.cursorMentionEnd
                });
                this.nzOnSelect.emit(suggestion);
                this.closeDropdown();
                this.activeIndex = -1;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzMentionComponent.prototype.handleInput = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var target = /** @type {?} */ (event.target);
                this.trigger.onChange(target.value);
                this.trigger.value = target.value;
                this.resetDropdown();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzMentionComponent.prototype.handleKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var keyCode = event.keyCode;
                if (this.isOpen && keyCode === keycodes.ENTER && this.activeIndex !== -1 && this.filteredSuggestions.length) {
                    this.selectSuggestion(this.filteredSuggestions[this.activeIndex]);
                    event.preventDefault();
                }
                else if (keyCode === keycodes.LEFT_ARROW || keyCode === keycodes.RIGHT_ARROW) {
                    this.resetDropdown();
                    event.stopPropagation();
                }
                else {
                    if (this.isOpen && (keyCode === keycodes.TAB || keyCode === keycodes.ESCAPE)) {
                        this.closeDropdown();
                        return;
                    }
                    if (this.isOpen && (keyCode === keycodes.UP_ARROW)) {
                        this.setPreviousItemActive();
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    if (this.isOpen && (keyCode === keycodes.DOWN_ARROW)) {
                        this.setNextItemActive();
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.handleClick = /**
         * @return {?}
         */
            function () {
                this.resetDropdown();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.bindTriggerEvents = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.trigger.onInput.subscribe(function (e) { return _this.handleInput(e); });
                this.trigger.onKeydown.subscribe(function (e) { return _this.handleKeydown(e); });
                this.trigger.onClick.subscribe(function () { return _this.handleClick(); });
            };
        /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
        NzMentionComponent.prototype.suggestionsFilter = /**
         * @param {?} value
         * @param {?} emit
         * @return {?}
         */
            function (value, emit) {
                var _this = this;
                /** @type {?} */
                var suggestions = value.substring(1);
                if (this.previousValue === value) {
                    return;
                }
                this.previousValue = value;
                if (emit) {
                    this.nzOnSearchChange.emit({
                        value: this.cursorMention.substring(1),
                        prefix: this.cursorMention[0]
                    });
                }
                /** @type {?} */
                var searchValue = suggestions.toLowerCase();
                this.filteredSuggestions = this.nzSuggestions
                    .filter(function (suggestion) { return _this.nzValueWith(suggestion).toLowerCase().includes(searchValue); });
            };
        /**
         * @param {?=} emit
         * @return {?}
         */
        NzMentionComponent.prototype.resetDropdown = /**
         * @param {?=} emit
         * @return {?}
         */
            function (emit) {
                if (emit === void 0) {
                    emit = true;
                }
                this.resetCursorMention();
                if (typeof this.cursorMention !== 'string' || !this.canOpen()) {
                    this.closeDropdown();
                    return;
                }
                this.suggestionsFilter(this.cursorMention, emit);
                /** @type {?} */
                var activeIndex = this.filteredSuggestions.indexOf(this.cursorMention.substring(1));
                this.activeIndex = activeIndex >= 0 ? activeIndex : 0;
                this.openDropdown();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.setNextItemActive = /**
         * @return {?}
         */
            function () {
                this.activeIndex = this.activeIndex + 1 <= this.filteredSuggestions.length - 1
                    ? this.activeIndex + 1
                    : 0;
                this.changeDetectorRef.markForCheck();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.setPreviousItemActive = /**
         * @return {?}
         */
            function () {
                this.activeIndex = this.activeIndex - 1 < 0
                    ? this.filteredSuggestions.length - 1
                    : this.activeIndex - 1;
                this.changeDetectorRef.markForCheck();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.canOpen = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var element = this.triggerNativeElement;
                return !element.readOnly && !element.disabled;
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.resetCursorMention = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var value = this.triggerNativeElement.value.replace(/[\r\n]/g, ' ') || '';
                /** @type {?} */
                var selectionStart = this.triggerNativeElement.selectionStart;
                /** @type {?} */
                var prefix = typeof this.nzPrefix === 'string' ? [this.nzPrefix] : this.nzPrefix;
                /** @type {?} */
                var i = prefix.length;
                while (i >= 0) {
                    /** @type {?} */
                    var startPos = value.lastIndexOf(prefix[i], selectionStart);
                    /** @type {?} */
                    var endPos = value.indexOf(' ', selectionStart) > -1 ? value.indexOf(' ', selectionStart) : value.length;
                    /** @type {?} */
                    var mention = value.substring(startPos, endPos);
                    if ((startPos > 0 && value[startPos - 1] !== ' ')
                        || startPos < 0
                        || mention.includes(prefix[i], 1)
                        || mention.includes(' ')) {
                        this.cursorMention = null;
                        this.cursorMentionStart = -1;
                        this.cursorMentionEnd = -1;
                    }
                    else {
                        this.cursorMention = mention;
                        this.cursorMentionStart = startPos;
                        this.cursorMentionEnd = endPos;
                        return;
                    }
                    i--;
                }
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.updatePositions = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var coordinates = getCaretCoordinates(this.triggerNativeElement, this.cursorMentionStart);
                /** @type {?} */
                var top = coordinates.top
                    - this.triggerNativeElement.getBoundingClientRect().height
                    - this.triggerNativeElement.scrollTop
                    + (this.nzPlacement === 'bottom' ? coordinates.height : 0);
                /** @type {?} */
                var left = coordinates.left - this.triggerNativeElement.scrollLeft;
                this.positionStrategy.withDefaultOffsetX(left).withDefaultOffsetY(top);
                if (this.nzPlacement === 'bottom') {
                    this.positionStrategy.withPositions([DEFAULT_MENTION_POSITIONS[0]]);
                }
                if (this.nzPlacement === 'top') {
                    this.positionStrategy.withPositions([DEFAULT_MENTION_POSITIONS[1]]);
                }
                this.positionStrategy.apply();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.subscribeOverlayBackdropClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.merge(rxjs.fromEvent(this.ngDocument, 'click'), rxjs.fromEvent(this.ngDocument, 'touchend'))
                    .subscribe(function (event) {
                    /** @type {?} */
                    var clickTarget = /** @type {?} */ (event.target);
                    if (clickTarget !== _this.trigger.el.nativeElement && _this.isOpen) {
                        _this.closeDropdown();
                    }
                });
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.attachOverlay = /**
         * @return {?}
         */
            function () {
                if (!this.overlayRef) {
                    this.portal = new portal.TemplatePortal(this.suggestionsTemp, this.viewContainerRef);
                    this.overlayRef = this.overlay.create(this.getOverlayConfig());
                }
                if (this.overlayRef && !this.overlayRef.hasAttached()) {
                    this.overlayRef.attach(this.portal);
                    this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();
                }
                this.updatePositions();
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.getOverlayConfig = /**
         * @return {?}
         */
            function () {
                return new i2$1.OverlayConfig({
                    positionStrategy: this.getOverlayPosition(),
                    scrollStrategy: this.overlay.scrollStrategies.reposition()
                });
            };
        /**
         * @return {?}
         */
        NzMentionComponent.prototype.getOverlayPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var positions = [
                    new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
                    new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                ];
                this.positionStrategy = this.overlay.position()
                    .flexibleConnectedTo(this.trigger.el)
                    .withPositions(positions)
                    .withFlexibleDimensions(false)
                    .withPush(false);
                return this.positionStrategy;
            };
        NzMentionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-mention',
                        template: "<ng-content></ng-content>\n<ng-template #suggestions>\n  <ul class=\"ant-mention-dropdown\">\n    <li class=\"ant-mention-dropdown-item\"\n        *ngFor=\"let suggestion of filteredSuggestions; let i = index\"\n        [class.focus]=\"i === activeIndex\"\n        (click)=\"selectSuggestion(suggestion)\">\n      <ng-container *ngIf=\"suggestionTemplate else defaultSuggestion\">\n        <ng-container *ngTemplateOutlet=\"suggestionTemplate; context: {$implicit: suggestion}\"></ng-container>\n      </ng-container>\n      <ng-template #defaultSuggestion>{{ nzValueWith(suggestion) }}</ng-template>\n    </li>\n    <li class=\"ant-mention-dropdown-notfound ant-mention-dropdown-item\"\n        *ngIf=\"filteredSuggestions.length === 0\">\n      <span *ngIf=\"nzLoading\"><i nz-icon type=\"loading\"></i></span>\n      <span *ngIf=\"!nzLoading\">{{ nzNotFoundContent }}</span>\n    </li>\n  </ul>\n</ng-template>\n",
                        preserveWhitespaces: false,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    .ant-mention-dropdown {\n      top: 100%;\n      left: 0;\n      position: relative;\n      width: 100%;\n      margin-top: 4px;\n      margin-bottom: 4px;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzMentionComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.ChangeDetectorRef },
                { type: i0.NgZone },
                { type: i2$1.Overlay },
                { type: i0.ViewContainerRef }
            ];
        };
        NzMentionComponent.propDecorators = {
            nzValueWith: [{ type: i0.Input }],
            nzPrefix: [{ type: i0.Input }],
            nzLoading: [{ type: i0.Input }],
            nzNotFoundContent: [{ type: i0.Input }],
            nzPlacement: [{ type: i0.Input }],
            nzSuggestions: [{ type: i0.Input }],
            nzOnSelect: [{ type: i0.Output }],
            nzOnSearchChange: [{ type: i0.Output }],
            trigger: [{ type: i0.ContentChild, args: [NzMentionTriggerDirective,] }],
            suggestionsTemp: [{ type: i0.ViewChild, args: [i0.TemplateRef,] }],
            suggestionChild: [{ type: i0.ContentChild, args: [NzMentionSuggestionDirective, { read: i0.TemplateRef },] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzMentionComponent.prototype, "nzLoading", void 0);
        return NzMentionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var COMPONENTS = [NzMentionComponent, NzMentionTriggerDirective, NzMentionSuggestionDirective];
    var NzMentionModule = /** @class */ (function () {
        function NzMentionModule() {
        }
        NzMentionModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, i2$1.OverlayModule, NzIconModule],
                        declarations: __spread(COMPONENTS),
                        exports: __spread(COMPONENTS)
                    },] }
        ];
        return NzMentionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_MESSAGE_DEFAULT_CONFIG = new i0.InjectionToken('NZ_MESSAGE_DEFAULT_CONFIG');
    /** @type {?} */
    var NZ_MESSAGE_CONFIG = new i0.InjectionToken('NZ_MESSAGE_CONFIG');
    /** @type {?} */
    var NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER = {
        provide: NZ_MESSAGE_DEFAULT_CONFIG,
        useValue: {
            nzDuration: 3000,
            nzAnimate: true,
            nzPauseOnHover: true,
            nzMaxStack: 7
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMessageContainerComponent = /** @class */ (function () {
        function NzMessageContainerComponent(defaultConfig, config) {
            this.messages = [];
            this.config = {};
            this.setConfig(__assign({}, defaultConfig, config));
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NzMessageContainerComponent.prototype.setConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this.config = __assign({}, this.config, config);
            };
        // Create a new message
        /**
         * @param {?} message
         * @return {?}
         */
        NzMessageContainerComponent.prototype.createMessage = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                if (this.messages.length >= this.config.nzMaxStack) {
                    this.messages.splice(0, 1);
                }
                message.options = this._mergeMessageOptions(message.options);
                this.messages.push(message);
            };
        // Remove a message by messageId
        /**
         * @param {?} messageId
         * @return {?}
         */
        NzMessageContainerComponent.prototype.removeMessage = /**
         * @param {?} messageId
         * @return {?}
         */
            function (messageId) {
                var _this = this;
                this.messages.some(function (message, index) {
                    if (message.messageId === messageId) {
                        _this.messages.splice(index, 1);
                        return true;
                    }
                });
            };
        // Remove all messages
        /**
         * @return {?}
         */
        NzMessageContainerComponent.prototype.removeMessageAll = /**
         * @return {?}
         */
            function () {
                this.messages = [];
            };
        // Merge default options and cutom message options
        /**
         * @param {?} options
         * @return {?}
         */
        NzMessageContainerComponent.prototype._mergeMessageOptions = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var defaultOptions = {
                    nzDuration: this.config.nzDuration,
                    nzAnimate: this.config.nzAnimate,
                    nzPauseOnHover: this.config.nzPauseOnHover
                };
                return __assign({}, defaultOptions, options);
            };
        NzMessageContainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-message-container',
                        preserveWhitespaces: false,
                        template: "<div class=\"ant-message\">\n  <nz-message *ngFor=\"let message of messages; let i = index\" [nzMessage]=\"message\" [nzIndex]=\"i\"></nz-message>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzMessageContainerComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NZ_MESSAGE_DEFAULT_CONFIG,] }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NZ_MESSAGE_CONFIG,] }] }
            ];
        };
        return NzMessageContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMessageComponent = /** @class */ (function () {
        function NzMessageComponent(_messageContainer) {
            this._messageContainer = _messageContainer;
            this._eraseTimer = null;
        }
        /**
         * @return {?}
         */
        NzMessageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._options = this.nzMessage.options;
                if (this._options.nzAnimate) {
                    this.nzMessage.state = 'enter';
                }
                this._autoErase = this._options.nzDuration > 0;
                if (this._autoErase) {
                    this._initErase();
                    this._startEraseTimeout();
                }
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._autoErase) {
                    this._clearEraseTimeout();
                }
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype.onEnter = /**
         * @return {?}
         */
            function () {
                if (this._autoErase && this._options.nzPauseOnHover) {
                    this._clearEraseTimeout();
                    this._updateTTL();
                }
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype.onLeave = /**
         * @return {?}
         */
            function () {
                if (this._autoErase && this._options.nzPauseOnHover) {
                    this._startEraseTimeout();
                }
            };
        // Remove self
        /**
         * @return {?}
         */
        NzMessageComponent.prototype._destroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this._options.nzAnimate) {
                    this.nzMessage.state = 'leave';
                    setTimeout(function () { return _this._messageContainer.removeMessage(_this.nzMessage.messageId); }, 200);
                }
                else {
                    this._messageContainer.removeMessage(this.nzMessage.messageId);
                }
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype._initErase = /**
         * @return {?}
         */
            function () {
                this._eraseTTL = this._options.nzDuration;
                this._eraseTimingStart = Date.now();
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype._updateTTL = /**
         * @return {?}
         */
            function () {
                if (this._autoErase) {
                    this._eraseTTL -= Date.now() - this._eraseTimingStart;
                }
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype._startEraseTimeout = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this._eraseTTL > 0) {
                    this._clearEraseTimeout(); // To prevent calling _startEraseTimeout() more times to create more timer
                    this._eraseTimer = window.setTimeout(function () { return _this._destroy(); }, this._eraseTTL);
                    this._eraseTimingStart = Date.now();
                }
                else {
                    this._destroy();
                }
            };
        /**
         * @return {?}
         */
        NzMessageComponent.prototype._clearEraseTimeout = /**
         * @return {?}
         */
            function () {
                if (this._eraseTimer !== null) {
                    window.clearTimeout(this._eraseTimer);
                    this._eraseTimer = null;
                }
            };
        NzMessageComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-message',
                        preserveWhitespaces: false,
                        animations: [
                            animations.trigger('enterLeave', [
                                animations.state('enter', animations.style({ opacity: 1, transform: 'translateY(0)' })),
                                animations.transition('* => enter', [
                                    animations.style({ opacity: 0, transform: 'translateY(-50%)' }),
                                    animations.animate('100ms linear')
                                ]),
                                animations.state('leave', animations.style({ opacity: 0, transform: 'translateY(-50%)' })),
                                animations.transition('* => leave', [
                                    animations.style({ opacity: 1, transform: 'translateY(0)' }),
                                    animations.animate('100ms linear')
                                ])
                            ])
                        ],
                        template: "<div class=\"ant-message-notice\"\n  [@enterLeave]=\"nzMessage.state\"\n  (mouseenter)=\"onEnter()\"\n  (mouseleave)=\"onLeave()\">\n  <div class=\"ant-message-notice-content\">\n    <div class=\"ant-message-custom-content\" [ngClass]=\"'ant-message-' + nzMessage.type\">\n      <ng-container [ngSwitch]=\"nzMessage.type\">\n        <i *ngSwitchCase=\"'success'\" nz-icon type=\"check-circle\"></i>\n        <i *ngSwitchCase=\"'info'\"  nz-icon type=\"info-circle\"></i>\n        <i *ngSwitchCase=\"'warning'\" nz-icon type=\"exclamation-circle\"></i>\n        <i *ngSwitchCase=\"'error'\" nz-icon type=\"close-circle\"></i>\n        <i *ngSwitchCase=\"'loading'\" nz-icon type=\"loading\"></i>\n      </ng-container>\n      <span [innerHTML]=\"nzMessage.content\"></span>\n    </div>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzMessageComponent.ctorParameters = function () {
            return [
                { type: NzMessageContainerComponent }
            ];
        };
        NzMessageComponent.propDecorators = {
            nzMessage: [{ type: i0.Input }],
            nzIndex: [{ type: i0.Input }]
        };
        return NzMessageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var globalCounter = 0;
    // unsupported: template constraints.
    // unsupported: template constraints.
    /**
     * @template ContainerClass, MessageData, MessageConfig
     */
    var  
    // unsupported: template constraints.
    // unsupported: template constraints.
    /**
     * @template ContainerClass, MessageData, MessageConfig
     */
    NzMessageBaseService$$1 = /** @class */ (function () {
        function NzMessageBaseService$$1(overlay, containerClass, injector, cfr, appRef, _idPrefix) {
            if (_idPrefix === void 0) {
                _idPrefix = '';
            }
            this.overlay = overlay;
            this.containerClass = containerClass;
            this.injector = injector;
            this.cfr = cfr;
            this.appRef = appRef;
            this._idPrefix = _idPrefix;
            // this._container = overlay.create().attach(new ComponentPortal(containerClass)).instance;
            this._container = this.createContainer();
        }
        /**
         * @param {?=} messageId
         * @return {?}
         */
        NzMessageBaseService$$1.prototype.remove = /**
         * @param {?=} messageId
         * @return {?}
         */
            function (messageId) {
                if (messageId) {
                    this._container.removeMessage(messageId);
                }
                else {
                    this._container.removeMessageAll();
                }
            };
        /**
         * @param {?} message
         * @param {?=} options
         * @return {?}
         */
        NzMessageBaseService$$1.prototype.createMessage = /**
         * @param {?} message
         * @param {?=} options
         * @return {?}
         */
            function (message, options) {
                /** @type {?} */
                var resultMessage = __assign({}, ( /** @type {?} */(message)), {
                    messageId: this._generateMessageId(),
                    options: options,
                    createdAt: new Date()
                });
                this._container.createMessage(resultMessage);
                return resultMessage;
            };
        /**
         * @param {?} config
         * @return {?}
         */
        NzMessageBaseService$$1.prototype.config = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this._container.setConfig(config);
            };
        /**
         * @return {?}
         */
        NzMessageBaseService$$1.prototype._generateMessageId = /**
         * @return {?}
         */
            function () {
                return this._idPrefix + globalCounter++;
            };
        /**
         * @return {?}
         */
        NzMessageBaseService$$1.prototype.createContainer = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var factory = this.cfr.resolveComponentFactory(this.containerClass);
                /** @type {?} */
                var componentRef = factory.create(this.injector); // Use root injector
                componentRef.changeDetectorRef.detectChanges(); // Immediately change detection to avoid multi-checking error
                this.appRef.attachView(componentRef.hostView);
                /** @type {?} */
                var overlayPane = this.overlay.create().overlayElement;
                overlayPane.style.zIndex = '1010'; // Patching: assign the same zIndex of ant-message to it's parent overlay panel, to the ant-message's zindex work.
                overlayPane.appendChild(/** @type {?} */ (( /** @type {?} */(componentRef.hostView)).rootNodes[0]));
                return componentRef.instance;
            };
        return NzMessageBaseService$$1;
    }());
    var NzMessageService$$1 = /** @class */ (function (_super) {
        __extends(NzMessageService$$1, _super);
        function NzMessageService$$1(overlay, injector, cfr, appRef) {
            return _super.call(this, overlay, NzMessageContainerComponent, injector, cfr, appRef, 'message-') || this;
        }
        // Shortcut methods
        /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzMessageService$$1.prototype.success = /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (content, options) {
                return this.createMessage({ type: 'success', content: content }, options);
            };
        /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzMessageService$$1.prototype.error = /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (content, options) {
                return this.createMessage({ type: 'error', content: content }, options);
            };
        /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzMessageService$$1.prototype.info = /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (content, options) {
                return this.createMessage({ type: 'info', content: content }, options);
            };
        /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzMessageService$$1.prototype.warning = /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (content, options) {
                return this.createMessage({ type: 'warning', content: content }, options);
            };
        /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzMessageService$$1.prototype.loading = /**
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (content, options) {
                return this.createMessage({ type: 'loading', content: content }, options);
            };
        /**
         * @param {?} type
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzMessageService$$1.prototype.create = /**
         * @param {?} type
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (type, content, options) {
                return this.createMessage({ type: type, content: content }, options);
            };
        NzMessageService$$1.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NzMessageService$$1.ctorParameters = function () {
            return [
                { type: i2$1.Overlay },
                { type: i0.Injector },
                { type: i0.ComponentFactoryResolver },
                { type: i0.ApplicationRef }
            ];
        };
        /** @nocollapse */ NzMessageService$$1.ngInjectableDef = i0.defineInjectable({ factory: function NzMessageService_Factory() { return new NzMessageService$$1(i0.inject(i2$1.Overlay), i0.inject(i0.INJECTOR), i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef)); }, token: NzMessageService$$1, providedIn: "root" });
        return NzMessageService$$1;
    }(NzMessageBaseService$$1));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzMessageModule = /** @class */ (function () {
        function NzMessageModule() {
        }
        NzMessageModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, i2$1.OverlayModule, NzIconModule],
                        declarations: [NzMessageContainerComponent, NzMessageComponent],
                        providers: [NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER, NzMessageService$$1],
                        entryComponents: [NzMessageContainerComponent]
                    },] }
        ];
        return NzMessageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CssUnitPipe = /** @class */ (function () {
        function CssUnitPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} defaultUnit
         * @return {?}
         */
        CssUnitPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} defaultUnit
         * @return {?}
         */
            function (value, defaultUnit) {
                if (defaultUnit === void 0) {
                    defaultUnit = 'px';
                }
                /** @type {?} */
                var formatted = +value; // force convert
                return isNaN(formatted) ? "" + value : "" + formatted + defaultUnit;
            };
        CssUnitPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'toCssUnit'
                    },] }
        ];
        return CssUnitPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzModalControlService = /** @class */ (function () {
        function NzModalControlService(parentService) {
            this.parentService = parentService;
            this.rootOpenModals = this.parentService ? null : [];
            this.rootAfterAllClose = this.parentService ? null : new rxjs.Subject();
            this.rootRegisteredMetaMap = this.parentService ? null : new Map();
        }
        Object.defineProperty(NzModalControlService.prototype, "afterAllClose", {
            // Track singleton afterAllClose through over the injection tree
            get: /**
             * @return {?}
             */ function () {
                return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalControlService.prototype, "openModals", {
            // Track singleton openModals array through over the injection tree
            get: /**
             * @return {?}
             */ function () {
                return this.parentService ? this.parentService.openModals : this.rootOpenModals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalControlService.prototype, "registeredMetaMap", {
            get: /**
             * @return {?}
             */ function () {
                // Registered modal for later usage
                return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;
            },
            enumerable: true,
            configurable: true
        });
        // Register a modal to listen its open/close
        /**
         * @param {?} modalRef
         * @return {?}
         */
        NzModalControlService.prototype.registerModal = /**
         * @param {?} modalRef
         * @return {?}
         */
            function (modalRef) {
                var _this = this;
                if (!this.hasRegistered(modalRef)) {
                    /** @type {?} */
                    var afterOpenSubscription = modalRef.afterOpen.subscribe(function () { return _this.openModals.push(modalRef); });
                    /** @type {?} */
                    var afterCloseSubscription = modalRef.afterClose.subscribe(function () { return _this.removeOpenModal(modalRef); });
                    this.registeredMetaMap.set(modalRef, { modalRef: modalRef, afterOpenSubscription: afterOpenSubscription, afterCloseSubscription: afterCloseSubscription });
                }
            };
        // deregister modals
        /**
         * @param {?} modalRef
         * @return {?}
         */
        NzModalControlService.prototype.deregisterModal = /**
         * @param {?} modalRef
         * @return {?}
         */
            function (modalRef) {
                /** @type {?} */
                var registeredMeta = this.registeredMetaMap.get(modalRef);
                if (registeredMeta) {
                    // Remove this modal if it is still in the opened modal list (NOTE: it may trigger "afterAllClose")
                    this.removeOpenModal(registeredMeta.modalRef);
                    registeredMeta.afterOpenSubscription.unsubscribe();
                    registeredMeta.afterCloseSubscription.unsubscribe();
                    this.registeredMetaMap.delete(modalRef);
                }
            };
        /**
         * @param {?} modalRef
         * @return {?}
         */
        NzModalControlService.prototype.hasRegistered = /**
         * @param {?} modalRef
         * @return {?}
         */
            function (modalRef) {
                return this.registeredMetaMap.has(modalRef);
            };
        // Close all registered opened modals
        /**
         * @return {?}
         */
        NzModalControlService.prototype.closeAll = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var i = this.openModals.length;
                while (i--) {
                    this.openModals[i].close();
                }
            };
        /**
         * @param {?} modalRef
         * @return {?}
         */
        NzModalControlService.prototype.removeOpenModal = /**
         * @param {?} modalRef
         * @return {?}
         */
            function (modalRef) {
                /** @type {?} */
                var index = this.openModals.indexOf(modalRef);
                if (index > -1) {
                    this.openModals.splice(index, 1);
                    if (!this.openModals.length) {
                        this.afterAllClose.next();
                    }
                }
            };
        NzModalControlService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        NzModalControlService.ctorParameters = function () {
            return [
                { type: NzModalControlService, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return NzModalControlService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ModalUtil = /** @class */ (function () {
        function ModalUtil(document) {
            this.document = document;
            this.lastPosition = null;
            this.listenDocumentClick();
        }
        /**
         * @return {?}
         */
        ModalUtil.prototype.getLastClickPosition = /**
         * @return {?}
         */
            function () {
                return this.lastPosition;
            };
        /**
         * @return {?}
         */
        ModalUtil.prototype.listenDocumentClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.document.addEventListener('click', function (event) {
                    _this.lastPosition = { x: event.clientX, y: event.clientY };
                });
            };
        return ModalUtil;
    }());
    var ModalUtil$1 = new ModalUtil(document);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_MODAL_DEFAULT_CONFIG = {
        autoBodyPadding: true
    };
    /** @type {?} */
    var NZ_MODAL_CONFIG = new i0.InjectionToken('NzModalConfig', {
        providedIn: 'root',
        factory: function () { return NZ_MODAL_DEFAULT_CONFIG; } // Default config
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * API class that public to users to handle the modal instance.
     * NzModalRef is aim to avoid accessing to the modal instance directly by users.
     * @abstract
     * @template T, R
     */
    var /**
     * API class that public to users to handle the modal instance.
     * NzModalRef is aim to avoid accessing to the modal instance directly by users.
     * @abstract
     * @template T, R
     */ NzModalRef = /** @class */ (function () {
        function NzModalRef() {
        }
        return NzModalRef;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var MODAL_ANIMATE_DURATION = 200; // Duration when perform animations (ms)
    /**
     * @template T, R
     */
    var NzModalComponent = /** @class */ (function (_super) {
        __extends(NzModalComponent, _super);
        function NzModalComponent(overlay, i18n, renderer, cfr, elementRef, viewContainer, nzMeasureScrollbarService, modalControl, focusTrapFactory, config, document) {
            // tslint:disable-line:no-any
            var _this = _super.call(this) || this;
            _this.overlay = overlay;
            _this.i18n = i18n;
            _this.renderer = renderer;
            _this.cfr = cfr;
            _this.elementRef = elementRef;
            _this.viewContainer = viewContainer;
            _this.nzMeasureScrollbarService = nzMeasureScrollbarService;
            _this.modalControl = modalControl;
            _this.focusTrapFactory = focusTrapFactory;
            _this.config = config;
            _this.document = document;
            _this.unsubscribe$ = new rxjs.Subject();
            // tslint:disable-next-line:no-any
            _this.locale = {};
            _this.nzModalType = 'default';
            _this.nzGetContainer = function () { return _this.overlay.create(); }; // [STATIC]
            _this.nzVisible = false;
            _this.nzVisibleChange = new i0.EventEmitter();
            _this.nzZIndex = 1000;
            _this.nzWidth = 520;
            _this.nzIconType = 'question-circle'; // Confirm Modal ONLY
            _this.nzClosable = true;
            _this.nzMask = true;
            _this.nzMaskClosable = true;
            _this.nzAfterOpen = new i0.EventEmitter(); // Trigger when modal open(visible) after animations
            _this.nzAfterClose = new i0.EventEmitter();
            _this.nzOkType = 'primary';
            _this.nzOkLoading = false;
            _this.nzOnOk = new i0.EventEmitter();
            _this.nzCancelLoading = false;
            _this.nzOnCancel = new i0.EventEmitter();
            _this.nzKeyboard = true;
            _this.transformOrigin = '0px 0px 0px';
            _this.config = _this.mergeDefaultConfig(_this.config);
            return _this;
        }
        Object.defineProperty(NzModalComponent.prototype, "afterOpen", {
            get: /**
             * @return {?}
             */ function () {
                // Observable alias for nzAfterOpen
                return this.nzAfterOpen.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalComponent.prototype, "afterClose", {
            get: /**
             * @return {?}
             */ function () {
                // Observable alias for nzAfterClose
                return this.nzAfterClose.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalComponent.prototype, "okText", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzOkText || this.locale.okText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalComponent.prototype, "cancelText", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzCancelText || this.locale.cancelText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalComponent.prototype, "hidden", {
            get: /**
             * @return {?}
             */ function () {
                return !this.nzVisible && !this.animationState;
            } // Indicate whether this dialog should hidden
            // Indicate whether this dialog should hidden
            ,
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18n.localeChange.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Modal'); });
                rxjs.fromEvent(this.document.body, 'keydown').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (e) { return _this.keydownListener(e); });
                if (this.isComponent(this.nzContent)) {
                    this.createDynamicComponent(/** @type {?} */ (this.nzContent)); // Create component along without View
                }
                if (this.isModalButtons(this.nzFooter)) { // Setup default button options
                    // Setup default button options
                    this.nzFooter = this.formatModalButtons(/** @type {?} */ (this.nzFooter));
                }
                // Place the modal dom to elsewhere
                this.container = typeof this.nzGetContainer === 'function' ? this.nzGetContainer() : this.nzGetContainer;
                if (this.container instanceof HTMLElement) {
                    this.container.appendChild(this.elementRef.nativeElement);
                }
                else if (this.container instanceof i2$1.OverlayRef) { // NOTE: only attach the dom to overlay, the view container is not changed actually
                    // NOTE: only attach the dom to overlay, the view container is not changed actually
                    this.container.overlayElement.appendChild(this.elementRef.nativeElement);
                }
                // Register modal when afterOpen/afterClose is stable
                this.modalControl.registerModal(this);
            };
        // [NOTE] NOT available when using by service!
        // Because ngOnChanges never be called when using by service,
        // here we can't support "nzContent"(Component) etc. as inputs that initialized dynamically.
        // BUT: User also can change "nzContent" dynamically to trigger UI changes (provided you don't use Component that needs initializations)
        /**
         * @param {?} changes
         * @return {?}
         */
        NzModalComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzVisible"]) {
                    this.handleVisibleStateChange(this.nzVisible, !changes["nzVisible"].firstChange); // Do not trigger animation while initializing
                }
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // If using Component, it is the time to attach View while bodyContainer is ready
                if (this.contentComponentRef) {
                    this.bodyContainer.insert(this.contentComponentRef.hostView);
                }
                if (this.autoFocusButtonOk) {
                    ( /** @type {?} */(this.autoFocusButtonOk.nativeElement)).focus();
                }
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Close self before destructing
                this.changeVisibleFromInside(false).then(function () {
                    _this.modalControl.deregisterModal(_this);
                    if (_this.container instanceof i2$1.OverlayRef) {
                        _this.container.dispose();
                    }
                    _this.unsubscribe$.next();
                    _this.unsubscribe$.complete();
                });
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzModalComponent.prototype.keydownListener = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.keyCode === keycodes.ESCAPE && this.nzKeyboard) {
                    this.onClickOkCancel('cancel');
                }
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.changeVisibleFromInside(true);
            };
        /**
         * @param {?=} result
         * @return {?}
         */
        NzModalComponent.prototype.close = /**
         * @param {?=} result
         * @return {?}
         */
            function (result) {
                this.changeVisibleFromInside(false, result);
            };
        /**
         * @param {?=} result
         * @return {?}
         */
        NzModalComponent.prototype.destroy = /**
         * @param {?=} result
         * @return {?}
         */
            function (result) {
                // Destroy equals Close
                this.close(result);
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.triggerOk = /**
         * @return {?}
         */
            function () {
                this.onClickOkCancel('ok');
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.triggerCancel = /**
         * @return {?}
         */
            function () {
                this.onClickOkCancel('cancel');
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.getInstance = /**
         * @return {?}
         */
            function () {
                return this;
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.getContentComponentRef = /**
         * @return {?}
         */
            function () {
                return this.contentComponentRef;
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.getContentComponent = /**
         * @return {?}
         */
            function () {
                return this.contentComponentRef && this.contentComponentRef.instance;
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.getElement = /**
         * @return {?}
         */
            function () {
                return this.elementRef && this.elementRef.nativeElement;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzModalComponent.prototype.onClickMask = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.nzMask &&
                    this.nzMaskClosable &&
                    ( /** @type {?} */($event.target)).classList.contains('ant-modal-wrap') &&
                    this.nzVisible) {
                    this.onClickOkCancel('cancel');
                }
            };
        /**
         * @param {?} type
         * @return {?}
         */
        NzModalComponent.prototype.isModalType = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                return this.nzModalType === type;
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.onClickCloseBtn = /**
         * @return {?}
         */
            function () {
                if (this.nzVisible) {
                    this.onClickOkCancel('cancel');
                }
            };
        /**
         * @param {?} type
         * @return {?}
         */
        NzModalComponent.prototype.onClickOkCancel = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                var _this = this;
                /** @type {?} */
                var trigger = { 'ok': this.nzOnOk, 'cancel': this.nzOnCancel }[type];
                /** @type {?} */
                var loadingKey = { 'ok': 'nzOkLoading', 'cancel': 'nzCancelLoading' }[type];
                if (trigger instanceof i0.EventEmitter) {
                    trigger.emit(this.getContentComponent());
                }
                else if (typeof trigger === 'function') {
                    /** @type {?} */
                    var result = trigger(this.getContentComponent());
                    /** @type {?} */
                    var caseClose_1 = function (doClose) { return (doClose !== false) && _this.close(/** @type {?} */ (doClose)); }; // Users can return "false" to prevent closing by default
                    if (isPromise(result)) {
                        this[loadingKey] = true;
                        /** @type {?} */
                        var handleThen = function (doClose) {
                            _this[loadingKey] = false;
                            caseClose_1(doClose);
                        };
                        ( /** @type {?} */(result)).then(handleThen).catch(handleThen);
                    }
                    else {
                        caseClose_1(result);
                    }
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzModalComponent.prototype.isNonEmptyString = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return typeof value === 'string' && value !== '';
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzModalComponent.prototype.isTemplateRef = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value instanceof i0.TemplateRef;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzModalComponent.prototype.isComponent = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value instanceof i0.Type;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzModalComponent.prototype.isModalButtons = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Array.isArray(value) && value.length > 0;
            };
        /**
         * @param {?} visible
         * @param {?=} animation
         * @param {?=} closeResult
         * @return {?}
         */
        NzModalComponent.prototype.handleVisibleStateChange = /**
         * @param {?} visible
         * @param {?=} animation
         * @param {?=} closeResult
         * @return {?}
         */
            function (visible, animation, closeResult) {
                var _this = this;
                if (animation === void 0) {
                    animation = true;
                }
                if (visible) { // Hide scrollbar at the first time when shown up
                    // Hide scrollbar at the first time when shown up
                    this.changeBodyOverflow(1);
                    this.savePreviouslyFocusedElement();
                    this.trapFocus();
                }
                return Promise
                    .resolve(animation && this.animateTo(visible))
                    .then(function () {
                    // Emit open/close event after animations over
                    if (visible) {
                        _this.nzAfterOpen.emit();
                    }
                    else {
                        _this.nzAfterClose.emit(closeResult);
                        _this.restoreFocus();
                        _this.changeBodyOverflow(); // Show/hide scrollbar when animation is over
                    }
                });
                // .then(() => this.changeBodyOverflow());
            };
        /**
         * @param {?} options
         * @param {?} prop
         * @return {?}
         */
        NzModalComponent.prototype.getButtonCallableProp = /**
         * @param {?} options
         * @param {?} prop
         * @return {?}
         */
            function (options, prop) {
                /** @type {?} */
                var value = options[prop];
                /** @type {?} */
                var args = [];
                if (this.contentComponentRef) {
                    args.push(this.contentComponentRef.instance);
                }
                return typeof value === 'function' ? value.apply(options, args) : value;
            };
        /**
         * @param {?} button
         * @return {?}
         */
        NzModalComponent.prototype.onButtonClick = /**
         * @param {?} button
         * @return {?}
         */
            function (button) {
                /** @type {?} */
                var result = this.getButtonCallableProp(button, 'onClick'); // Call onClick directly
                if (isPromise(result)) {
                    button.loading = true;
                    ( /** @type {?} */(result)).then(function () { return button.loading = false; }).catch(function () { return button.loading = false; });
                }
            };
        /**
         * @param {?} visible
         * @param {?=} closeResult
         * @return {?}
         */
        NzModalComponent.prototype.changeVisibleFromInside = /**
         * @param {?} visible
         * @param {?=} closeResult
         * @return {?}
         */
            function (visible, closeResult) {
                if (this.nzVisible !== visible) {
                    // Change nzVisible value immediately
                    this.nzVisible = visible;
                    this.nzVisibleChange.emit(visible);
                    return this.handleVisibleStateChange(visible, true, closeResult);
                }
                return Promise.resolve();
            };
        /**
         * @param {?} state
         * @return {?}
         */
        NzModalComponent.prototype.changeAnimationState = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                var _a, _b;
                this.animationState = state;
                if (state) {
                    this.maskAnimationClassMap = (_a = {},
                        _a["fade-" + state] = true,
                        _a["fade-" + state + "-active"] = true,
                        _a);
                    this.modalAnimationClassMap = (_b = {},
                        _b["zoom-" + state] = true,
                        _b["zoom-" + state + "-active"] = true,
                        _b);
                }
                else {
                    this.maskAnimationClassMap = this.modalAnimationClassMap = null;
                }
            };
        /**
         * @param {?} isVisible
         * @return {?}
         */
        NzModalComponent.prototype.animateTo = /**
         * @param {?} isVisible
         * @return {?}
         */
            function (isVisible) {
                var _this = this;
                if (isVisible) { // Figure out the lastest click position when shows up
                    // Figure out the lastest click position when shows up
                    window.setTimeout(function () { return _this.updateTransformOrigin(); }); // [NOTE] Using timeout due to the document.click event is fired later than visible change, so if not postponed to next event-loop, we can't get the lastest click position
                }
                this.changeAnimationState(isVisible ? 'enter' : 'leave');
                return new Promise(function (resolve) {
                    return window.setTimeout(function () {
                        // Return when animation is over
                        _this.changeAnimationState(null);
                        resolve();
                    }, MODAL_ANIMATE_DURATION);
                });
            };
        /**
         * @param {?} buttons
         * @return {?}
         */
        NzModalComponent.prototype.formatModalButtons = /**
         * @param {?} buttons
         * @return {?}
         */
            function (buttons) {
                return buttons.map(function (button) {
                    /** @type {?} */
                    var mixedButton = __assign({
                        type: 'default',
                        size: 'default',
                        autoLoading: true,
                        show: true,
                        loading: false,
                        disabled: false
                    }, button);
                    // if (mixedButton.autoLoading) { mixedButton.loading = false; } // Force loading to false when autoLoading=true
                    return mixedButton;
                });
            };
        /**
         * Create a component dynamically but not attach to any View (this action will be executed when bodyContainer is ready)
         * @param {?} component Component class
         * @return {?}
         */
        NzModalComponent.prototype.createDynamicComponent = /**
         * Create a component dynamically but not attach to any View (this action will be executed when bodyContainer is ready)
         * @param {?} component Component class
         * @return {?}
         */
            function (component) {
                /** @type {?} */
                var factory = this.cfr.resolveComponentFactory(component);
                /** @type {?} */
                var childInjector = i0.Injector.create({
                    providers: [{ provide: NzModalRef, useValue: this }],
                    parent: this.viewContainer.parentInjector
                });
                this.contentComponentRef = factory.create(childInjector);
                if (this.nzComponentParams) {
                    Object.assign(this.contentComponentRef.instance, this.nzComponentParams);
                }
                // Do the first change detection immediately (or we do detection at ngAfterViewInit, multi-changes error will be thrown)
                this.contentComponentRef.changeDetectorRef.detectChanges();
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.updateTransformOrigin = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var modalElement = /** @type {?} */ (this.modalContainer.nativeElement);
                /** @type {?} */
                var lastPosition = ModalUtil$1.getLastClickPosition();
                if (lastPosition) {
                    this.transformOrigin = lastPosition.x - modalElement.offsetLeft + "px " + (lastPosition.y - modalElement.offsetTop) + "px 0px";
                }
                // else {
                //   this.transformOrigin = '0px 0px 0px';
                // }
            };
        /**
         * Take care of the body's overflow to decide the existense of scrollbar
         * @param {?=} plusNum The number that the openModals.length will increase soon
         * @return {?}
         */
        NzModalComponent.prototype.changeBodyOverflow = /**
         * Take care of the body's overflow to decide the existense of scrollbar
         * @param {?=} plusNum The number that the openModals.length will increase soon
         * @return {?}
         */
            function (plusNum) {
                if (plusNum === void 0) {
                    plusNum = 0;
                }
                if (this.config.autoBodyPadding) {
                    /** @type {?} */
                    var openModals = this.modalControl.openModals;
                    if (openModals.length + plusNum > 0) {
                        if (this.hasBodyScrollBar()) { // Adding padding-right only when body's scrollbar is able to shown up
                            // Adding padding-right only when body's scrollbar is able to shown up
                            this.renderer.setStyle(this.document.body, 'padding-right', this.nzMeasureScrollbarService.scrollBarWidth + "px");
                            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');
                        }
                    }
                    else { // NOTE: we need to always remove the padding due to the scroll bar may be disappear by window resizing before modal closed
                        // NOTE: we need to always remove the padding due to the scroll bar may be disappear by window resizing before modal closed
                        this.renderer.removeStyle(this.document.body, 'padding-right');
                        this.renderer.removeStyle(this.document.body, 'overflow');
                    }
                }
            };
        /**
         * Check whether the body element is able to has the scroll bar (if the body content height exceeds the window's height)
         * Exceptional Cases: users can show the scroll bar by their own permanently (eg. overflow: scroll)
         * @return {?}
         */
        NzModalComponent.prototype.hasBodyScrollBar = /**
         * Check whether the body element is able to has the scroll bar (if the body content height exceeds the window's height)
         * Exceptional Cases: users can show the scroll bar by their own permanently (eg. overflow: scroll)
         * @return {?}
         */
            function () {
                return this.document.body.scrollHeight > (window.innerHeight || this.document.documentElement.clientHeight);
            };
        /**
         * @param {?} config
         * @return {?}
         */
        NzModalComponent.prototype.mergeDefaultConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return __assign({}, NZ_MODAL_DEFAULT_CONFIG, config);
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.savePreviouslyFocusedElement = /**
         * @return {?}
         */
            function () {
                if (this.document) {
                    this.previouslyFocusedElement = /** @type {?} */ (this.document.activeElement);
                    this.previouslyFocusedElement.blur();
                }
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.trapFocus = /**
         * @return {?}
         */
            function () {
                if (!this.focusTrap) {
                    this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
                }
                this.focusTrap.focusInitialElementWhenReady();
            };
        /**
         * @return {?}
         */
        NzModalComponent.prototype.restoreFocus = /**
         * @return {?}
         */
            function () {
                if (this.previouslyFocusedElement) {
                    this.previouslyFocusedElement.focus();
                }
                if (this.focusTrap) {
                    this.focusTrap.destroy();
                }
            };
        NzModalComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-modal',
                        template: "<ng-template #tplOriginContent><ng-content></ng-content></ng-template> <!-- Compatible: the <ng-content> can appear only once -->\n\n<div>\n  <div *ngIf=\"nzMask\"\n    class=\"ant-modal-mask\"\n    [ngClass]=\"maskAnimationClassMap\"\n    [class.ant-modal-mask-hidden]=\"hidden\"\n    [ngStyle]=\"nzMaskStyle\"\n    [style.zIndex]=\"nzZIndex\"\n  ></div>\n  <div\n    (click)=\"onClickMask($event)\"\n    class=\"ant-modal-wrap {{ nzWrapClassName }}\"\n    [style.zIndex]=\"nzZIndex\"\n    [style.display]=\"hidden ? 'none' : ''\"\n    tabindex=\"-1\"\n    role=\"dialog\"\n  >\n    <div #modalContainer\n      class=\"ant-modal {{ nzClassName }}\"\n      [ngClass]=\"modalAnimationClassMap\"\n      [ngStyle]=\"nzStyle\"\n      [style.width]=\"nzWidth | toCssUnit\"\n      [style.transform-origin]=\"transformOrigin\"\n      role=\"document\"\n    >\n      <div class=\"ant-modal-content\">\n        <button *ngIf=\"nzClosable\" (click)=\"onClickCloseBtn()\" class=\"ant-modal-close\" aria-label=\"Close\">\n          <span class=\"ant-modal-close-x\">\n            <i nz-icon type=\"close\" class=\"ant-modal-close-icon\"></i>\n          </span>\n        </button>\n        <ng-container [ngSwitch]=\"true\">\n          <ng-container *ngSwitchCase=\"isModalType('default')\" [ngTemplateOutlet]=\"tplContentDefault\"></ng-container>\n          <ng-container *ngSwitchCase=\"isModalType('confirm')\" [ngTemplateOutlet]=\"tplContentConfirm\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <div tabindex=\"0\" style=\"width: 0px; height: 0px; overflow: hidden;\">sentinel</div>\n  </div>\n</div>\n\n<!-- [Predefined] Default Modal Content -->\n<ng-template #tplContentDefault>\n  <div *ngIf=\"nzTitle\" class=\"ant-modal-header\">\n    <div class=\"ant-modal-title\">\n      <ng-container [ngSwitch]=\"true\">\n        <ng-container *ngSwitchCase=\"isTemplateRef(nzTitle)\" [ngTemplateOutlet]=\"nzTitle\"></ng-container>\n        <ng-container *ngSwitchCase=\"isNonEmptyString(nzTitle)\"><div [innerHTML]=\"nzTitle\"></div></ng-container>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"ant-modal-body\" [ngStyle]=\"nzBodyStyle\">\n    <ng-container #bodyContainer>\n      <ng-container *ngIf=\"!isComponent(nzContent)\" [ngSwitch]=\"true\">\n        <ng-container *ngSwitchCase=\"isTemplateRef(nzContent)\" [ngTemplateOutlet]=\"nzContent\"></ng-container>\n        <ng-container *ngSwitchCase=\"isNonEmptyString(nzContent)\"><div [innerHTML]=\"nzContent\"></div></ng-container>\n        <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"tplOriginContent\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n  <div *ngIf=\"nzFooter !== null\" class=\"ant-modal-footer\">\n    <ng-container [ngSwitch]=\"true\">\n      <ng-container *ngSwitchCase=\"isTemplateRef(nzFooter)\" [ngTemplateOutlet]=\"nzFooter\"></ng-container>\n      <ng-container *ngSwitchCase=\"isNonEmptyString(nzFooter)\"><div [innerHTML]=\"nzFooter\"></div></ng-container>\n      <ng-container *ngSwitchCase=\"isModalButtons(nzFooter)\">\n        <button *ngFor=\"let button of nzFooter\" nz-button\n          (click)=\"onButtonClick(button)\"\n          [hidden]=\"!getButtonCallableProp(button, 'show')\"\n          [nzLoading]=\"getButtonCallableProp(button, 'loading')\"\n          [disabled]=\"getButtonCallableProp(button, 'disabled')\"\n          [nzType]=\"button.type\"\n          [nzShape]=\"button.shape\"\n          [nzSize]=\"button.size\"\n          [nzGhost]=\"button.ghost\"\n        >{{ button.label }}</button>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <button *ngIf=\"nzCancelText!==null\" nz-button (click)=\"onClickOkCancel('cancel')\" [nzLoading]=\"nzCancelLoading\">\n          {{ cancelText }}\n        </button>\n        <button *ngIf=\"nzOkText!==null\" nz-button [nzType]=\"nzOkType\" (click)=\"onClickOkCancel('ok')\" [nzLoading]=\"nzOkLoading\">\n          {{ okText }}\n        </button>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n<!-- /[Predefined] Default Modal Content -->\n\n<!-- [Predefined] Confirm Modal Content -->\n<ng-template #tplContentConfirm>\n  <div class=\"ant-modal-body\" [ngStyle]=\"nzBodyStyle\">\n    <div class=\"ant-modal-confirm-body-wrapper\">\n      <div class=\"ant-modal-confirm-body\">\n        <i nz-icon [type]=\"nzIconType\"></i>\n        <span class=\"ant-modal-confirm-title\">\n          <ng-container [ngSwitch]=\"true\">\n            <ng-container *ngSwitchCase=\"isTemplateRef(nzTitle)\" [ngTemplateOutlet]=\"nzTitle\"></ng-container>\n            <ng-container *ngSwitchCase=\"isNonEmptyString(nzTitle)\"><span [innerHTML]=\"nzTitle\"></span></ng-container>\n          </ng-container>\n        </span>\n        <div class=\"ant-modal-confirm-content\">\n          <ng-container #bodyContainer>\n            <ng-container *ngIf=\"!isComponent(nzContent)\" [ngSwitch]=\"true\">\n              <ng-container *ngSwitchCase=\"isTemplateRef(nzContent)\" [ngTemplateOutlet]=\"nzContent\"></ng-container>\n              <ng-container *ngSwitchCase=\"isNonEmptyString(nzContent)\"><div [innerHTML]=\"nzContent\"></div></ng-container>\n              <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"tplOriginContent\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </div>\n      </div>\n      <div class=\"ant-modal-confirm-btns\">\n        <button nz-button *ngIf=\"nzCancelText!==null\" (click)=\"onClickOkCancel('cancel')\" [nzLoading]=\"nzCancelLoading\">\n          {{ cancelText }}\n        </button>\n        <button *ngIf=\"nzOkText!==null\" #autoFocusButtonOk nz-button [nzType]=\"nzOkType\" (click)=\"onClickOkCancel('ok')\" [nzLoading]=\"nzOkLoading\">\n          {{ okText }}\n        </button>\n      </div>\n    </div> <!-- /.ant-modal-confirm-body-wrapper -->\n  </div>\n</ng-template>\n<!-- /[Predefined] Confirm Modal Content -->\n"
                    }] }
        ];
        /** @nocollapse */
        NzModalComponent.ctorParameters = function () {
            return [
                { type: i2$1.Overlay },
                { type: NzI18nService },
                { type: i0.Renderer2 },
                { type: i0.ComponentFactoryResolver },
                { type: i0.ElementRef },
                { type: i0.ViewContainerRef },
                { type: NzMeasureScrollbarService },
                { type: NzModalControlService },
                { type: a11y.FocusTrapFactory },
                { type: undefined, decorators: [{ type: i0.Inject, args: [NZ_MODAL_CONFIG,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] }
            ];
        };
        NzModalComponent.propDecorators = {
            nzModalType: [{ type: i0.Input }],
            nzContent: [{ type: i0.Input }],
            nzComponentParams: [{ type: i0.Input }],
            nzFooter: [{ type: i0.Input }],
            nzGetContainer: [{ type: i0.Input }],
            nzVisible: [{ type: i0.Input }],
            nzVisibleChange: [{ type: i0.Output }],
            nzZIndex: [{ type: i0.Input }],
            nzWidth: [{ type: i0.Input }],
            nzWrapClassName: [{ type: i0.Input }],
            nzClassName: [{ type: i0.Input }],
            nzStyle: [{ type: i0.Input }],
            nzIconType: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzClosable: [{ type: i0.Input }],
            nzMask: [{ type: i0.Input }],
            nzMaskClosable: [{ type: i0.Input }],
            nzMaskStyle: [{ type: i0.Input }],
            nzBodyStyle: [{ type: i0.Input }],
            nzAfterOpen: [{ type: i0.Output }],
            nzAfterClose: [{ type: i0.Output }],
            nzOkText: [{ type: i0.Input }],
            nzOkType: [{ type: i0.Input }],
            nzOkLoading: [{ type: i0.Input }],
            nzOnOk: [{ type: i0.Input }, { type: i0.Output }],
            autoFocusButtonOk: [{ type: i0.ViewChild, args: ['autoFocusButtonOk', { read: i0.ElementRef },] }],
            nzCancelText: [{ type: i0.Input }],
            nzCancelLoading: [{ type: i0.Input }],
            nzOnCancel: [{ type: i0.Input }, { type: i0.Output }],
            modalContainer: [{ type: i0.ViewChild, args: ['modalContainer',] }],
            bodyContainer: [{ type: i0.ViewChild, args: ['bodyContainer', { read: i0.ViewContainerRef },] }],
            nzKeyboard: [{ type: i0.Input }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzVisible", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzClosable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzMask", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzMaskClosable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzOkLoading", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzCancelLoading", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzModalComponent.prototype, "nzKeyboard", void 0);
        return NzModalComponent;
    }(NzModalRef));
    /**
     * @param {?} obj
     * @return {?}
     */
    function isPromise(obj) {
        return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof ( /** @type {?} */(obj)).then === 'function' && typeof ( /** @type {?} */(obj)).catch === 'function';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ModalBuilderForService = /** @class */ (function () {
        function ModalBuilderForService(overlay, options) {
            if (options === void 0) {
                options = {};
            }
            var _this = this;
            this.overlay = overlay;
            this.createModal();
            if (!('nzGetContainer' in options)) { // As we use CDK to create modal in service by force, there is no need to use nzGetContainer
                // As we use CDK to create modal in service by force, there is no need to use nzGetContainer
                options.nzGetContainer = null; // Override nzGetContainer's default value to prevent creating another overlay
            }
            this.changeProps(options);
            this.modalRef.instance.open();
            this.modalRef.instance.nzAfterClose.subscribe(function () { return _this.destroyModal(); }); // [NOTE] By default, close equals destroy when using as Service
        }
        /**
         * @return {?}
         */
        ModalBuilderForService.prototype.getInstance = /**
         * @return {?}
         */
            function () {
                return this.modalRef && this.modalRef.instance;
            };
        /**
         * @return {?}
         */
        ModalBuilderForService.prototype.destroyModal = /**
         * @return {?}
         */
            function () {
                if (this.modalRef) {
                    this.overlayRef.dispose();
                    this.modalRef = null;
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        ModalBuilderForService.prototype.changeProps = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                if (this.modalRef) {
                    Object.assign(this.modalRef.instance, options); // DANGER: here not limit user's inputs at runtime
                }
            };
        /**
         * @return {?}
         */
        ModalBuilderForService.prototype.createModal = /**
         * @return {?}
         */
            function () {
                this.overlayRef = this.overlay.create();
                this.modalRef = this.overlayRef.attach(new portal.ComponentPortal(NzModalComponent));
            };
        return ModalBuilderForService;
    }());
    var NzModalService = /** @class */ (function () {
        function NzModalService(overlay, logger, modalControl) {
            this.overlay = overlay;
            this.logger = logger;
            this.modalControl = modalControl;
        }
        Object.defineProperty(NzModalService.prototype, "openModals", {
            // Track of the current close modals (we assume invisible is close this time)
            get: /**
             * @return {?}
             */ function () {
                return this.modalControl.openModals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzModalService.prototype, "afterAllClose", {
            get: /**
             * @return {?}
             */ function () {
                return this.modalControl.afterAllClose.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        // Closes all of the currently-open dialogs
        /**
         * @return {?}
         */
        NzModalService.prototype.closeAll = /**
         * @return {?}
         */
            function () {
                this.modalControl.closeAll();
            };
        /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
        NzModalService.prototype.create = /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                if (typeof options.nzOnCancel !== 'function') {
                    options.nzOnCancel = function () {
                    }; // Leave a empty function to close this modal by default
                }
                /** @type {?} */
                var modalRef = new ModalBuilderForService(this.overlay, options).getInstance(); // NOTE: use NzModalComponent as the NzModalRef by now, we may need archive the real NzModalRef object in the future
                return modalRef;
            };
        /**
         * @template T
         * @param {?=} options
         * @param {?=} confirmType
         * @return {?}
         */
        NzModalService.prototype.confirm = /**
         * @template T
         * @param {?=} options
         * @param {?=} confirmType
         * @return {?}
         */
            function (options, confirmType) {
                if (options === void 0) {
                    options = {};
                }
                if (confirmType === void 0) {
                    confirmType = 'confirm';
                }
                if ('nzFooter' in options) {
                    this.logger.warn("The Confirm-Modal doesn't support \"nzFooter\", this property will be ignored.");
                }
                if (!('nzWidth' in options)) {
                    options.nzWidth = 416;
                }
                if (typeof options.nzOnOk !== 'function') { // NOTE: only support function currently by calling confirm()
                    // NOTE: only support function currently by calling confirm()
                    options.nzOnOk = function () {
                    }; // Leave a empty function to close this modal by default
                }
                options.nzModalType = 'confirm';
                options.nzClassName = "ant-modal-confirm ant-modal-confirm-" + confirmType + " " + (options.nzClassName || '');
                options.nzMaskClosable = false;
                return this.create(options);
            };
        /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
        NzModalService.prototype.info = /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return this.simpleConfirm(options, 'info');
            };
        /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
        NzModalService.prototype.success = /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return this.simpleConfirm(options, 'success');
            };
        /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
        NzModalService.prototype.error = /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return this.simpleConfirm(options, 'error');
            };
        /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
        NzModalService.prototype.warning = /**
         * @template T
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return this.simpleConfirm(options, 'warning');
            };
        /**
         * @template T
         * @param {?=} options
         * @param {?=} confirmType
         * @return {?}
         */
        NzModalService.prototype.simpleConfirm = /**
         * @template T
         * @param {?=} options
         * @param {?=} confirmType
         * @return {?}
         */
            function (options, confirmType) {
                if (options === void 0) {
                    options = {};
                }
                if (!('nzIconType' in options)) {
                    options.nzIconType = {
                        'info': 'info-circle',
                        'success': 'check-circle',
                        'error': 'close-circle',
                        'warning': 'exclamation-circle'
                    }[confirmType];
                }
                if (!('nzCancelText' in options)) { // Remove the Cancel button if the user not specify a Cancel button
                    // Remove the Cancel button if the user not specify a Cancel button
                    options.nzCancelText = null;
                }
                return this.confirm(options, confirmType);
            };
        NzModalService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        NzModalService.ctorParameters = function () {
            return [
                { type: i2$1.Overlay },
                { type: LoggerService },
                { type: NzModalControlService }
            ];
        };
        return NzModalService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzModalModule = /** @class */ (function () {
        function NzModalModule() {
        }
        NzModalModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, i2$1.OverlayModule, NzI18nModule, NzButtonModule, LoggerModule, NzIconModule],
                        exports: [NzModalComponent],
                        declarations: [NzModalComponent, CssUnitPipe],
                        entryComponents: [NzModalComponent],
                        providers: [NzModalControlService, NzModalService]
                    },] }
        ];
        return NzModalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var NZ_NOTIFICATION_DEFAULT_CONFIG = new i0.InjectionToken('NZ_NOTIFICATION_DEFAULT_CONFIG');
    /** @type {?} */
    var NZ_NOTIFICATION_CONFIG = new i0.InjectionToken('NZ_NOTIFICATION_CONFIG');
    /** @type {?} */
    var NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER = {
        provide: NZ_NOTIFICATION_DEFAULT_CONFIG,
        useValue: {
            nzTop: '24px',
            nzBottom: '24px',
            nzPlacement: 'topRight',
            nzDuration: 4500,
            nzMaxStack: 7,
            nzPauseOnHover: true,
            nzAnimate: true
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzNotificationContainerComponent = /** @class */ (function (_super) {
        __extends(NzNotificationContainerComponent, _super);
        function NzNotificationContainerComponent(defaultConfig, config) {
            return _super.call(this, defaultConfig, config) || this;
        }
        NzNotificationContainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-notification-container',
                        preserveWhitespaces: false,
                        template: "<div\n  class=\"ant-notification ant-notification-{{config.nzPlacement}}\"\n  [style.top]=\"(config.nzPlacement==='topLeft'||config.nzPlacement=='topRight')? config.nzTop:null\"\n  [style.bottom]=\"(config.nzPlacement==='bottomLeft'||config.nzPlacement=='bottomRight')? config.nzBottom:null\"\n  [style.right]=\"(config.nzPlacement==='bottomRight'||config.nzPlacement=='topRight')?'0px':null\"\n  [style.left]=\"(config.nzPlacement==='topLeft'||config.nzPlacement=='bottomLeft')?'0px':null\">\n  <nz-notification *ngFor=\"let message of messages; let i = index\" [nzMessage]=\"message\" [nzIndex]=\"i\"></nz-notification>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzNotificationContainerComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NZ_NOTIFICATION_DEFAULT_CONFIG,] }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NZ_NOTIFICATION_CONFIG,] }] }
            ];
        };
        return NzNotificationContainerComponent;
    }(NzMessageContainerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzNotificationComponent = /** @class */ (function (_super) {
        __extends(NzNotificationComponent, _super);
        function NzNotificationComponent(container) {
            var _this = _super.call(this, container) || this;
            _this.container = container;
            return _this;
        }
        /**
         * @return {?}
         */
        NzNotificationComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this._destroy();
            };
        Object.defineProperty(NzNotificationComponent.prototype, "state", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzMessage.state === 'enter') {
                    if ((this.container.config["nzPlacement"] === 'topLeft') || (this.container.config["nzPlacement"] === 'bottomLeft')) {
                        return 'enterLeft';
                    }
                    else {
                        return 'enterRight';
                    }
                }
                else {
                    return this.nzMessage.state;
                }
            },
            enumerable: true,
            configurable: true
        });
        NzNotificationComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-notification',
                        preserveWhitespaces: false,
                        animations: [
                            animations.trigger('enterLeave', [
                                animations.state('enterRight', animations.style({ opacity: 1, transform: 'translateX(0)' })),
                                animations.transition('* => enterRight', [
                                    animations.style({ opacity: 0, transform: 'translateX(5%)' }),
                                    animations.animate('100ms linear')
                                ]),
                                animations.state('enterLeft', animations.style({ opacity: 1, transform: 'translateX(0)' })),
                                animations.transition('* => enterLeft', [
                                    animations.style({ opacity: 0, transform: 'translateX(-5%)' }),
                                    animations.animate('100ms linear')
                                ]),
                                animations.state('leave', animations.style({
                                    opacity: 0,
                                    transform: 'scaleY(0.8)',
                                    transformOrigin: '0% 0%'
                                })),
                                animations.transition('* => leave', [
                                    animations.style({
                                        opacity: 1,
                                        transform: 'scaleY(1)',
                                        transformOrigin: '0% 0%'
                                    }),
                                    animations.animate('100ms linear')
                                ])
                            ])
                        ],
                        template: "<div class=\"ant-notification-notice ant-notification-notice-closable\"\n  [ngStyle]=\"nzMessage.options.nzStyle\"\n  [ngClass]=\"nzMessage.options.nzClass\"\n  [@enterLeave]=\"state\"\n  (mouseenter)=\"onEnter()\"\n  (mouseleave)=\"onLeave()\">\n  <div *ngIf=\"!nzMessage.template\" class=\"ant-notification-notice-content\">\n    <div class=\"ant-notification-notice-content\" [ngClass]=\"{ 'ant-notification-notice-with-icon': nzMessage.type !== 'blank' }\">\n      <div [class.ant-notification-notice-with-icon]=\"nzMessage.type !== 'blank'\">\n        <ng-container [ngSwitch]=\"nzMessage.type\">\n          <i *ngSwitchCase=\"'success'\" nz-icon type=\"check-circle\" class=\"ant-notification-notice-icon ant-notification-notice-icon-success\"></i>\n          <i *ngSwitchCase=\"'info'\" nz-icon type=\"info-circle\" class=\"ant-notification-notice-icon ant-notification-notice-icon-info\"></i>\n          <i *ngSwitchCase=\"'warning'\" nz-icon type=\"exclamation-circle\" class=\"ant-notification-notice-icon ant-notification-notice-icon-warning\"></i>\n          <i *ngSwitchCase=\"'error'\" nz-icon type=\"close-circle\" class=\"ant-notification-notice-icon ant-notification-notice-icon-error\"></i>\n        </ng-container>\n        <div class=\"ant-notification-notice-message\" [innerHTML]=\"nzMessage.title\"></div>\n        <div class=\"ant-notification-notice-description\" [innerHTML]=\"nzMessage.content\"></div>\n      </div>\n    </div>\n  </div>\n  <ng-template [ngIf]=\"nzMessage.template\" [ngTemplateOutlet]=\"nzMessage.template\" [ngTemplateOutletContext]=\"{ $implicit: this }\"></ng-template>\n  <a tabindex=\"0\" class=\"ant-notification-notice-close\" (click)=\"close()\">\n    <span class=\"ant-notification-notice-close-x\">\n      <i nz-icon type=\"close\" class=\"ant-notification-close-icon\"></i>\n    </span>\n  </a>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzNotificationComponent.ctorParameters = function () {
            return [
                { type: NzNotificationContainerComponent }
            ];
        };
        NzNotificationComponent.propDecorators = {
            nzMessage: [{ type: i0.Input }]
        };
        return NzNotificationComponent;
    }(NzMessageComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzNotificationService$$1 = /** @class */ (function (_super) {
        __extends(NzNotificationService$$1, _super);
        function NzNotificationService$$1(overlay, injector, cfr, appRef) {
            return _super.call(this, overlay, NzNotificationContainerComponent, injector, cfr, appRef, 'notification-') || this;
        }
        // Shortcut methods
        /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.success = /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (title, content, options) {
                return /** @type {?} */ (this.createMessage({ type: 'success', title: title, content: content }, options));
            };
        /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.error = /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (title, content, options) {
                return /** @type {?} */ (this.createMessage({ type: 'error', title: title, content: content }, options));
            };
        /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.info = /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (title, content, options) {
                return /** @type {?} */ (this.createMessage({ type: 'info', title: title, content: content }, options));
            };
        /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.warning = /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (title, content, options) {
                return /** @type {?} */ (this.createMessage({ type: 'warning', title: title, content: content }, options));
            };
        /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.blank = /**
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (title, content, options) {
                return /** @type {?} */ (this.createMessage({ type: 'blank', title: title, content: content }, options));
            };
        /**
         * @param {?} type
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.create = /**
         * @param {?} type
         * @param {?} title
         * @param {?} content
         * @param {?=} options
         * @return {?}
         */
            function (type, title, content, options) {
                return /** @type {?} */ (this.createMessage({ type: type, title: title, content: content }, options));
            };
        // For content with template
        /**
         * @param {?} template
         * @param {?=} options
         * @return {?}
         */
        NzNotificationService$$1.prototype.template = /**
         * @param {?} template
         * @param {?=} options
         * @return {?}
         */
            function (template, options) {
                return /** @type {?} */ (this.createMessage({ template: template }, options));
            };
        NzNotificationService$$1.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NzNotificationService$$1.ctorParameters = function () {
            return [
                { type: i2$1.Overlay },
                { type: i0.Injector },
                { type: i0.ComponentFactoryResolver },
                { type: i0.ApplicationRef }
            ];
        };
        /** @nocollapse */ NzNotificationService$$1.ngInjectableDef = i0.defineInjectable({ factory: function NzNotificationService_Factory() { return new NzNotificationService$$1(i0.inject(i2$1.Overlay), i0.inject(i0.INJECTOR), i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef)); }, token: NzNotificationService$$1, providedIn: "root" });
        return NzNotificationService$$1;
    }(NzMessageBaseService$$1));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzNotificationModule = /** @class */ (function () {
        function NzNotificationModule() {
        }
        NzNotificationModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, i2$1.OverlayModule, NzIconModule],
                        declarations: [NzNotificationComponent, NzNotificationContainerComponent],
                        providers: [NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER, NzNotificationService$$1],
                        entryComponents: [NzNotificationContainerComponent]
                    },] }
        ];
        return NzNotificationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPaginationComponent = /** @class */ (function () {
        function NzPaginationComponent(i18n) {
            this.i18n = i18n;
            this.unsubscribe$ = new rxjs.Subject();
            // tslint:disable-next-line:no-any
            this.locale = {};
            this._showSizeChanger = false;
            this._showQuickJumper = false;
            this._simple = false;
            this._hideOnSinglePage = false;
            this._pageSize = 10;
            this._pageSizeOptions = [10, 20, 30, 40];
            this._pageIndex = 1;
            this.firstIndex = 1;
            this.pages = [];
            this.nzInTable = false;
            this.nzPageSizeChange = new i0.EventEmitter();
            this.nzPageIndexChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzPaginationComponent.prototype, "nzItemRender", {
            get: /**
             * @return {?}
             */ function () {
                return this._itemRender;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._itemRender = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzShowSizeChanger", {
            get: /**
             * @return {?}
             */ function () {
                return this._showSizeChanger;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showSizeChanger = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzHideOnSinglePage", {
            get: /**
             * @return {?}
             */ function () {
                return this._hideOnSinglePage;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._hideOnSinglePage = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzShowQuickJumper", {
            get: /**
             * @return {?}
             */ function () {
                return this._showQuickJumper;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showQuickJumper = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzSimple", {
            get: /**
             * @return {?}
             */ function () {
                return this._simple;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._simple = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzPageSizeOptions", {
            get: /**
             * @return {?}
             */ function () {
                return this._pageSizeOptions;
            },
            /** page size changer select values */
            set: /**
             * page size changer select values
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value && value.length) {
                    this._pageSizeOptions = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzPageIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._pageIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._pageIndex === value) {
                    return;
                }
                if (value > this.lastIndex) {
                    this._pageIndex = this.lastIndex;
                }
                else if (value < this.firstIndex) {
                    this._pageIndex = this.firstIndex;
                }
                else {
                    this._pageIndex = Number(value);
                }
                this.buildIndexes();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzPageSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._pageSize;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value === this._pageSize) {
                    return;
                }
                this._pageSize = value;
                /** @type {?} */
                var pageIndexOverflow = this.checkLastIndexOverflow();
                if (pageIndexOverflow) {
                    this.nzPageIndex = this.lastIndex;
                    this.nzPageIndexChange.emit(this.lastIndex);
                }
                this.buildIndexes();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "nzTotal", {
            get: /**
             * @return {?}
             */ function () {
                return this._total;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._total = value;
                this.buildIndexes();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @return {?}
         */
        NzPaginationComponent.prototype.jumpPage = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (index === this.nzPageIndex) {
                    return;
                }
                if (index < this.firstIndex) {
                    this.nzPageIndex = this.firstIndex;
                }
                else if (index > this.lastIndex) {
                    this.nzPageIndex = this.lastIndex;
                }
                else {
                    this.nzPageIndex = index;
                }
                this.nzPageIndexChange.emit(this.nzPageIndex);
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.jumpPreFive = /**
         * @return {?}
         */
            function () {
                this.jumpPage(this.nzPageIndex - 5);
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.jumpNextFive = /**
         * @return {?}
         */
            function () {
                this.jumpPage(this.nzPageIndex + 5);
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.jumpPreOne = /**
         * @return {?}
         */
            function () {
                if (this.isFirstIndex) {
                    return;
                }
                this.jumpPage(this.nzPageIndex - 1);
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.jumpNextOne = /**
         * @return {?}
         */
            function () {
                if (this.isLastIndex) {
                    return;
                }
                this.jumpPage(this.nzPageIndex + 1);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzPaginationComponent.prototype.onPageSizeChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.nzPageSize = $event;
                this.nzPageSizeChange.emit($event);
            };
        /**
         * @param {?} e
         * @param {?} input
         * @param {?} clearInputValue
         * @return {?}
         */
        NzPaginationComponent.prototype.handleKeyDown = /**
         * @param {?} e
         * @param {?} input
         * @param {?} clearInputValue
         * @return {?}
         */
            function (e, input, clearInputValue) {
                /** @type {?} */
                var target = input;
                /** @type {?} */
                var inputValue = target.value;
                /** @type {?} */
                var currentInputValue = this.nzPageIndex;
                /** @type {?} */
                var value;
                if (inputValue === '') {
                    value = inputValue;
                }
                else if (isNaN(Number(inputValue))) {
                    value = currentInputValue;
                }
                else {
                    value = Number(inputValue);
                }
                this.handleChange(value, target, clearInputValue);
            };
        /**
         * @param {?} page
         * @return {?}
         */
        NzPaginationComponent.prototype.isValid = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                return isInteger(page) && (page >= 1) && (page !== this.nzPageIndex) && (page <= this.lastIndex);
            };
        /**
         * @param {?} value
         * @param {?} target
         * @param {?} clearInputValue
         * @return {?}
         */
        NzPaginationComponent.prototype.handleChange = /**
         * @param {?} value
         * @param {?} target
         * @param {?} clearInputValue
         * @return {?}
         */
            function (value, target, clearInputValue) {
                /** @type {?} */
                var page = value;
                if (this.isValid(page)) {
                    this.nzPageIndex = page;
                    this.nzPageIndexChange.emit(this.nzPageIndex);
                }
                if (clearInputValue) {
                    target.value = null;
                }
                else {
                    target.value = "" + this.nzPageIndex;
                }
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.checkLastIndexOverflow = /**
         * @return {?}
         */
            function () {
                return this.nzPageIndex > this.lastIndex;
            };
        Object.defineProperty(NzPaginationComponent.prototype, "lastIndex", {
            get: /**
             * @return {?}
             */ function () {
                return Math.ceil(this.nzTotal / this.nzPageSize);
            },
            enumerable: true,
            configurable: true
        });
        /** generate indexes list */
        /**
         * generate indexes list
         * @return {?}
         */
        NzPaginationComponent.prototype.buildIndexes = /**
         * generate indexes list
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tmpPages = [];
                if (this.lastIndex <= 9) {
                    for (var i = 2; i <= this.lastIndex - 1; i++) {
                        tmpPages.push({ index: i });
                    }
                }
                else {
                    /** @type {?} */
                    var current = +this.nzPageIndex;
                    /** @type {?} */
                    var left = Math.max(2, current - 2);
                    /** @type {?} */
                    var right = Math.min(current + 2, this.lastIndex - 1);
                    if (current - 1 <= 2) {
                        right = 5;
                    }
                    if (this.lastIndex - current <= 2) {
                        left = this.lastIndex - 4;
                    }
                    for (var i = left; i <= right; i++) {
                        tmpPages.push({ index: i });
                    }
                }
                this.pages = tmpPages;
            };
        Object.defineProperty(NzPaginationComponent.prototype, "isLastIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzPageIndex === this.lastIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPaginationComponent.prototype, "isFirstIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzPageIndex === this.firstIndex;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} val1
         * @param {?} val2
         * @return {?}
         */
        NzPaginationComponent.prototype.min = /**
         * @param {?} val1
         * @param {?} val2
         * @return {?}
         */
            function (val1, val2) {
                return Math.min(val1, val2);
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18n.localeChange.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Pagination'); });
            };
        /**
         * @return {?}
         */
        NzPaginationComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        NzPaginationComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-pagination',
                        preserveWhitespaces: false,
                        template: "<ng-template #renderItemTemplate let-type let-page=\"page\">\n  <a class=\"ant-pagination-item-link\" *ngIf=\"type==='pre'\"><i nz-icon type=\"left\"></i></a>\n  <a class=\"ant-pagination-item-link\" *ngIf=\"type==='next'\"><i nz-icon type=\"right\"></i></a>\n  <a *ngIf=\"type=='page'\">{{page}}</a>\n</ng-template>\n<ng-container *ngIf=\"(nzHideOnSinglePage&&(nzTotal>nzPageSize))||!nzHideOnSinglePage\">\n  <ul\n    *ngIf=\"nzSimple\"\n    [class.ant-table-pagination]=\"nzInTable\"\n    class=\"ant-pagination ant-pagination-simple\">\n    <li\n      title=\"{{ locale.prev_page }}\"\n      class=\"ant-pagination-prev\"\n      (click)=\"jumpPreOne()\"\n      [class.ant-pagination-disabled]=\"isFirstIndex\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'pre'}\"></ng-template>\n    </li>\n    <li [attr.title]=\"nzPageIndex+'/'+lastIndex\" class=\"ant-pagination-simple-pager\">\n      <input\n        #simplePagerInput\n        [ngModel]=\"nzPageIndex\"\n        (keydown.enter)=\"handleKeyDown($event,simplePagerInput,false)\"\n        size=\"3\">\n      <span class=\"ant-pagination-slash\">\uFF0F</span>\n      {{ lastIndex }}\n    </li>\n    <li\n      title=\"{{ locale.next_page }}\"\n      class=\"ant-pagination-next\"\n      (click)=\"jumpNextOne()\"\n      [class.ant-pagination-disabled]=\"isLastIndex\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'next'}\"></ng-template>\n    </li>\n  </ul>\n  <ul\n    *ngIf=\"!nzSimple\"\n    [class.mini]=\"nzSize=='small'\"\n    [class.ant-table-pagination]=\"nzInTable\"\n    class=\"ant-pagination\">\n    <li class=\"ant-pagination-total-text\" *ngIf=\"nzShowTotal\">\n      <ng-template\n        [ngTemplateOutlet]=\"nzShowTotal\"\n        [ngTemplateOutletContext]=\"{ $implicit: nzTotal,range:[(nzPageIndex-1)*nzPageSize+1, min(nzPageIndex*nzPageSize, nzTotal)] }\">\n      </ng-template>\n    </li>\n    <li\n      title=\"{{ locale.prev_page }}\"\n      class=\"ant-pagination-prev\"\n      (click)=\"jumpPreOne()\"\n      [class.ant-pagination-disabled]=\"isFirstIndex\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'pre'}\"></ng-template>\n    </li>\n    <li\n      [attr.title]=\"firstIndex\"\n      class=\"ant-pagination-item\"\n      (click)=\"jumpPage(firstIndex)\"\n      [class.ant-pagination-item-active]=\"isFirstIndex\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'page',page: firstIndex }\"></ng-template>\n    </li>\n    <li\n      [attr.title]=\"locale.prev_5\"\n      (click)=\"jumpPreFive()\"\n      class=\"ant-pagination-jump-prev\"\n      *ngIf=\"(lastIndex >9)&&(nzPageIndex-3>firstIndex)\">\n      <a class=\"ant-pagination-item-link\">\n        <div class=\"ant-pagination-item-container\">\n          <i nz-icon type=\"double-left\" class=\"ant-pagination-item-link-icon\"></i>\n          <span class=\"ant-pagination-item-ellipsis\">\u2022\u2022\u2022</span>\n        </div>\n      </a>\n    </li>\n    <li\n      *ngFor=\"let page of pages\"\n      [attr.title]=\"page.index\"\n      class=\"ant-pagination-item\"\n      (click)=\"jumpPage(page.index)\"\n      [class.ant-pagination-item-active]=\"nzPageIndex==page.index\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'page',page: page.index }\"></ng-template>\n    </li>\n    <li\n      [attr.title]=\"locale.next_5\"\n      (click)=\"jumpNextFive()\"\n      class=\"ant-pagination-jump-next ant-pagination-item-link-icon\"\n      *ngIf=\"(lastIndex >9)&&(nzPageIndex+3<lastIndex)\">\n      <a class=\"ant-pagination-item-link\">\n        <div class=\"ant-pagination-item-container\">\n          <i nz-icon type=\"double-right\" class=\"ant-pagination-item-link-icon\"></i>\n          <span class=\"ant-pagination-item-ellipsis\">\u2022\u2022\u2022</span>\n        </div>\n      </a>\n    </li>\n    <li\n      [attr.title]=\"lastIndex\"\n      class=\"ant-pagination-item\"\n      (click)=\"jumpPage(lastIndex)\"\n      *ngIf=\"(lastIndex>0)&&(lastIndex!==firstIndex)\"\n      [class.ant-pagination-item-active]=\"isLastIndex\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'page',page: lastIndex }\"></ng-template>\n    </li>\n    <li\n      title=\"{{ locale.next_page }}\"\n      class=\"ant-pagination-next\"\n      (click)=\"jumpNextOne()\"\n      [class.ant-pagination-disabled]=\"isLastIndex\">\n      <ng-template [ngTemplateOutlet]=\"nzItemRender\" [ngTemplateOutletContext]=\"{ $implicit: 'next'}\"></ng-template>\n    </li>\n    <div class=\"ant-pagination-options\" *ngIf=\"nzShowQuickJumper||nzShowSizeChanger\">\n      <nz-select\n        *ngIf=\"nzShowSizeChanger\"\n        [nzSize]=\"nzSize=='small'?'small':''\"\n        class=\"ant-pagination-options-size-changer\"\n        [ngModel]=\"nzPageSize\"\n        (ngModelChange)=\"onPageSizeChange($event)\">\n        <nz-option\n          *ngFor=\"let option of nzPageSizeOptions\"\n          [nzLabel]=\"option + locale.items_per_page\"\n          [nzValue]=\"option\">\n        </nz-option>\n        <nz-option\n          *ngIf=\"nzPageSizeOptions.indexOf(nzPageSize)==-1\"\n          [nzLabel]=\"nzPageSize + locale.items_per_page\"\n          [nzValue]=\"nzPageSize\">\n        </nz-option>\n      </nz-select>\n      <div class=\"ant-pagination-options-quick-jumper\"\n        *ngIf=\"nzShowQuickJumper\">\n        {{ locale.jump_to }}\n        <input #quickJumperInput (keydown.enter)=\"handleKeyDown($event,quickJumperInput,true)\">\n        {{ locale.page }}\n      </div>\n    </div>\n  </ul>\n</ng-container>"
                    }] }
        ];
        /** @nocollapse */
        NzPaginationComponent.ctorParameters = function () {
            return [
                { type: NzI18nService }
            ];
        };
        NzPaginationComponent.propDecorators = {
            _itemRender: [{ type: i0.ViewChild, args: ['renderItemTemplate',] }],
            nzShowTotal: [{ type: i0.Input }],
            nzInTable: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzPageSizeChange: [{ type: i0.Output }],
            nzPageIndexChange: [{ type: i0.Output }],
            nzItemRender: [{ type: i0.Input }],
            nzShowSizeChanger: [{ type: i0.Input }],
            nzHideOnSinglePage: [{ type: i0.Input }],
            nzShowQuickJumper: [{ type: i0.Input }],
            nzSimple: [{ type: i0.Input }],
            nzPageSizeOptions: [{ type: i0.Input }],
            nzPageIndex: [{ type: i0.Input }],
            nzPageSize: [{ type: i0.Input }],
            nzTotal: [{ type: i0.Input }]
        };
        return NzPaginationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPaginationModule = /** @class */ (function () {
        function NzPaginationModule() {
        }
        NzPaginationModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzPaginationComponent],
                        exports: [NzPaginationComponent],
                        imports: [i3.CommonModule, forms.FormsModule, NzSelectModule, NzI18nModule, NzIconModule]
                    },] }
        ];
        return NzPaginationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzToolTipComponent = /** @class */ (function () {
        function NzToolTipComponent(cdr) {
            this.cdr = cdr;
            this._hasBackdrop = false;
            this._prefix = 'ant-tooltip-placement';
            this._positions = __spread(DEFAULT_4_POSITIONS);
            this._classMap = {};
            this._placement = 'top';
            this._trigger = 'hover';
            this.visibleSource = new rxjs.BehaviorSubject(false);
            this.visible$ = this.visibleSource.asObservable();
            this.nzVisibleChange = new i0.EventEmitter();
            this.nzOverlayClassName = '';
            this.nzOverlayStyle = {};
            this.nzMouseEnterDelay = 0.15; // Unit: second
            this.nzMouseLeaveDelay = 0.1;
        }
        Object.defineProperty(NzToolTipComponent.prototype, "nzContent", {
            get: /**
             * @return {?}
             */ function () {
                return this._content;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isContentString = !(value instanceof i0.TemplateRef);
                this._content = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzToolTipComponent.prototype, "nzTitle", {
            get: /**
             * @return {?}
             */ function () {
                return this._title;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isTitleString = !(value instanceof i0.TemplateRef);
                this._title = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzToolTipComponent.prototype, "nzVisible", {
            get: /**
             * @return {?}
             */ function () {
                return this.visibleSource.value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var visible = toBoolean(value);
                if (this.visibleSource.value !== visible) {
                    this.visibleSource.next(visible);
                    this.nzVisibleChange.emit(visible);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzToolTipComponent.prototype, "nzTrigger", {
            get: /**
             * @return {?}
             */ function () {
                return this._trigger;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._trigger = value;
                this._hasBackdrop = this._trigger === 'click';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzToolTipComponent.prototype, "nzPlacement", {
            get: /**
             * @return {?}
             */ function () {
                return this._placement;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._placement) {
                    this._placement = value;
                    this._positions.unshift(/** @type {?} */ (POSITION_MAP[this.nzPlacement]));
                }
            },
            enumerable: true,
            configurable: true
        });
        // Manually force updating current overlay's position
        /**
         * @return {?}
         */
        NzToolTipComponent.prototype.updatePosition = /**
         * @return {?}
         */
            function () {
                if (this.overlay && this.overlay.overlayRef) {
                    this.overlay.overlayRef.updatePosition();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzToolTipComponent.prototype.onPositionChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                for (var key in POSITION_MAP) {
                    if (JSON.stringify($event.connectionPair) === JSON.stringify(POSITION_MAP[key])) {
                        this.nzPlacement = key;
                        break;
                    }
                }
                this.setClassMap();
                /** TODO may cause performance problem */
                this.cdr.detectChanges();
            };
        /**
         * @return {?}
         */
        NzToolTipComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                if (!this.isContentEmpty()) {
                    this.nzVisible = true;
                }
            };
        /**
         * @return {?}
         */
        NzToolTipComponent.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.nzVisible = false;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzToolTipComponent.prototype._afterVisibilityAnimation = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.toState === 'false' && !this.nzVisible) {
                    this.nzVisibleChange.emit(false);
                }
                if (e.toState === 'true' && this.nzVisible) {
                    this.nzVisibleChange.emit(true);
                }
            };
        /**
         * @return {?}
         */
        NzToolTipComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this._classMap = (_a = {},
                    _a[this.nzOverlayClassName] = true,
                    _a[this._prefix + "-" + this._placement] = true,
                    _a);
            };
        /**
         * @param {?} origin
         * @return {?}
         */
        NzToolTipComponent.prototype.setOverlayOrigin = /**
         * @param {?} origin
         * @return {?}
         */
            function (origin) {
                this.overlayOrigin = origin;
            };
        /**
         * @return {?}
         */
        NzToolTipComponent.prototype.isContentEmpty = /**
         * @return {?}
         */
            function () {
                return this.isTitleString ? (this.nzTitle === '' || !isNotNil(this.nzTitle)) : false; // Pity, can't detect whether nzTemplate is empty due to can't get it's content before shown up
            };
        NzToolTipComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tooltip',
                        animations: [fadeAnimation],
                        template: "<ng-content></ng-content>\n<ng-template\n  #overlay=\"cdkConnectedOverlay\"\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n  [cdkConnectedOverlayHasBackdrop]=\"_hasBackdrop\"\n  (backdropClick)=\"hide()\"\n  (detach)=\"hide()\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayOpen]=\"visible$ | async\">\n  <div class=\"ant-tooltip\" [ngClass]=\"_classMap\" [ngStyle]=\"nzOverlayStyle\" [@fadeAnimation]=\"''+(visible$ | async)\"\n    (@fadeAnimation.done)=\"_afterVisibilityAnimation($event)\">\n    <div class=\"ant-tooltip-content\">\n      <div class=\"ant-tooltip-arrow\"></div>\n      <div class=\"ant-tooltip-inner\">\n        <ng-container *ngIf=\"isTitleString; else titleTemplate\">{{ nzTitle }}</ng-container>\n        <ng-template #titleTemplate>\n          <ng-template [ngTemplateOutlet]=\"nzTitle\"></ng-template>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</ng-template>",
                        preserveWhitespaces: false,
                        styles: ["\n    .ant-tooltip {\n      position: relative;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzToolTipComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzToolTipComponent.propDecorators = {
            _title: [{ type: i0.ContentChild, args: ['nzTemplate',] }],
            overlay: [{ type: i0.ViewChild, args: ['overlay',] }],
            nzVisibleChange: [{ type: i0.Output }],
            nzOverlayClassName: [{ type: i0.Input }],
            nzOverlayStyle: [{ type: i0.Input }],
            nzMouseEnterDelay: [{ type: i0.Input }],
            nzMouseLeaveDelay: [{ type: i0.Input }],
            nzContent: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzVisible: [{ type: i0.Input }],
            nzTrigger: [{ type: i0.Input }],
            nzPlacement: [{ type: i0.Input }]
        };
        return NzToolTipComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPopconfirmComponent = /** @class */ (function (_super) {
        __extends(NzPopconfirmComponent, _super);
        function NzPopconfirmComponent(cdr) {
            var _this = _super.call(this, cdr) || this;
            _this._condition = false;
            _this._prefix = 'ant-popover-placement';
            _this._trigger = 'click';
            _this._hasBackdrop = true;
            _this.nzOnCancel = new i0.EventEmitter();
            _this.nzOnConfirm = new i0.EventEmitter();
            _this.nzOkType = 'primary';
            return _this;
        }
        Object.defineProperty(NzPopconfirmComponent.prototype, "nzCondition", {
            get: /**
             * @return {?}
             */ function () {
                return this._condition;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._condition = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzPopconfirmComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                if (!this.nzCondition) {
                    this.nzVisible = true;
                }
                else {
                    this.onConfirm();
                }
            };
        /**
         * @return {?}
         */
        NzPopconfirmComponent.prototype.onCancel = /**
         * @return {?}
         */
            function () {
                this.nzOnCancel.emit();
                this.nzVisible = false;
            };
        /**
         * @return {?}
         */
        NzPopconfirmComponent.prototype.onConfirm = /**
         * @return {?}
         */
            function () {
                this.nzOnConfirm.emit();
                this.nzVisible = false;
            };
        NzPopconfirmComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-popconfirm',
                        preserveWhitespaces: false,
                        animations: [fadeAnimation],
                        template: "<ng-content></ng-content>\n<ng-template\n  #overlay=\"cdkConnectedOverlay\"\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n  [cdkConnectedOverlayHasBackdrop]=\"_hasBackdrop\"\n  (backdropClick)=\"hide()\"\n  (detach)=\"hide()\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayOpen]=\"visible$ | async\">\n  <div class=\"ant-popover\" [ngClass]=\"_classMap\" [ngStyle]=\"nzOverlayStyle\" [@fadeAnimation]=\"''+(visible$ | async)\"\n    (@fadeAnimation.done)=\"_afterVisibilityAnimation($event)\">\n    <div class=\"ant-popover-content\">\n      <div class=\"ant-popover-arrow\"></div>\n      <div class=\"ant-popover-inner\">\n        <div>\n          <div class=\"ant-popover-inner-content\">\n            <div class=\"ant-popover-message\">\n              <ng-container *ngIf=\"isTitleString; else titleTemplate\">\n                <i nz-icon type=\"exclamation-circle\" theme=\"fill\"></i>\n                <div class=\"ant-popover-message-title\">{{ nzTitle }}</div>\n              </ng-container>\n              <ng-template #titleTemplate>\n                <ng-template [ngTemplateOutlet]=\"nzTitle\"></ng-template>\n              </ng-template>\n            </div>\n            <div class=\"ant-popover-buttons\">\n              <button nz-button [nzSize]=\"'small'\" (click)=\"onCancel()\">\n                <ng-container *ngIf=\"nzCancelText\">{{ nzCancelText }}</ng-container>\n                <ng-container *ngIf=\"!nzCancelText\">{{ 'Modal.cancelText' | nzI18n }}</ng-container>\n              </button>\n              <button nz-button [nzSize]=\"'small'\" [nzType]=\"nzOkType\" (click)=\"onConfirm()\">\n                <ng-container *ngIf=\"nzOkText\">{{ nzOkText }}</ng-container>\n                <ng-container *ngIf=\"!nzOkText\">{{ 'Modal.okText' | nzI18n }}</ng-container>\n              </button>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>",
                        styles: ["\n    .ant-popover {\n      position: relative;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzPopconfirmComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzPopconfirmComponent.propDecorators = {
            nzOnCancel: [{ type: i0.Output }],
            nzOnConfirm: [{ type: i0.Output }],
            nzOkText: [{ type: i0.Input }],
            nzOkType: [{ type: i0.Input }],
            nzCancelText: [{ type: i0.Input }],
            nzCondition: [{ type: i0.Input }]
        };
        return NzPopconfirmComponent;
    }(NzToolTipComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTooltipDirective = /** @class */ (function () {
        function NzTooltipDirective(elementRef, hostView, resolver, renderer, tooltip) {
            this.elementRef = elementRef;
            this.hostView = hostView;
            this.resolver = resolver;
            this.renderer = renderer;
            this.tooltip = tooltip;
            this.unsubscribe$ = new rxjs.Subject();
            // [NOTE] Here hard coded, and nzTitle used only under NzTooltipDirective currently.
            this.isTooltipOpen = false;
            this.isDynamicTooltip = false; // Indicate whether current tooltip is dynamic created
            this.factory = this.resolver.resolveComponentFactory(NzToolTipComponent);
            this.nzVisibleChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzTooltipDirective.prototype, "nzTitle", {
            get: /**
             * @return {?}
             */ function () {
                return this._title;
            },
            set: /**
             * @param {?} title
             * @return {?}
             */ function (title) {
                this._title = title;
                this.updateCompValue('nzTitle', title);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "setTitle", {
            set: /**
             * @param {?} title
             * @return {?}
             */ function (title) {
                this.nzTitle = title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzContent", {
            get: /**
             * @return {?}
             */ function () {
                return this._content;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._content = value;
                this.updateCompValue('nzContent', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzOverlayClassName", {
            get: /**
             * @return {?}
             */ function () {
                return this._overlayClassName;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._overlayClassName = value;
                this.updateCompValue('nzOverlayClassName', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzOverlayStyle", {
            get: /**
             * @return {?}
             */ function () {
                return this._overlayStyle;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._overlayStyle = value;
                this.updateCompValue('nzOverlayStyle', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzMouseEnterDelay", {
            get: /**
             * @return {?}
             */ function () {
                return this._mouseEnterDelay;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._mouseEnterDelay = value;
                this.updateCompValue('nzMouseEnterDelay', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzMouseLeaveDelay", {
            get: /**
             * @return {?}
             */ function () {
                return this._mouseEnterDelay;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._mouseLeaveDelay = value;
                this.updateCompValue('nzMouseLeaveDelay', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzVisible", {
            get: /**
             * @return {?}
             */ function () {
                return this._visible;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._visible = value;
                this.updateCompValue('nzVisible', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzTrigger", {
            get: /**
             * @return {?}
             */ function () {
                return this._trigger;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._trigger = value;
                this.updateCompValue('nzTrigger', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "nzPlacement", {
            get: /**
             * @return {?}
             */ function () {
                return this._placement;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._placement = value;
                this.updateCompValue('nzPlacement', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTooltipDirective.prototype, "isOpen", {
            get: /**
             * @return {?}
             */ function () {
                return this.isTooltipOpen;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTooltipDirective.prototype.show = /**
         * @return {?}
         */
            function () {
                this.tooltip.show();
                this.isTooltipOpen = true;
            };
        /**
         * @return {?}
         */
        NzTooltipDirective.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.tooltip.hide();
                this.isTooltipOpen = false;
            };
        /**
         * @param {?} isOrigin
         * @param {?} isEnter
         * @param {?=} delay
         * @return {?}
         */
        NzTooltipDirective.prototype.delayEnterLeave = /**
         * @param {?} isOrigin
         * @param {?} isEnter
         * @param {?=} delay
         * @return {?}
         */
            function (isOrigin, isEnter, delay) {
                var _this = this;
                if (delay === void 0) {
                    delay = -1;
                }
                if (this.delayTimer) { // Clear timer during the delay time
                    // Clear timer during the delay time
                    window.clearTimeout(this.delayTimer);
                    this.delayTimer = null;
                }
                else if (delay > 0) {
                    this.delayTimer = window.setTimeout(function () {
                        _this.delayTimer = null;
                        isEnter ? _this.show() : _this.hide();
                    }, delay * 1000);
                }
                else {
                    isEnter && isOrigin ? this.show() : this.hide(); // [Compatible] The "isOrigin" is used due to the tooltip will not hide immediately (may caused by the fade-out animation)
                }
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        NzTooltipDirective.prototype.updateCompValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                if (this.isDynamicTooltip && isNotNil(value)) {
                    this.tooltip[key] = value;
                }
            };
        /**
         * @return {?}
         */
        NzTooltipDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Support faster tooltip mode: <a nz-tooltip="xxx"></a>. [NOTE] Used only under NzTooltipDirective currently.
                if (!this.tooltip) {
                    /** @type {?} */
                    var tooltipComponent = this.hostView.createComponent(this.factory);
                    this.tooltip = tooltipComponent.instance;
                    // Remove element when use directive https://github.com/NG-ZORRO/ng-zorro-antd/issues/1967
                    this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), tooltipComponent.location.nativeElement);
                    this.isDynamicTooltip = true;
                    /** @type {?} */
                    var properties = ['nzTitle', 'nzContent', 'nzOverlayClassName', 'nzOverlayStyle', 'nzMouseEnterDelay', 'nzMouseLeaveDelay', 'nzVisible', 'nzTrigger', 'nzPlacement'];
                    properties.forEach(function (property) { return _this.updateCompValue(property, _this[property]); });
                    this.tooltip.nzVisibleChange.pipe(operators.takeUntil(this.unsubscribe$), operators.distinctUntilChanged()).subscribe(function (data) {
                        _this._visible = data;
                        _this.nzVisibleChange.emit(data);
                    });
                }
                this.tooltip.setOverlayOrigin(this);
            };
        /**
         * @return {?}
         */
        NzTooltipDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.tooltip.nzTrigger === 'hover') {
                    /** @type {?} */
                    var overlayElement_1 = void 0;
                    this.renderer.listen(this.elementRef.nativeElement, 'mouseenter', function () { return _this.delayEnterLeave(true, true, _this.tooltip.nzMouseEnterDelay); });
                    this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', function () {
                        _this.delayEnterLeave(true, false, _this.tooltip.nzMouseLeaveDelay);
                        if (_this.tooltip.overlay.overlayRef && !overlayElement_1) { // NOTE: we bind events under "mouseleave" due to the overlayRef is only created after the overlay was completely shown up
                            // NOTE: we bind events under "mouseleave" due to the overlayRef is only created after the overlay was completely shown up
                            overlayElement_1 = _this.tooltip.overlay.overlayRef.overlayElement;
                            _this.renderer.listen(overlayElement_1, 'mouseenter', function () { return _this.delayEnterLeave(false, true); });
                            _this.renderer.listen(overlayElement_1, 'mouseleave', function () { return _this.delayEnterLeave(false, false); });
                        }
                    });
                }
                else if (this.tooltip.nzTrigger === 'focus') {
                    this.renderer.listen(this.elementRef.nativeElement, 'focus', function () { return _this.show(); });
                    this.renderer.listen(this.elementRef.nativeElement, 'blur', function () { return _this.hide(); });
                }
                else if (this.tooltip.nzTrigger === 'click') {
                    this.renderer.listen(this.elementRef.nativeElement, 'click', function (e) {
                        e.preventDefault();
                        _this.show();
                    });
                }
            };
        /**
         * @return {?}
         */
        NzTooltipDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        NzTooltipDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-tooltip]'
                    },] }
        ];
        /** @nocollapse */
        NzTooltipDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ViewContainerRef },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Renderer2 },
                { type: NzToolTipComponent, decorators: [{ type: i0.Optional }] }
            ];
        };
        NzTooltipDirective.propDecorators = {
            nzVisibleChange: [{ type: i0.Output }],
            nzTitle: [{ type: i0.Input, args: ['nz-tooltip',] }],
            setTitle: [{ type: i0.Input, args: ['nzTitle',] }],
            nzContent: [{ type: i0.Input }],
            nzOverlayClassName: [{ type: i0.Input }],
            nzOverlayStyle: [{ type: i0.Input }],
            nzMouseEnterDelay: [{ type: i0.Input }],
            nzMouseLeaveDelay: [{ type: i0.Input }],
            nzVisible: [{ type: i0.Input }],
            nzTrigger: [{ type: i0.Input }],
            nzPlacement: [{ type: i0.Input }],
            isOpen: [{ type: i0.HostBinding, args: ['class.ant-tooltip-open',] }]
        };
        return NzTooltipDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPopconfirmDirective = /** @class */ (function (_super) {
        __extends(NzPopconfirmDirective, _super);
        function NzPopconfirmDirective(elementRef, hostView, resolver, renderer, tooltip) {
            var _this = _super.call(this, elementRef, hostView, resolver, renderer, tooltip) || this;
            _this.subclassUnsubscribe$ = new rxjs.Subject();
            _this.factory = _this.resolver.resolveComponentFactory(NzPopconfirmComponent);
            _this._condition = false;
            _this._okType = 'primary';
            _this.nzOnCancel = new i0.EventEmitter();
            _this.nzOnConfirm = new i0.EventEmitter();
            return _this;
        }
        Object.defineProperty(NzPopconfirmDirective.prototype, "nzOkText", {
            get: /**
             * @return {?}
             */ function () {
                return this._okText;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._okText = value;
                this.updateCompValue('nzOkText', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPopconfirmDirective.prototype, "nzOkType", {
            get: /**
             * @return {?}
             */ function () {
                return this._okType;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._okType = value;
                this.updateCompValue('nzOkType', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPopconfirmDirective.prototype, "nzCancelText", {
            get: /**
             * @return {?}
             */ function () {
                return this._cancelText;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._cancelText = value;
                this.updateCompValue('nzCancelText', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzPopconfirmDirective.prototype, "nzCondition", {
            get: /**
             * @return {?}
             */ function () {
                return this._condition;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._condition = toBoolean(value);
                this.updateCompValue('nzCondition', value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzPopconfirmDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.tooltip) {
                    /** @type {?} */
                    var tooltipComponent = this.hostView.createComponent(this.factory);
                    this.tooltip = tooltipComponent.instance;
                    // Remove element when use directive https://github.com/NG-ZORRO/ng-zorro-antd/issues/1967
                    this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), tooltipComponent.location.nativeElement);
                    this.isDynamicTooltip = true;
                    /** @type {?} */
                    var properties = [
                        'nzTitle',
                        'nzContent',
                        'nzOverlayClassName',
                        'nzOverlayStyle',
                        'nzMouseEnterDelay',
                        'nzMouseLeaveDelay',
                        'nzVisible',
                        'nzTrigger',
                        'nzPlacement',
                        'nzOkText',
                        'nzOkType',
                        'nzCancelText',
                        'nzCondition'
                    ];
                    properties.forEach(function (property) { return _this.updateCompValue(property, _this[property]); });
                    this.tooltip.nzVisibleChange.pipe(operators.takeUntil(this.subclassUnsubscribe$), operators.distinctUntilChanged()).subscribe(function (data) {
                        _this._visible = data;
                        _this.nzVisibleChange.emit(data);
                    });
                    ( /** @type {?} */(this.tooltip)).nzOnCancel.pipe(operators.takeUntil(this.subclassUnsubscribe$)).subscribe(function (data) {
                        _this.nzOnCancel.emit();
                    });
                    ( /** @type {?} */(this.tooltip)).nzOnConfirm.pipe(operators.takeUntil(this.subclassUnsubscribe$)).subscribe(function (data) {
                        _this.nzOnConfirm.emit();
                    });
                }
                this.tooltip.setOverlayOrigin(this);
            };
        /**
         * @return {?}
         */
        NzPopconfirmDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subclassUnsubscribe$.next();
                this.subclassUnsubscribe$.complete();
            };
        NzPopconfirmDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-popconfirm]'
                    },] }
        ];
        /** @nocollapse */
        NzPopconfirmDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ViewContainerRef },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Renderer2 },
                { type: NzPopconfirmComponent, decorators: [{ type: i0.Optional }] }
            ];
        };
        NzPopconfirmDirective.propDecorators = {
            nzOnCancel: [{ type: i0.Output }],
            nzOnConfirm: [{ type: i0.Output }],
            nzOkText: [{ type: i0.Input }],
            nzOkType: [{ type: i0.Input }],
            nzCancelText: [{ type: i0.Input }],
            nzCondition: [{ type: i0.Input }]
        };
        return NzPopconfirmDirective;
    }(NzTooltipDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPopconfirmModule = /** @class */ (function () {
        function NzPopconfirmModule() {
        }
        NzPopconfirmModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzPopconfirmComponent, NzPopconfirmDirective],
                        exports: [NzPopconfirmComponent, NzPopconfirmDirective],
                        imports: [i3.CommonModule, NzButtonModule, i2$1.OverlayModule, NzI18nModule, NzIconModule],
                        entryComponents: [NzPopconfirmComponent]
                    },] }
        ];
        return NzPopconfirmModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPopoverComponent = /** @class */ (function (_super) {
        __extends(NzPopoverComponent, _super);
        function NzPopoverComponent(cdr) {
            var _this = _super.call(this, cdr) || this;
            _this._prefix = 'ant-popover-placement';
            return _this;
        }
        NzPopoverComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-popover',
                        animations: [fadeAnimation],
                        template: "<ng-content></ng-content>\n<ng-template\n  #overlay=\"cdkConnectedOverlay\"\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n  [cdkConnectedOverlayHasBackdrop]=\"_hasBackdrop\"\n  (backdropClick)=\"hide()\"\n  (detach)=\"hide()\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayOpen]=\"visible$ | async\">\n  <div class=\"ant-popover\" [ngClass]=\"_classMap\" [ngStyle]=\"nzOverlayStyle\" [@fadeAnimation]=\"''+(visible$ | async)\"\n    (@fadeAnimation.done)=\"_afterVisibilityAnimation($event)\">\n    <div class=\"ant-popover-content\">\n      <div class=\"ant-popover-arrow\"></div>\n      <div class=\"ant-popover-inner\">\n        <div class=\"ant-popover-title\" *ngIf=\"nzTitle\">\n          <ng-container *ngIf=\"isTitleString; else titleTemplate\">{{ nzTitle }}</ng-container>\n          <ng-template #titleTemplate>\n            <ng-template [ngTemplateOutlet]=\"nzTitle\"></ng-template>\n          </ng-template>\n        </div>\n        <div class=\"ant-popover-inner-content\">\n          <ng-container *ngIf=\"isContentString; else contentTemplate\">{{ nzContent }}</ng-container>\n          <ng-template #contentTemplate>\n            <ng-template [ngTemplateOutlet]=\"nzContent\"></ng-template>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>",
                        preserveWhitespaces: false,
                        styles: ["\n    .ant-popover {\n      position: relative;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzPopoverComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzPopoverComponent.propDecorators = {
            _title: [{ type: i0.ContentChild, args: ['neverUsedTemplate',] }],
            _content: [{ type: i0.ContentChild, args: ['nzTemplate',] }]
        };
        return NzPopoverComponent;
    }(NzToolTipComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPopoverDirective = /** @class */ (function (_super) {
        __extends(NzPopoverDirective, _super);
        function NzPopoverDirective(elementRef, hostView, resolver, renderer, tooltip) {
            var _this = _super.call(this, elementRef, hostView, resolver, renderer, tooltip) || this;
            _this.factory = _this.resolver.resolveComponentFactory(NzPopoverComponent);
            return _this;
        }
        NzPopoverDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-popover]'
                    },] }
        ];
        /** @nocollapse */
        NzPopoverDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ViewContainerRef },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Renderer2 },
                { type: NzPopoverComponent, decorators: [{ type: i0.Optional }] }
            ];
        };
        return NzPopoverDirective;
    }(NzTooltipDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzPopoverModule = /** @class */ (function () {
        function NzPopoverModule() {
        }
        NzPopoverModule.decorators = [
            { type: i0.NgModule, args: [{
                        entryComponents: [NzPopoverComponent],
                        exports: [NzPopoverDirective, NzPopoverComponent],
                        declarations: [NzPopoverDirective, NzPopoverComponent],
                        imports: [i3.CommonModule, i2$1.OverlayModule]
                    },] }
        ];
        return NzPopoverModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzProgressComponent = /** @class */ (function () {
        function NzProgressComponent() {
            this._gapDegree = 0;
            this._gapPosition = 'top';
            this._percent = 0;
            this._status = 'normal';
            this._cacheStatus = 'normal';
            this._strokeLinecap = 'round';
            this._strokeWidth = 8;
            this._size = 'default';
            this._type = 'line';
            this._format = function (percent) { return percent + "%"; };
            this.isStatusSet = false;
            this.isStrokeWidthSet = false;
            this.isFormatSet = false;
            this.isGapDegreeSet = false;
            this.isGapPositionSet = false;
            this.statusColorMap = {
                normal: '#108ee9',
                exception: '#ff5500',
                success: '#87d068'
            };
            this.nzShowInfo = true;
            this.nzWidth = 132;
            this.nzSuccessPercent = 0;
        }
        Object.defineProperty(NzProgressComponent.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = value;
                if (this.nzSize === 'small' && !this.isStrokeWidthSet) {
                    this._strokeWidth = 6;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzFormat", {
            get: /**
             * @return {?}
             */ function () {
                return this._format;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._format = value;
                    this.isFormatSet = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzPercent", {
            get: /**
             * @return {?}
             */ function () {
                return this._percent;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._percent = value;
                if (isNotNil(value)) {
                    /** @type {?} */
                    var fillAll = parseInt(value.toString(), 10) >= 100;
                    if (fillAll && !this.isStatusSet) {
                        this._status = 'success';
                    }
                    else {
                        this._status = this._cacheStatus;
                    }
                    this.updatePathStyles();
                    this.updateIcon();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzStrokeWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this._strokeWidth;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._strokeWidth = value;
                    this.isStrokeWidthSet = true;
                    this.updatePathStyles();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzStatus", {
            get: /**
             * @return {?}
             */ function () {
                return this._status;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._status = value;
                    this._cacheStatus = value;
                    this.isStatusSet = true;
                    this.updateIcon();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzType", {
            get: /**
             * @return {?}
             */ function () {
                return this._type;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._type = value;
                if (!this.isStrokeWidthSet) {
                    if (this.nzType !== 'line') {
                        this._strokeWidth = 6;
                    }
                }
                if (this.nzType === 'dashboard') {
                    if (!this.isGapPositionSet) {
                        this._gapPosition = 'bottom';
                    }
                    if (!this.isGapDegreeSet) {
                        this._gapDegree = 75;
                    }
                }
                this.updateIcon();
                this.updatePathStyles();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzGapDegree", {
            get: /**
             * @return {?}
             */ function () {
                return this._gapDegree;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._gapDegree = value;
                    this.isGapDegreeSet = true;
                    this.updatePathStyles();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzGapPosition", {
            get: /**
             * @return {?}
             */ function () {
                return this._gapPosition;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._gapPosition = value;
                    this.isGapPositionSet = true;
                    this.updatePathStyles();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "nzStrokeLinecap", {
            get: /**
             * @return {?}
             */ function () {
                return this._strokeLinecap;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._strokeLinecap = value;
                this.updatePathStyles();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzProgressComponent.prototype, "isCirCleStyle", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzType === 'circle' || this.nzType === 'dashboard';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzProgressComponent.prototype.updatePathStyles = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var radius = 50 - (this.nzStrokeWidth / 2);
                /** @type {?} */
                var beginPositionX = 0;
                /** @type {?} */
                var beginPositionY = -radius;
                /** @type {?} */
                var endPositionX = 0;
                /** @type {?} */
                var endPositionY = radius * -2;
                switch (this.nzGapPosition) {
                    case 'left':
                        beginPositionX = -radius;
                        beginPositionY = 0;
                        endPositionX = radius * 2;
                        endPositionY = 0;
                        break;
                    case 'right':
                        beginPositionX = radius;
                        beginPositionY = 0;
                        endPositionX = radius * -2;
                        endPositionY = 0;
                        break;
                    case 'bottom':
                        beginPositionY = radius;
                        endPositionY = radius * 2;
                        break;
                    default:
                }
                this.pathString = "M 50,50 m " + beginPositionX + "," + beginPositionY + "\n     a " + radius + "," + radius + " 0 1 1 " + endPositionX + "," + -endPositionY + "\n     a " + radius + "," + radius + " 0 1 1 " + -endPositionX + "," + endPositionY;
                /** @type {?} */
                var len = Math.PI * 2 * radius;
                this.trailPathStyle = {
                    strokeDasharray: len - this.nzGapDegree + "px " + len + "px",
                    strokeDashoffset: "-" + this.nzGapDegree / 2 + "px",
                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'
                };
                this.strokePathStyle = {
                    strokeDasharray: (this.nzPercent / 100) * (len - this.nzGapDegree) + "px " + len + "px",
                    strokeDashoffset: "-" + this.nzGapDegree / 2 + "px",
                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s' // eslint-disable-line
                };
            };
        /**
         * @return {?}
         */
        NzProgressComponent.prototype.updateIcon = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var isCircle = (this.nzType === 'circle' || this.nzType === 'dashboard');
                /** @type {?} */
                var ret = '';
                if (this.nzStatus === 'success') {
                    ret = 'check';
                }
                if (this.nzStatus === 'exception') {
                    ret = 'close';
                }
                if (ret) {
                    if (!isCircle) {
                        ret += '-circle';
                        this.iconTheme = 'fill';
                    }
                    else {
                        this.iconTheme = 'outline';
                    }
                }
                this.icon = ret;
            };
        /**
         * @return {?}
         */
        NzProgressComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.updatePathStyles();
                this.updateIcon();
            };
        NzProgressComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-progress',
                        preserveWhitespaces: false,
                        template: "<ng-template #progressInfoTemplate>\n  <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n    <ng-container *ngIf=\"(nzStatus=='exception')||(nzStatus=='success')&&(!isFormatSet); else formatTemplate\">\n      <!-- Theme is handled in type here. -->\n      <i nz-icon [type]=\"icon\" [theme]=\"iconTheme\"></i>\n    </ng-container>\n    <ng-template #formatTemplate>\n      {{ nzFormat(nzPercent) }}\n    </ng-template>\n  </span>\n</ng-template>\n<div [ngClass]=\"'ant-progress ant-progress-status-'+nzStatus\"\n  [class.ant-progress-line]=\"nzType=='line'\"\n  [class.ant-progress-small]=\"nzSize=='small'\"\n  [class.ant-progress-show-info]=\"nzShowInfo\"\n  [class.ant-progress-circle]=\"isCirCleStyle\">\n  <div *ngIf=\"nzType=='line'\">\n    <div class=\"ant-progress-outer\">\n      <div class=\"ant-progress-inner\">\n        <div class=\"ant-progress-bg\"\n          [style.width.%]=\"nzPercent\"\n          [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n          [style.background]=\"nzStrokeColor\"\n          [style.height.px]=\"nzStrokeWidth\">\n        </div>\n        <div class=\"ant-progress-success-bg\"\n          [style.width.%]=\"nzSuccessPercent\"\n          [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n          [style.height.px]=\"nzStrokeWidth\"></div>\n      </div>\n    </div>\n    <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n  </div>\n  <div\n    [style.width.px]=\"this.nzWidth\"\n    [style.height.px]=\"this.nzWidth\"\n    [style.fontSize.px]=\"this.nzWidth*0.15+6\"\n    class=\"ant-progress-inner\"\n    *ngIf=\"isCirCleStyle\">\n    <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n      <path\n        class=\"ant-progress-circle-trail\"\n        stroke=\"#f3f3f3\"\n        fill-opacity=\"0\"\n        [attr.stroke-width]=\"nzStrokeWidth\"\n        [ngStyle]=\"trailPathStyle\"\n        [attr.d]=\"pathString\">\n      </path>\n      <path\n        class=\"ant-progress-circle-path\"\n        [attr.d]=\"pathString\"\n        [attr.stroke-linecap]=\"nzStrokeLinecap\"\n        fill-opacity=\"0\"\n        [attr.stroke]=\"nzStrokeColor || statusColorMap[nzStatus]\"\n        [attr.stroke-width]=\"nzPercent?nzStrokeWidth:0\"\n        [ngStyle]=\"strokePathStyle\">\n      </path>\n    </svg>\n    <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n  </div>\n</div>"
                    }] }
        ];
        NzProgressComponent.propDecorators = {
            nzShowInfo: [{ type: i0.Input }],
            nzWidth: [{ type: i0.Input }],
            nzSuccessPercent: [{ type: i0.Input }],
            nzStrokeColor: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzFormat: [{ type: i0.Input }],
            nzPercent: [{ type: i0.Input }],
            nzStrokeWidth: [{ type: i0.Input }],
            nzStatus: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }],
            nzGapDegree: [{ type: i0.Input }],
            nzGapPosition: [{ type: i0.Input }],
            nzStrokeLinecap: [{ type: i0.Input }]
        };
        return NzProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzProgressModule = /** @class */ (function () {
        function NzProgressModule() {
        }
        NzProgressModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [NzProgressComponent],
                        declarations: [NzProgressComponent],
                        imports: [i3.CommonModule, NzIconModule]
                    },] }
        ];
        return NzProgressModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRateComponent = /** @class */ (function () {
        function NzRateComponent(renderer) {
            this.renderer = renderer;
            this._allowClear = true;
            this._allowHalf = false;
            this._disabled = false;
            this._count = 5;
            this._value = 0;
            this._autoFocus = false;
            this.nzOnBlur = new i0.EventEmitter();
            this.nzOnFocus = new i0.EventEmitter();
            this.nzOnKeyDown = new i0.EventEmitter();
            this.nzOnHoverChange = new i0.EventEmitter();
            this.prefixCls = 'ant-rate';
            this.isInit = false;
            this.hasHalf = false;
            this.innerPrefixCls = this.prefixCls + "-star";
            this.starArray = [];
            this.hoverValue = 0;
            this.isFocused = false;
            this.floatReg = /^\d+(\.\d+)?$/;
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
        }
        Object.defineProperty(NzRateComponent.prototype, "nzAutoFocus", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoFocus;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoFocus = toBoolean(value);
                this.updateAutoFocus();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzRateComponent.prototype, "nzCount", {
            get: /**
             * @return {?}
             */ function () {
                return this._count;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._count === value) {
                    return;
                }
                this._count = value;
                this.updateStarArray();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzRateComponent.prototype, "nzAllowHalf", {
            get: /**
             * @return {?}
             */ function () {
                return this._allowHalf;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._allowHalf = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzRateComponent.prototype, "nzAllowClear", {
            get: /**
             * @return {?}
             */ function () {
                return this._allowClear;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._allowClear = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzRateComponent.prototype, "nzValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} input
             * @return {?}
             */ function (input) {
                /** @type {?} */
                var value = input;
                if (this._value === value) {
                    return;
                }
                this._value = value;
                if (this.floatReg.test(value.toString())) {
                    value += 0.5;
                    this.hasHalf = true;
                }
                this.hoverValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzRateComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzRateComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-disabled"] = this.nzDisabled,
                    _a);
            };
        /**
         * @return {?}
         */
        NzRateComponent.prototype.updateAutoFocus = /**
         * @return {?}
         */
            function () {
                if (this.isInit && !this.nzDisabled) {
                    if (this.nzAutoFocus) {
                        this.renderer.setAttribute(this.ulElement.nativeElement, 'autofocus', 'autofocus');
                    }
                    else {
                        this.renderer.removeAttribute(this.ulElement.nativeElement, 'autofocus');
                    }
                }
            };
        /**
         * @param {?} e
         * @param {?} index
         * @param {?} isFull
         * @return {?}
         */
        NzRateComponent.prototype.clickRate = /**
         * @param {?} e
         * @param {?} index
         * @param {?} isFull
         * @return {?}
         */
            function (e, index, isFull) {
                e.stopPropagation();
                if (this.nzDisabled) {
                    return;
                }
                this.hasHalf = !isFull && this.nzAllowHalf;
                /** @type {?} */
                var actualValue = index + 1;
                this.hoverValue = actualValue;
                if (this.hasHalf) {
                    actualValue -= 0.5;
                }
                if (this.nzValue === actualValue) {
                    if (this.nzAllowClear) {
                        this.nzValue = 0;
                        this.onChange(this.nzValue);
                    }
                }
                else {
                    this.nzValue = actualValue;
                    this.onChange(this.nzValue);
                }
            };
        /**
         * @param {?} e
         * @param {?} index
         * @param {?} isFull
         * @return {?}
         */
        NzRateComponent.prototype.hoverRate = /**
         * @param {?} e
         * @param {?} index
         * @param {?} isFull
         * @return {?}
         */
            function (e, index, isFull) {
                e.stopPropagation();
                if (this.nzDisabled) {
                    return;
                }
                /** @type {?} */
                var isHalf = !isFull && this.nzAllowHalf;
                if (this.hoverValue === index + 1 && isHalf === this.hasHalf) {
                    return;
                }
                this.hoverValue = index + 1;
                this.nzOnHoverChange.emit(this.hoverValue);
                this.hasHalf = isHalf;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzRateComponent.prototype.leaveRate = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.stopPropagation();
                /** @type {?} */
                var oldVal = this.nzValue;
                if (this.floatReg.test(oldVal.toString())) {
                    oldVal += 0.5;
                    this.hasHalf = true;
                }
                this.hoverValue = oldVal;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzRateComponent.prototype.onFocus = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.isFocused = true;
                this.nzOnFocus.emit(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzRateComponent.prototype.onBlur = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.isFocused = false;
                this.nzOnBlur.emit(e);
            };
        /**
         * @return {?}
         */
        NzRateComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.ulElement.nativeElement.focus();
            };
        /**
         * @return {?}
         */
        NzRateComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.ulElement.nativeElement.blur();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzRateComponent.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var code = e.code;
                if ((code === 'ArrowRight' || e.keyCode === keycodes.RIGHT_ARROW) && (this.nzValue < this.nzCount)) {
                    if (this.nzAllowHalf) {
                        this.nzValue += 0.5;
                    }
                    else {
                        this.nzValue += 1;
                    }
                    this.onChange(this.nzValue);
                }
                else if ((code === 'ArrowLeft' || e.keyCode === keycodes.LEFT_ARROW) && (this.nzValue > 0)) {
                    if (this.nzAllowHalf) {
                        this.nzValue -= 0.5;
                    }
                    else {
                        this.nzValue -= 1;
                    }
                    this.onChange(this.nzValue);
                }
                this.nzOnKeyDown.emit(e);
                e.preventDefault();
            };
        /**
         * @param {?} i
         * @return {?}
         */
        NzRateComponent.prototype.setClasses = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                var _a;
                return _a = {},
                    _a[this.innerPrefixCls] = true,
                    _a[this.innerPrefixCls + "-full"] = (i + 1 < this.hoverValue) || (!this.hasHalf) && (i + 1 === this.hoverValue),
                    _a[this.innerPrefixCls + "-half"] = (this.hasHalf) && (i + 1 === this.hoverValue),
                    _a[this.innerPrefixCls + "-active"] = (this.hasHalf) && (i + 1 === this.hoverValue),
                    _a[this.innerPrefixCls + "-zero"] = (i + 1 > this.hoverValue),
                    _a[this.innerPrefixCls + "-focused"] = (this.hasHalf) && (i + 1 === this.hoverValue) && this.isFocused,
                    _a;
            };
        /**
         * @return {?}
         */
        NzRateComponent.prototype.updateStarArray = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var index = 0;
                this.starArray = [];
                while (index < this.nzCount) {
                    this.starArray.push(index++);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzRateComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.nzValue = value || 0;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzRateComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzRateComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzRateComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
            };
        /**
         * @return {?}
         */
        NzRateComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
                this.updateStarArray();
            };
        /**
         * @return {?}
         */
        NzRateComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.isInit = true;
            };
        NzRateComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-rate',
                        preserveWhitespaces: false,
                        template: "<ng-template #defaultCharacter>\n  <i nz-icon [type]=\"'star'\" [theme]=\"'fill'\"></i>\n</ng-template>\n<ul\n  #ulElement\n  [ngClass]=\"classMap\"\n  (mouseleave)=\"leaveRate($event)\"\n  (focus)=\"onFocus($event)\"\n  (blur)=\"onBlur($event)\"\n  (keydown)=\"onKeyDown($event)\"\n  [tabindex]=\"nzDisabled?-1:1\">\n  <li *ngFor=\"let star of starArray\"\n    [ngClass]=\"setClasses(star)\"\n    (mouseover)=\"hoverRate($event, star, true)\"\n    (click)=\"clickRate($event, star, true)\">\n    <div class=\"ant-rate-star-first\" (mouseover)=\"hoverRate($event, star, false)\" (click)=\"clickRate($event, star, false)\">\n      <ng-template [ngTemplateOutlet]=\"nzCharacter||defaultCharacter\"></ng-template>\n    </div>\n    <div class=\"ant-rate-star-second\" (mouseover)=\"hoverRate($event, star, true)\" (click)=\"clickRate($event, star, true)\">\n      <ng-template [ngTemplateOutlet]=\"nzCharacter||defaultCharacter\"></ng-template>\n    </div>\n  </li>\n</ul>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzRateComponent; }),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzRateComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 }
            ];
        };
        NzRateComponent.propDecorators = {
            nzCharacter: [{ type: i0.Input }],
            nzOnBlur: [{ type: i0.Output }],
            nzOnFocus: [{ type: i0.Output }],
            nzOnKeyDown: [{ type: i0.Output }],
            nzOnHoverChange: [{ type: i0.Output }],
            ulElement: [{ type: i0.ViewChild, args: ['ulElement',] }],
            nzAutoFocus: [{ type: i0.Input }],
            nzCount: [{ type: i0.Input }],
            nzAllowHalf: [{ type: i0.Input }],
            nzAllowClear: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }]
        };
        return NzRateComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzRateModule = /** @class */ (function () {
        function NzRateModule() {
        }
        NzRateModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [NzRateComponent],
                        declarations: [NzRateComponent],
                        imports: [i3.CommonModule, NzIconModule]
                    },] }
        ];
        return NzRateModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSkeletonComponent = /** @class */ (function () {
        function NzSkeletonComponent(cdr) {
            this.cdr = cdr;
            this.nzActive = false;
            this.nzLoading = true;
            this.nzTitle = true;
            this.nzAvatar = false;
            this.nzParagraph = true;
            this.rowsList = [];
            this.widthList = [];
        }
        /**
         * @param {?=} value
         * @return {?}
         */
        NzSkeletonComponent.prototype.toCSSUnit = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (value === void 0) {
                    value = '';
                }
                return toCssPixel(value);
            };
        /**
         * @return {?}
         */
        NzSkeletonComponent.prototype.getTitleProps = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var hasAvatar = !!this.nzAvatar;
                /** @type {?} */
                var hasParagraph = !!this.nzParagraph;
                /** @type {?} */
                var width;
                if (!hasAvatar && hasParagraph) {
                    width = '38%';
                }
                else if (hasAvatar && hasParagraph) {
                    width = '50%';
                }
                return __assign({ width: width }, this.getProps(this.nzTitle));
            };
        /**
         * @return {?}
         */
        NzSkeletonComponent.prototype.getAvatarProps = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var shape = (!!this.nzTitle && !this.nzParagraph) ? 'square' : 'circle';
                /** @type {?} */
                var size = 'large';
                return __assign({ shape: shape, size: size }, this.getProps(this.nzAvatar));
            };
        /**
         * @return {?}
         */
        NzSkeletonComponent.prototype.getParagraphProps = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var hasAvatar = !!this.nzAvatar;
                /** @type {?} */
                var hasTitle = !!this.nzTitle;
                /** @type {?} */
                var basicProps = {};
                // Width
                if (!hasAvatar || !hasTitle) {
                    basicProps.width = '61%';
                }
                // Rows
                if (!hasAvatar && hasTitle) {
                    basicProps.rows = 3;
                }
                else {
                    basicProps.rows = 2;
                }
                return __assign({}, basicProps, this.getProps(this.nzParagraph));
            };
        /**
         * @template T
         * @param {?} prop
         * @return {?}
         */
        NzSkeletonComponent.prototype.getProps = /**
         * @template T
         * @param {?} prop
         * @return {?}
         */
            function (prop) {
                return prop && typeof prop === 'object' ? prop : {};
            };
        /**
         * @return {?}
         */
        NzSkeletonComponent.prototype.getWidthList = /**
         * @return {?}
         */
            function () {
                var _a = this.paragraph, width = _a.width, rows = _a.rows;
                /** @type {?} */
                var widthList = [];
                if (width && Array.isArray(width)) {
                    widthList = width;
                }
                else if (width && !Array.isArray(width)) {
                    widthList = [];
                    widthList[rows - 1] = width;
                }
                return widthList;
            };
        /**
         * @return {?}
         */
        NzSkeletonComponent.prototype.updateProps = /**
         * @return {?}
         */
            function () {
                this.title = this.getTitleProps();
                this.avatar = this.getAvatarProps();
                this.paragraph = this.getParagraphProps();
                this.rowsList = __spread(Array(this.paragraph.rows));
                this.widthList = this.getWidthList();
                this.cdr.markForCheck();
            };
        /**
         * @return {?}
         */
        NzSkeletonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.updateProps();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzSkeletonComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzTitle"] || changes["nzAvatar"] || changes["nzParagraph"]) {
                    this.updateProps();
                }
            };
        NzSkeletonComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: 'nz-skeleton',
                        template: "<ng-container *ngIf=\"nzLoading\">\n  <div class=\"ant-skeleton-header\">\n    <span\n      *ngIf=\"!!nzAvatar\"\n      class=\"ant-skeleton-avatar\"\n      [class.ant-skeleton-avatar-lg]=\"avatar.size === 'large'\"\n      [class.ant-skeleton-avatar-sm]=\"avatar.size === 'small'\"\n      [class.ant-skeleton-avatar-circle]=\"avatar.shape === 'circle'\"\n      [class.ant-skeleton-avatar-square]=\"avatar.shape === 'square'\">\n    </span>\n  </div>\n  <div class=\"ant-skeleton-content\">\n    <h3 *ngIf=\"!!nzTitle\" class=\"ant-skeleton-title\" [style.width]=\"toCSSUnit(title.width)\"></h3>\n    <ul *ngIf=\"!!nzParagraph\" class=\"ant-skeleton-paragraph\">\n      <li *ngFor=\"let row of rowsList; let i=index\" [style.width]=\"toCSSUnit(widthList[i])\">\n      </li>\n    </ul>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"!nzLoading\">\n  <ng-content></ng-content>\n</ng-container>",
                        host: {
                            '[class.ant-skeleton]': 'true',
                            '[class.ant-skeleton-with-avatar]': '!!nzAvatar',
                            '[class.ant-skeleton-active]': 'nzActive'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzSkeletonComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzSkeletonComponent.propDecorators = {
            nzActive: [{ type: i0.Input }],
            nzLoading: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzAvatar: [{ type: i0.Input }],
            nzParagraph: [{ type: i0.Input }]
        };
        return NzSkeletonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSkeletonModule = /** @class */ (function () {
        function NzSkeletonModule() {
        }
        NzSkeletonModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzSkeletonComponent],
                        imports: [i3.CommonModule],
                        exports: [NzSkeletonComponent]
                    },] }
        ];
        return NzSkeletonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzToolTipModule = /** @class */ (function () {
        function NzToolTipModule() {
        }
        NzToolTipModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzToolTipComponent, NzTooltipDirective],
                        exports: [NzToolTipComponent, NzTooltipDirective],
                        imports: [i3.CommonModule, i2$1.OverlayModule],
                        entryComponents: [NzToolTipComponent]
                    },] }
        ];
        return NzToolTipModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSliderService = /** @class */ (function () {
        function NzSliderService() {
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NzSliderService.prototype.pauseEvent = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.stopPropagation();
                e.preventDefault();
            };
        /**
         * @param {?} num
         * @return {?}
         */
        NzSliderService.prototype.getPrecision = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var numStr = num.toString();
                /** @type {?} */
                var dotIndex = numStr.indexOf('.');
                return dotIndex >= 0 ? numStr.length - dotIndex - 1 : 0;
            };
        /**
         * @template T
         * @param {?} arr
         * @return {?}
         */
        NzSliderService.prototype.cloneArray = /**
         * @template T
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return arr.slice();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzSliderService.prototype.isNotTouchEvent = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return !e.touches || e.touches.length > 1 ||
                    (e.type.toLowerCase() === 'touchend' && e.touches.length > 0);
            };
        // convert value to offset in percent
        /**
         * @param {?} min
         * @param {?} max
         * @param {?} value
         * @return {?}
         */
        NzSliderService.prototype.valueToOffset = /**
         * @param {?} min
         * @param {?} max
         * @param {?} value
         * @return {?}
         */
            function (min, max, value) {
                return (value - min) / (max - min) * 100;
            };
        /**
         * @param {?} num
         * @param {?} min
         * @param {?} max
         * @return {?}
         */
        NzSliderService.prototype.correctNumLimit = /**
         * @param {?} num
         * @param {?} min
         * @param {?} max
         * @return {?}
         */
            function (num, min, max) {
                /** @type {?} */
                var res = +num;
                if (isNaN(res)) {
                    return min;
                }
                if (num < min) {
                    res = min;
                }
                else if (num > max) {
                    res = max;
                }
                return res;
            };
        /**
         * get the offset of an element relative to the document (Reference from jquery's offset())
         * @param elem HTMLElement ref
         */
        /**
         * get the offset of an element relative to the document (Reference from jquery's offset())
         * @param {?} elem HTMLElement ref
         * @return {?}
         */
        NzSliderService.prototype.getElementOffset = /**
         * get the offset of an element relative to the document (Reference from jquery's offset())
         * @param {?} elem HTMLElement ref
         * @return {?}
         */
            function (elem) {
                // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                // Support: IE <=11 only
                // Running getBoundingClientRect on a
                // disconnected node in IE throws an error
                if (!elem.getClientRects().length) {
                    return { top: 0, left: 0 };
                }
                /** @type {?} */
                var rect = elem.getBoundingClientRect();
                /** @type {?} */
                var win = elem.ownerDocument.defaultView;
                return {
                    top: rect.top + win.pageYOffset,
                    left: rect.left + win.pageXOffset
                };
            };
        NzSliderService.decorators = [
            { type: i0.Injectable }
        ];
        return NzSliderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SliderHandle = /** @class */ (function () {
        function SliderHandle() {
        }
        return SliderHandle;
    }());
    var NzSliderComponent = /** @class */ (function () {
        // |--------------------------------------------------------------------------------------------
        // | Lifecycle hooks
        // |--------------------------------------------------------------------------------------------
        function NzSliderComponent(utils) {
            this.utils = utils;
            // Debugging
            this.nzDebugId = null;
            // Static configurations (properties that can only specify once)
            this.nzStep = 1;
            this.nzMarks = null;
            this.nzMin = 0;
            this.nzMax = 100;
            this.nzDefaultValue = null;
            this.nzOnAfterChange = new i0.EventEmitter();
            this._disabled = false;
            this._dots = false;
            this._included = true;
            this._range = false;
            this._vertical = false;
            this.value = null; // CORE value state
            this.cacheSliderStart = null;
            this.cacheSliderLength = null;
            this.prefixCls = 'ant-slider';
            this.activeValueIndex = null; // Current activated handle's index ONLY for range=true
            this.track = { offset: null, length: null }; // Track's offset and length
            this.bounds = { lower: null, upper: null }; // now for nz-slider-step
            this.onTouched = function () {
            } // onTouch function registered via registerOnTouch (ControlValueAccessor).
            ; // onTouch function registered via registerOnTouch (ControlValueAccessor).
            this.isDragging = false; // Current dragging state
        }
        Object.defineProperty(NzSliderComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            // Dynamic property settings
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderComponent.prototype, "nzVertical", {
            get: /**
             * @return {?}
             */ function () {
                return this._vertical;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._vertical = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderComponent.prototype, "nzRange", {
            get: /**
             * @return {?}
             */ function () {
                return this._range;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._range = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderComponent.prototype, "nzDots", {
            get: /**
             * @return {?}
             */ function () {
                return this._dots;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._dots = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderComponent.prototype, "nzIncluded", {
            get: /**
             * @return {?}
             */ function () {
                return this._included;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._included = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        // |--------------------------------------------------------------------------------------------
        // | value accessors & ngModel accessors
        // |--------------------------------------------------------------------------------------------
        /**
         * @param {?} val
         * @param {?=} isWriteValue
         * @return {?}
         */
        NzSliderComponent.prototype.setValue = /**
         * @param {?} val
         * @param {?=} isWriteValue
         * @return {?}
         */
            function (val, isWriteValue) {
                if (isWriteValue === void 0) {
                    isWriteValue = false;
                }
                if (isWriteValue) { // [ngModel-writeValue]: Formatting before setting value, always update current value, but trigger onValueChange ONLY when the "formatted value" not equals "input value"
                    // [ngModel-writeValue]: Formatting before setting value, always update current value, but trigger onValueChange ONLY when the "formatted value" not equals "input value"
                    this.value = this.formatValue(val);
                    this.log("[ngModel:setValue/writeValue]Update track & handles");
                    this.updateTrackAndHandles();
                    // if (!this.isValueEqual(this.value, val)) {
                    //   this.log(`[ngModel:setValue/writeValue]onValueChange`, val);
                    //   if (this.onValueChange) { // NOTE: onValueChange will be unavailable when writeValue() called at the first time
                    //     this.onValueChange(this.value);
                    //   }
                    // }
                }
                else { // [Normal]: setting value, ONLY check changed, then update and trigger onValueChange
                    // [Normal]: setting value, ONLY check changed, then update and trigger onValueChange
                    if (!this.isValueEqual(this.value, val)) {
                        this.value = val;
                        this.log("[Normal:setValue]Update track & handles");
                        this.updateTrackAndHandles();
                        this.log("[Normal:setValue]onValueChange", val);
                        if (this.onValueChange) { // NOTE: onValueChange will be unavailable when writeValue() called at the first time
                            // NOTE: onValueChange will be unavailable when writeValue() called at the first time
                            this.onValueChange(this.value);
                        }
                    }
                }
            };
        /**
         * @param {?=} cloneAndSort
         * @return {?}
         */
        NzSliderComponent.prototype.getValue = /**
         * @param {?=} cloneAndSort
         * @return {?}
         */
            function (cloneAndSort) {
                if (cloneAndSort === void 0) {
                    cloneAndSort = false;
                }
                // TODO: using type guard, remove type cast
                if (cloneAndSort && this.nzRange) { // clone & sort range values
                    // clone & sort range values
                    return this.utils.cloneArray(/** @type {?} */ (this.value)).sort(function (a, b) { return a - b; });
                }
                return this.value;
            };
        // clone & sort current value and convert them to offsets, then return the new one
        /**
         * @param {?=} value
         * @return {?}
         */
        NzSliderComponent.prototype.getValueToOffset = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                /** @type {?} */
                var normalizedValue = value;
                if (typeof normalizedValue === 'undefined') {
                    normalizedValue = this.getValue(true);
                }
                // TODO: using type guard, remove type cast
                return this.nzRange ?
                    ( /** @type {?} */(normalizedValue)).map(function (val) { return _this.valueToOffset(val); }) :
                    this.valueToOffset(/** @type {?} */ (normalizedValue));
            };
        /**
         * @param {?} val
         * @return {?}
         */
        NzSliderComponent.prototype.writeValue = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                this.log("[ngModel/writeValue]current writing value = ", val);
                this.setValue(val, true);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzSliderComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onValueChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzSliderComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzSliderComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
                this.toggleDragDisabled(isDisabled);
                this.setClassMap();
            };
        // initialize event binding, class init, etc. (called only once)
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // initial checking
                this.checkValidValue(this.nzDefaultValue); // check nzDefaultValue
                // default handles
                this.handles = this._generateHandles(this.nzRange ? 2 : 1);
                // initialize
                this.sliderDOM = this.slider.nativeElement;
                if (this.getValue() === null) {
                    this.setValue(this.formatValue(null));
                } // init with default value
                this.marksArray = this.nzMarks === null ? null : this.toMarksArray(this.nzMarks);
                // event bindings
                this.createDrag();
                // initialize drag's disabled status
                this.toggleDragDisabled(this.nzDisabled);
                // the first time to init classes
                this.setClassMap();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzSliderComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var nzDisabled = changes.nzDisabled, nzMarks = changes.nzMarks, nzRange = changes.nzRange;
                if (nzDisabled && !nzDisabled.firstChange) {
                    this.toggleDragDisabled(nzDisabled.currentValue);
                    this.setClassMap();
                }
                else if (nzMarks && !nzMarks.firstChange) {
                    this.marksArray = this.nzMarks ? this.toMarksArray(this.nzMarks) : null;
                }
                else if (nzRange && !nzRange.firstChange) {
                    this.setValue(this.formatValue(null)); // Change to default value when nzRange changed
                }
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribeDrag();
            };
        // |--------------------------------------------------------------------------------------------
        // | Basic flow functions
        // |--------------------------------------------------------------------------------------------
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-disabled"] = this.nzDisabled,
                    _a[this.prefixCls + "-vertical"] = this.nzVertical,
                    _a[this.prefixCls + "-with-marks"] = this.marksArray ? this.marksArray.length : 0,
                    _a);
            };
        // find the cloest value to be activated (only for range = true)
        /**
         * @param {?} pointerValue
         * @return {?}
         */
        NzSliderComponent.prototype.setActiveValueIndex = /**
         * @param {?} pointerValue
         * @return {?}
         */
            function (pointerValue) {
                if (this.nzRange) {
                    /** @type {?} */
                    var minimal_1 = null;
                    /** @type {?} */
                    var gap_1 = void 0;
                    /** @type {?} */
                    var activeIndex_1 = void 0;
                    // TODO: using type guard, remove type cast
                    ( /** @type {?} */(this.getValue())).forEach(function (val, index) {
                        gap_1 = Math.abs(pointerValue - val);
                        if (minimal_1 === null || gap_1 < minimal_1) {
                            minimal_1 = gap_1;
                            activeIndex_1 = index;
                        }
                    });
                    this.activeValueIndex = activeIndex_1;
                }
            };
        /**
         * @param {?} pointerValue
         * @return {?}
         */
        NzSliderComponent.prototype.setActiveValue = /**
         * @param {?} pointerValue
         * @return {?}
         */
            function (pointerValue) {
                if (this.nzRange) {
                    /** @type {?} */
                    var newValue = this.utils.cloneArray(/** @type {?} */ (this.value));
                    newValue[this.activeValueIndex] = pointerValue;
                    this.setValue(newValue);
                }
                else {
                    this.setValue(pointerValue);
                }
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.updateTrackAndHandles = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var _a, _b;
                /** @type {?} */
                var value = this.getValue();
                /** @type {?} */
                var offset = this.getValueToOffset(value);
                /** @type {?} */
                var valueSorted = this.getValue(true);
                /** @type {?} */
                var offsetSorted = this.getValueToOffset(valueSorted);
                /** @type {?} */
                var boundParts = this.nzRange ? /** @type {?} */ (valueSorted) : [0, valueSorted];
                /** @type {?} */
                var trackParts = this.nzRange ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]] : [0, offsetSorted];
                this.handles.forEach(function (handle, index) {
                    handle.offset = _this.nzRange ? offset[index] : offset;
                    handle.value = _this.nzRange ? value[index] : value;
                });
                _a = __read(boundParts, 2), this.bounds.lower = _a[0], this.bounds.upper = _a[1];
                _b = __read(trackParts, 2), this.track.offset = _b[0], this.track.length = _b[1];
            };
        /**
         * @param {?} marks
         * @return {?}
         */
        NzSliderComponent.prototype.toMarksArray = /**
         * @param {?} marks
         * @return {?}
         */
            function (marks) {
                /** @type {?} */
                var marksArray = [];
                for (var key in marks) {
                    /** @type {?} */
                    var mark = marks[key];
                    /** @type {?} */
                    var val = typeof key === 'number' ? key : parseFloat(key);
                    if (val < this.nzMin || val > this.nzMax) {
                        continue;
                    }
                    marksArray.push({ value: val, offset: this.valueToOffset(val), config: mark });
                }
                return marksArray;
            };
        // |--------------------------------------------------------------------------------------------
        // | Event listeners & bindings
        // |--------------------------------------------------------------------------------------------
        /**
         * @param {?} value
         * @return {?}
         */
        NzSliderComponent.prototype.onDragStart = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.log('[onDragStart]dragging value = ', value);
                this.toggleDragMoving(true);
                // cache DOM layout/reflow operations
                this.cacheSliderProperty();
                // trigger drag start
                this.setActiveValueIndex(value);
                this.setActiveValue(value);
                // Tooltip visibility of handles
                this._showHandleTooltip(this.nzRange ? this.activeValueIndex : 0);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzSliderComponent.prototype.onDragMove = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.log('[onDragMove]dragging value = ', value);
                // trigger drag moving
                this.setActiveValue(value);
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.onDragEnd = /**
         * @return {?}
         */
            function () {
                this.log('[onDragEnd]');
                this.toggleDragMoving(false);
                this.nzOnAfterChange.emit(this.getValue(true));
                // remove cache DOM layout/reflow operations
                this.cacheSliderProperty(true);
                // Hide all tooltip
                this._hideAllHandleTooltip();
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.createDrag = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var sliderDOM = this.sliderDOM;
                /** @type {?} */
                var orientField = this.nzVertical ? 'pageY' : 'pageX';
                /** @type {?} */
                var mouse = {
                    start: 'mousedown', move: 'mousemove', end: 'mouseup',
                    pluckKey: [orientField]
                };
                /** @type {?} */
                var touch = {
                    start: 'touchstart', move: 'touchmove', end: 'touchend',
                    pluckKey: ['touches', '0', orientField],
                    filter: function (e) { return !_this.utils.isNotTouchEvent(/** @type {?} */ (e)); }
                };
                // make observables
                [mouse, touch].forEach(function (source) {
                    var start = source.start, move = source.move, end = source.end, pluckKey = source.pluckKey, _a = source.filter, filterFunc = _a === void 0 ? (function () { return true; }) : _a;
                    // start
                    source.startPlucked$ = rxjs.fromEvent(sliderDOM, start).pipe(operators.filter(filterFunc), operators.tap(_this.utils.pauseEvent), operators.pluck.apply(void 0, __spread(pluckKey)), operators.map(function (position) { return _this.findClosestValue(position); }));
                    // end
                    source.end$ = rxjs.fromEvent(document, end);
                    // resolve move
                    source.moveResolved$ = rxjs.fromEvent(document, move).pipe(operators.filter(filterFunc), operators.tap(_this.utils.pauseEvent), operators.pluck.apply(void 0, __spread(pluckKey)), operators.distinctUntilChanged(), operators.map(function (position) { return _this.findClosestValue(position); }), operators.distinctUntilChanged(), operators.takeUntil(source.end$));
                    // merge to become moving
                    // source.move$ = source.startPlucked$.mergeMapTo(source.moveResolved$);
                });
                // merge mouse and touch observables
                this.dragstart$ = rxjs.merge(mouse.startPlucked$, touch.startPlucked$);
                // this.dragmove$ = Observable.merge(mouse.move$, touch.move$);
                this.dragmove$ = rxjs.merge(mouse.moveResolved$, touch.moveResolved$);
                this.dragend$ = rxjs.merge(mouse.end$, touch.end$);
            };
        /**
         * @param {?=} periods
         * @return {?}
         */
        NzSliderComponent.prototype.subscribeDrag = /**
         * @param {?=} periods
         * @return {?}
         */
            function (periods) {
                if (periods === void 0) {
                    periods = ['start', 'move', 'end'];
                }
                this.log('[subscribeDrag]this.dragstart$ = ', this.dragstart$);
                if (periods.indexOf('start') !== -1 && this.dragstart$ && !this.dragstart_) {
                    this.dragstart_ = this.dragstart$.subscribe(this.onDragStart.bind(this));
                }
                if (periods.indexOf('move') !== -1 && this.dragmove$ && !this.dragmove_) {
                    this.dragmove_ = this.dragmove$.subscribe(this.onDragMove.bind(this));
                }
                if (periods.indexOf('end') !== -1 && this.dragend$ && !this.dragend_) {
                    this.dragend_ = this.dragend$.subscribe(this.onDragEnd.bind(this));
                }
            };
        /**
         * @param {?=} periods
         * @return {?}
         */
        NzSliderComponent.prototype.unsubscribeDrag = /**
         * @param {?=} periods
         * @return {?}
         */
            function (periods) {
                if (periods === void 0) {
                    periods = ['start', 'move', 'end'];
                }
                this.log('[unsubscribeDrag]this.dragstart_ = ', this.dragstart_);
                if (periods.indexOf('start') !== -1 && this.dragstart_) {
                    this.dragstart_.unsubscribe();
                    this.dragstart_ = null;
                }
                if (periods.indexOf('move') !== -1 && this.dragmove_) {
                    this.dragmove_.unsubscribe();
                    this.dragmove_ = null;
                }
                if (periods.indexOf('end') !== -1 && this.dragend_) {
                    this.dragend_.unsubscribe();
                    this.dragend_ = null;
                }
            };
        /**
         * @param {?} movable
         * @return {?}
         */
        NzSliderComponent.prototype.toggleDragMoving = /**
         * @param {?} movable
         * @return {?}
         */
            function (movable) {
                /** @type {?} */
                var periods = ['move', 'end'];
                if (movable) {
                    this.isDragging = true;
                    this.subscribeDrag(periods);
                }
                else {
                    this.isDragging = false;
                    this.unsubscribeDrag(periods);
                }
            };
        /**
         * @param {?} disabled
         * @return {?}
         */
        NzSliderComponent.prototype.toggleDragDisabled = /**
         * @param {?} disabled
         * @return {?}
         */
            function (disabled) {
                if (disabled) {
                    this.unsubscribeDrag();
                }
                else {
                    this.subscribeDrag(['start']);
                }
            };
        // |--------------------------------------------------------------------------------------------
        // | Util functions (tools)
        // |--------------------------------------------------------------------------------------------
        // find the closest value depend on pointer's position
        /**
         * @param {?} position
         * @return {?}
         */
        NzSliderComponent.prototype.findClosestValue = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                /** @type {?} */
                var sliderStart = this.getSliderStartPosition();
                /** @type {?} */
                var sliderLength = this.getSliderLength();
                /** @type {?} */
                var ratio = this.utils.correctNumLimit((position - sliderStart) / sliderLength, 0, 1);
                /** @type {?} */
                var val = (this.nzMax - this.nzMin) * (this.nzVertical ? 1 - ratio : ratio) + this.nzMin;
                /** @type {?} */
                var points = (this.nzMarks === null ? [] : Object.keys(this.nzMarks).map(parseFloat));
                // push closest step
                if (this.nzStep !== null && !this.nzDots) {
                    /** @type {?} */
                    var closestOne = Math.round(val / this.nzStep) * this.nzStep;
                    points.push(closestOne);
                }
                /** @type {?} */
                var gaps = points.map(function (point) { return Math.abs(val - point); });
                /** @type {?} */
                var closest = points[gaps.indexOf(Math.min.apply(Math, __spread(gaps)))];
                // return the fixed
                return this.nzStep === null ? closest :
                    parseFloat(closest.toFixed(this.utils.getPrecision(this.nzStep)));
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzSliderComponent.prototype.valueToOffset = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return this.utils.valueToOffset(this.nzMin, this.nzMax, value);
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.getSliderStartPosition = /**
         * @return {?}
         */
            function () {
                if (this.cacheSliderStart !== null) {
                    return this.cacheSliderStart;
                }
                /** @type {?} */
                var offset = this.utils.getElementOffset(this.sliderDOM);
                return this.nzVertical ? offset.top : offset.left;
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype.getSliderLength = /**
         * @return {?}
         */
            function () {
                if (this.cacheSliderLength !== null) {
                    return this.cacheSliderLength;
                }
                /** @type {?} */
                var sliderDOM = this.sliderDOM;
                return this.nzVertical ?
                    sliderDOM.clientHeight : sliderDOM.clientWidth;
            };
        // cache DOM layout/reflow operations for performance (may not necessary?)
        /**
         * @param {?=} remove
         * @return {?}
         */
        NzSliderComponent.prototype.cacheSliderProperty = /**
         * @param {?=} remove
         * @return {?}
         */
            function (remove) {
                if (remove === void 0) {
                    remove = false;
                }
                this.cacheSliderStart = remove ? null : this.getSliderStartPosition();
                this.cacheSliderLength = remove ? null : this.getSliderLength();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzSliderComponent.prototype.formatValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                /** @type {?} */
                var res = value;
                if (!this.checkValidValue(value)) { // if empty, use default value
                    // if empty, use default value
                    res = this.nzDefaultValue === null ?
                        (this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin) : this.nzDefaultValue;
                }
                else { // format
                    // format
                    // TODO: using type guard, remove type cast
                    res = this.nzRange ?
                        ( /** @type {?} */(value)).map(function (val) { return _this.utils.correctNumLimit(val, _this.nzMin, _this.nzMax); }) :
                        this.utils.correctNumLimit(/** @type {?} */ (value), this.nzMin, this.nzMax);
                }
                return res;
            };
        // check if value is valid and throw error if value-type/range not match
        /**
         * @param {?} value
         * @return {?}
         */
        NzSliderComponent.prototype.checkValidValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var range = this.nzRange;
                if (value === null || value === undefined) {
                    return false;
                }
                /** @type {?} */
                var isArray = Array.isArray(value);
                if (!Array.isArray(value)) {
                    /** @type {?} */
                    var parsedValue = value;
                    if (typeof value !== 'number') {
                        parsedValue = parseFloat(value);
                    }
                    if (isNaN(parsedValue)) {
                        return false;
                    } // it's an invalid value, just return
                }
                if (isArray !== !!range) { // value type not match
                    // value type not match
                    throw new Error("The \"nzRange\" can't match the \"nzValue\"'s type, please check these properties: \"nzRange\", \"nzValue\", \"nzDefaultValue\".");
                }
                return true;
            };
        /**
         * @param {?} value
         * @param {?} val
         * @return {?}
         */
        NzSliderComponent.prototype.isValueEqual = /**
         * @param {?} value
         * @param {?} val
         * @return {?}
         */
            function (value, val) {
                if (typeof value !== typeof val) {
                    return false;
                }
                if (Array.isArray(value)) {
                    /** @type {?} */
                    var len = value.length;
                    for (var i = 0; i < len; i++) {
                        if (value[i] !== val[i]) {
                            return false;
                        }
                    }
                    return true;
                }
                else {
                    return value === val;
                }
            };
        // print debug info
        // TODO: should not kept in component
        /* tslint:disable-next-line:no-any */
        /**
         * @param {...?} messages
         * @return {?}
         */
        NzSliderComponent.prototype.log = /**
         * @param {...?} messages
         * @return {?}
         */
            function () {
                var messages = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    messages[_i] = arguments[_i];
                }
                if (this.nzDebugId !== null) {
                    /** @type {?} */
                    var args = ["[nz-slider][#" + this.nzDebugId + "] "].concat(Array.prototype.slice.call(arguments));
                    console.log.apply(null, args);
                }
            };
        /**
         * @param {?=} handleIndex
         * @return {?}
         */
        NzSliderComponent.prototype._showHandleTooltip = /**
         * @param {?=} handleIndex
         * @return {?}
         */
            function (handleIndex) {
                var _this = this;
                if (handleIndex === void 0) {
                    handleIndex = 0;
                }
                this.handles.forEach(function (handle, index) {
                    _this.handles[index].active = index === handleIndex;
                });
            };
        /**
         * @return {?}
         */
        NzSliderComponent.prototype._hideAllHandleTooltip = /**
         * @return {?}
         */
            function () {
                this.handles.forEach(function (handle) { return handle.active = false; });
            };
        /**
         * @param {?} amount
         * @return {?}
         */
        NzSliderComponent.prototype._generateHandles = /**
         * @param {?} amount
         * @return {?}
         */
            function (amount) {
                /** @type {?} */
                var handles = [];
                for (var i = 0; i < amount; i++) {
                    handles.push({ offset: null, value: null, active: false });
                }
                return handles;
            };
        NzSliderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-slider',
                        preserveWhitespaces: false,
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzSliderComponent; }),
                                multi: true
                            }],
                        template: "<div #slider [ngClass]=\"classMap\">\n  <div class=\"ant-slider-rail\"></div>\n  <nz-slider-track\n    nzClassName=\"{{prefixCls}}-track\"\n    [nzVertical]=\"nzVertical\"\n    [nzIncluded]=\"nzIncluded\"\n    [nzOffset]=\"track.offset\"\n    [nzLength]=\"track.length\"\n  ></nz-slider-track>\n  <nz-slider-step *ngIf=\"marksArray\"\n    nzPrefixCls=\"{{prefixCls}}\"\n    [nzVertical]=\"nzVertical\"\n    [nzLowerBound]=\"bounds.lower\"\n    [nzUpperBound]=\"bounds.upper\"\n    [nzMarksArray]=\"marksArray\"\n    [nzIncluded]=\"nzIncluded\"\n  ></nz-slider-step>\n  <nz-slider-handle\n    *ngFor=\"let handle of handles;\"\n    nzClassName=\"{{prefixCls}}-handle\"\n    [nzVertical]=\"nzVertical\"\n    [nzOffset]=\"handle.offset\"\n    [nzValue]=\"handle.value\"\n    [nzActive]=\"handle.active\"\n    [nzTipFormatter]=\"nzTipFormatter\"\n  ></nz-slider-handle>\n  <nz-slider-marks *ngIf=\"marksArray\"\n    nzClassName=\"{{prefixCls}}-mark\"\n    [nzVertical]=\"nzVertical\"\n    [nzMin]=\"nzMin\"\n    [nzMax]=\"nzMax\"\n    [nzLowerBound]=\"bounds.lower\"\n    [nzUpperBound]=\"bounds.upper\"\n    [nzMarksArray]=\"marksArray\"\n    [nzIncluded]=\"nzIncluded\"\n  ></nz-slider-marks>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzSliderComponent.ctorParameters = function () {
            return [
                { type: NzSliderService }
            ];
        };
        NzSliderComponent.propDecorators = {
            nzDebugId: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzStep: [{ type: i0.Input }],
            nzMarks: [{ type: i0.Input }],
            nzMin: [{ type: i0.Input }],
            nzMax: [{ type: i0.Input }],
            nzDefaultValue: [{ type: i0.Input }],
            nzTipFormatter: [{ type: i0.Input }],
            nzOnAfterChange: [{ type: i0.Output }],
            nzVertical: [{ type: i0.Input }],
            nzRange: [{ type: i0.Input }],
            nzDots: [{ type: i0.Input }],
            nzIncluded: [{ type: i0.Input }],
            slider: [{ type: i0.ViewChild, args: ['slider',] }]
        };
        return NzSliderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSliderHandleComponent = /** @class */ (function () {
        function NzSliderHandleComponent(_slider) {
            this._slider = _slider;
            this.style = {};
        }
        Object.defineProperty(NzSliderHandleComponent.prototype, "nzActive", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var show = toBoolean(value);
                if (this.tooltip) {
                    if (show) {
                        this.tooltip.show();
                    }
                    else {
                        this.tooltip.hide();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzSliderHandleComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzOffset"]) {
                    this._updateStyle();
                }
                if (changes["nzValue"]) {
                    this._updateTooltipTitle(); // [For tooltip]
                    this._updateTooltipPosition(); // [For tooltip]
                }
            };
        // Hover to toggle tooltip when not dragging
        /**
         * @param {?} $event
         * @return {?}
         */
        NzSliderHandleComponent.prototype.onMouseEnter = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!this._slider.isDragging) {
                    this.nzActive = true;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzSliderHandleComponent.prototype.onMouseLeave = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!this._slider.isDragging) {
                    this.nzActive = false;
                }
            };
        /**
         * @return {?}
         */
        NzSliderHandleComponent.prototype._updateTooltipTitle = /**
         * @return {?}
         */
            function () {
                // [For tooltip]
                this.tooltipTitle = this.nzTipFormatter ? this.nzTipFormatter(this.nzValue) : "" + this.nzValue;
            };
        /**
         * @return {?}
         */
        NzSliderHandleComponent.prototype._updateTooltipPosition = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // [For tooltip]
                if (this.tooltip) {
                    window.setTimeout(function () { return _this.tooltip.updatePosition(); }, 0); // MAY use ngAfterViewChecked? but this will be called so many times.
                }
            };
        /**
         * @return {?}
         */
        NzSliderHandleComponent.prototype._updateStyle = /**
         * @return {?}
         */
            function () {
                this.style[this.nzVertical ? 'bottom' : 'left'] = this.nzOffset + "%";
            };
        NzSliderHandleComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-slider-handle',
                        preserveWhitespaces: false,
                        template: "<nz-tooltip *ngIf=\"nzTipFormatter !== null\" #tooltip [nzTitle]=\"tooltipTitle\" [nzTrigger]=\"null\">\n  <div nz-tooltip [class]=\"nzClassName\" [ngStyle]=\"style\"></div>\n</nz-tooltip>\n<div *ngIf=\"nzTipFormatter === null\" [class]=\"nzClassName\" [ngStyle]=\"style\"></div>"
                    }] }
        ];
        /** @nocollapse */
        NzSliderHandleComponent.ctorParameters = function () {
            return [
                { type: NzSliderComponent }
            ];
        };
        NzSliderHandleComponent.propDecorators = {
            nzClassName: [{ type: i0.Input }],
            nzVertical: [{ type: i0.Input }],
            nzOffset: [{ type: i0.Input }],
            nzValue: [{ type: i0.Input }],
            nzTipFormatter: [{ type: i0.Input }],
            nzActive: [{ type: i0.Input }],
            tooltip: [{ type: i0.ViewChild, args: ['tooltip',] }],
            onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter', ['$event'],] }],
            onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave', ['$event'],] }]
        };
        return NzSliderHandleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSliderMarksComponent = /** @class */ (function () {
        function NzSliderMarksComponent() {
            this._vertical = false;
            this._included = false;
            // Dynamic properties
            this.nzLowerBound = null;
            this.nzUpperBound = null;
        }
        Object.defineProperty(NzSliderMarksComponent.prototype, "nzVertical", {
            get: /**
             * @return {?}
             */ function () {
                return this._vertical;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                // Required
                this._vertical = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderMarksComponent.prototype, "nzIncluded", {
            get: /**
             * @return {?}
             */ function () {
                return this._included;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._included = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzSliderMarksComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzMarksArray"]) {
                    this.buildAttrs();
                }
                if (changes["nzMarksArray"] || changes["nzLowerBound"] || changes["nzUpperBound"]) {
                    this.togglePointActive();
                }
            };
        /**
         * @param {?} index
         * @param {?} attr
         * @return {?}
         */
        NzSliderMarksComponent.prototype.trackById = /**
         * @param {?} index
         * @param {?} attr
         * @return {?}
         */
            function (index, attr) {
                return attr.id;
            };
        /**
         * @return {?}
         */
        NzSliderMarksComponent.prototype.buildAttrs = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var range = this.nzMax - this.nzMin;
                this.attrs = this.nzMarksArray.map(function (mark) {
                    var _a;
                    var value = mark.value, offset = mark.offset, config = mark.config;
                    /** @type {?} */
                    var label = config;
                    /** @type {?} */
                    var style;
                    if (_this.nzVertical) {
                        style = {
                            marginBottom: '-50%',
                            bottom: (value - _this.nzMin) / range * 100 + "%"
                        };
                    }
                    else {
                        /** @type {?} */
                        var marksCount = _this.nzMarksArray.length;
                        /** @type {?} */
                        var unit = 100 / (marksCount - 1);
                        /** @type {?} */
                        var markWidth = unit * 0.9;
                        style = {
                            width: markWidth + "%",
                            marginLeft: -markWidth / 2 + "%",
                            left: (value - _this.nzMin) / range * 100 + "%"
                        };
                    }
                    // custom configuration
                    if (typeof config === 'object') {
                        label = config.label;
                        if (config.style) {
                            style = __assign({}, style, config.style);
                        }
                    }
                    return {
                        id: value,
                        value: value,
                        offset: offset,
                        classes: (_a = {},
                            _a[_this.nzClassName + "-text"] = true,
                            _a),
                        style: style,
                        label: label
                    };
                }); // END - map
            };
        /**
         * @return {?}
         */
        NzSliderMarksComponent.prototype.togglePointActive = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.attrs && this.nzLowerBound !== null && this.nzUpperBound !== null) {
                    this.attrs.forEach(function (attr) {
                        /** @type {?} */
                        var value = attr.value;
                        /** @type {?} */
                        var isActive = (!_this.nzIncluded && value === _this.nzUpperBound) ||
                            (_this.nzIncluded && value <= _this.nzUpperBound && value >= _this.nzLowerBound);
                        attr.classes[_this.nzClassName + "-text-active"] = isActive;
                    });
                }
            };
        NzSliderMarksComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-slider-marks',
                        preserveWhitespaces: false,
                        template: "<div [class]=\"nzClassName\">\n  <span *ngFor=\"let attr of attrs; trackBy: trackById\" [ngClass]=\"attr.classes\" [ngStyle]=\"attr.style\" [innerHTML]=\"attr.label\"></span>\n</div>"
                    }] }
        ];
        NzSliderMarksComponent.propDecorators = {
            nzLowerBound: [{ type: i0.Input }],
            nzUpperBound: [{ type: i0.Input }],
            nzMarksArray: [{ type: i0.Input }],
            nzClassName: [{ type: i0.Input }],
            nzMin: [{ type: i0.Input }],
            nzMax: [{ type: i0.Input }],
            nzVertical: [{ type: i0.Input }],
            nzIncluded: [{ type: i0.Input }]
        };
        return NzSliderMarksComponent;
    }());
    var Marks = /** @class */ (function () {
        function Marks() {
        }
        return Marks;
    }());
    var MarksArray = /** @class */ (function (_super) {
        __extends(MarksArray, _super);
        function MarksArray() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MarksArray;
    }(Array));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSliderStepComponent = /** @class */ (function () {
        function NzSliderStepComponent() {
            this._vertical = false;
            this._included = false;
            // Dynamic properties
            this.nzLowerBound = null;
            this.nzUpperBound = null;
        }
        Object.defineProperty(NzSliderStepComponent.prototype, "nzVertical", {
            get: /**
             * @return {?}
             */ function () {
                return this._vertical;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                // Required
                this._vertical = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderStepComponent.prototype, "nzIncluded", {
            get: /**
             * @return {?}
             */ function () {
                return this._included;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._included = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzSliderStepComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzMarksArray"]) {
                    this.buildAttrs();
                }
                if (changes["nzMarksArray"] || changes["nzLowerBound"] || changes["nzUpperBound"]) {
                    this.togglePointActive();
                }
            };
        /**
         * @param {?} index
         * @param {?} attr
         * @return {?}
         */
        NzSliderStepComponent.prototype.trackById = /**
         * @param {?} index
         * @param {?} attr
         * @return {?}
         */
            function (index, attr) {
                return attr.id;
            };
        /**
         * @return {?}
         */
        NzSliderStepComponent.prototype.buildAttrs = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var orient = this.nzVertical ? 'bottom' : 'left';
                /** @type {?} */
                var prefixCls = this.nzPrefixCls;
                this.attrs = this.nzMarksArray.map(function (mark) {
                    var _a, _b;
                    var value = mark.value, offset = mark.offset;
                    return {
                        id: value,
                        value: value,
                        offset: offset,
                        style: (_a = {},
                            _a[orient] = offset + "%",
                            _a),
                        classes: (_b = {},
                            _b[prefixCls + "-dot"] = true,
                            _b[prefixCls + "-dot-active"] = false,
                            _b)
                    };
                });
            };
        /**
         * @return {?}
         */
        NzSliderStepComponent.prototype.togglePointActive = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.attrs && this.nzLowerBound !== null && this.nzUpperBound !== null) {
                    this.attrs.forEach(function (attr) {
                        /** @type {?} */
                        var value = attr.value;
                        /** @type {?} */
                        var isActive = (!_this.nzIncluded && value === _this.nzUpperBound) ||
                            (_this.nzIncluded && value <= _this.nzUpperBound && value >= _this.nzLowerBound);
                        attr.classes[_this.nzPrefixCls + "-dot-active"] = isActive;
                    });
                }
            };
        NzSliderStepComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-slider-step',
                        preserveWhitespaces: false,
                        template: "<div class=\"{{nzPrefixCls}}-step\">\n  <span *ngFor=\"let attr of attrs; trackBy: trackById\" [ngClass]=\"attr.classes\" [ngStyle]=\"attr.style\"></span>\n</div>"
                    }] }
        ];
        NzSliderStepComponent.propDecorators = {
            nzLowerBound: [{ type: i0.Input }],
            nzUpperBound: [{ type: i0.Input }],
            nzMarksArray: [{ type: i0.Input }],
            nzPrefixCls: [{ type: i0.Input }],
            nzVertical: [{ type: i0.Input }],
            nzIncluded: [{ type: i0.Input }]
        };
        return NzSliderStepComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSliderTrackComponent = /** @class */ (function () {
        function NzSliderTrackComponent() {
            this._vertical = false;
            this._included = false;
            this.style = {};
        }
        Object.defineProperty(NzSliderTrackComponent.prototype, "nzVertical", {
            get: /**
             * @return {?}
             */ function () {
                return this._vertical;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                // Required
                this._vertical = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzSliderTrackComponent.prototype, "nzIncluded", {
            get: /**
             * @return {?}
             */ function () {
                return this._included;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._included = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzSliderTrackComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzIncluded"]) {
                    this.style.visibility = this.nzIncluded ? 'visible' : 'hidden';
                }
                if (changes["nzVertical"] || changes["nzOffset"] || changes["nzLength"]) {
                    if (this.nzVertical) {
                        this.style.bottom = this.nzOffset + "%";
                        this.style.height = this.nzLength + "%";
                    }
                    else {
                        this.style.left = this.nzOffset + "%";
                        this.style.width = this.nzLength + "%";
                    }
                }
            };
        NzSliderTrackComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-slider-track',
                        preserveWhitespaces: false,
                        template: "<div [class]=\"nzClassName\" [ngStyle]=\"style\"></div>"
                    }] }
        ];
        NzSliderTrackComponent.propDecorators = {
            nzOffset: [{ type: i0.Input }],
            nzLength: [{ type: i0.Input }],
            nzClassName: [{ type: i0.Input }],
            nzVertical: [{ type: i0.Input }],
            nzIncluded: [{ type: i0.Input }]
        };
        return NzSliderTrackComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSliderModule = /** @class */ (function () {
        function NzSliderModule() {
        }
        NzSliderModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],
                        declarations: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],
                        imports: [i3.CommonModule, NzToolTipModule],
                        providers: [NzSliderService]
                    },] }
        ];
        return NzSliderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzStepComponent = /** @class */ (function () {
        function NzStepComponent(cdr) {
            this.cdr = cdr;
            this.isCustomStatus = false;
            this._status = 'wait';
            this.oldAPIIcon = true;
            this.isIconString = true;
            this.direction = 'horizontal';
            this.index = 0;
            this.last = false;
            this.outStatus = 'process';
            this.showProcessDot = false;
            this._currentIndex = 0;
        }
        Object.defineProperty(NzStepComponent.prototype, "nzStatus", {
            get: /**
             * @return {?}
             */ function () { return this._status; },
            set: /**
             * @param {?} status
             * @return {?}
             */ function (status) {
                this._status = status;
                this.isCustomStatus = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzStepComponent.prototype, "nzIcon", {
            get: /**
             * @return {?}
             */ function () { return this._icon; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!(value instanceof i0.TemplateRef)) {
                    this.isIconString = true;
                    this.oldAPIIcon = typeof value === 'string' && value.indexOf('anticon') > -1;
                }
                else {
                    this.isIconString = false;
                }
                this._icon = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzStepComponent.prototype, "currentIndex", {
            get: /**
             * @return {?}
             */ function () { return this._currentIndex; },
            set: /**
             * @param {?} current
             * @return {?}
             */ function (current) {
                this._currentIndex = current;
                if (!this.isCustomStatus) {
                    this._status = current > this.index
                        ? 'finish'
                        : current === this.index
                            ? this.outStatus || ''
                            : 'wait';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzStepComponent.prototype.detectChanges = /**
         * @return {?}
         */
            function () {
                this.cdr.detectChanges();
            };
        NzStepComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: 'nz-step',
                        preserveWhitespaces: false,
                        template: "<div class=\"ant-steps-item-tail\" *ngIf=\"last !== true\"></div>\n<div class=\"ant-steps-item-icon\">\n  <ng-template [ngIf]=\"!showProcessDot\">\n    <span class=\"ant-steps-icon\" *ngIf=\"nzStatus === 'finish' && !nzIcon\"><i nz-icon type=\"check\"></i></span>\n    <span class=\"ant-steps-icon\" *ngIf=\"nzStatus === 'error'\"><i nz-icon type=\"close\"></i></span>\n    <span class=\"ant-steps-icon\" *ngIf=\"(nzStatus === 'process' || nzStatus === 'wait') && !nzIcon\">{{ index + 1 }}</span>\n    <span class=\"ant-steps-icon\" *ngIf=\"nzIcon\">\n      <ng-container *ngIf=\"isIconString; else iconTemplate\">\n        <i nz-icon [type]=\"!oldAPIIcon && nzIcon\" [ngClass]=\"oldAPIIcon && nzIcon\"></i>\n      </ng-container>\n      <ng-template #iconTemplate>\n      <ng-template [ngTemplateOutlet]=\"nzIcon\"></ng-template>\n    </ng-template>\n    </span>\n  </ng-template>\n  <ng-template [ngIf]=\"showProcessDot\">\n    <span class=\"ant-steps-icon\">\n      <ng-template #processDotTemplate>\n        <span class=\"ant-steps-icon-dot\"></span>\n      </ng-template>\n      <ng-template\n        [ngTemplateOutlet]=\"customProcessTemplate||processDotTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: processDotTemplate, status:nzStatus, index:index }\">\n      </ng-template>\n    </span>\n  </ng-template>\n</div>\n<div class=\"ant-steps-item-content\">\n  <div class=\"ant-steps-item-title\">\n    <ng-container *nzStringTemplateOutlet=\"nzTitle\">{{ nzTitle }}</ng-container>\n  </div>\n  <div class=\"ant-steps-item-description\">\n    <ng-container *nzStringTemplateOutlet=\"nzDescription\">{{ nzDescription }}</ng-container>\n  </div>\n</div>\n",
                        host: {
                            '[class.ant-steps-item]': 'true',
                            '[class.ant-steps-item-wait]': 'nzStatus === "wait"',
                            '[class.ant-steps-item-process]': 'nzStatus === "process"',
                            '[class.ant-steps-item-finish]': 'nzStatus === "finish"',
                            '[class.ant-steps-item-error]': 'nzStatus === "error"',
                            '[class.ant-steps-custom]': '!!nzIcon',
                            '[class.ant-steps-next-error]': '(outStatus === "error") && (currentIndex === index + 1)'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzStepComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzStepComponent.propDecorators = {
            processDotTemplate: [{ type: i0.ViewChild, args: ['processDotTemplate',] }],
            nzTitle: [{ type: i0.Input }],
            nzDescription: [{ type: i0.Input }],
            nzStatus: [{ type: i0.Input }],
            nzIcon: [{ type: i0.Input }]
        };
        return NzStepComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzStepsComponent = /** @class */ (function () {
        function NzStepsComponent() {
            this.nzCurrent = 0;
            this.nzDirection = 'horizontal';
            this.nzLabelPlacement = 'horizontal';
            this.nzSize = 'default';
            this.nzStartIndex = 0;
            this.nzStatus = 'process';
            this.showProcessDot = false;
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(NzStepsComponent.prototype, "nzProgressDot", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value instanceof i0.TemplateRef) {
                    this.showProcessDot = true;
                    this.customProcessDotTemplate = value;
                }
                else {
                    this.showProcessDot = toBoolean(value);
                }
                this.updateChildrenSteps();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzStepsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzStartIndex"] || changes["nzDirection"] || changes["nzStatus"] || changes["nzCurrent"]) {
                    this.updateChildrenSteps();
                }
                if (changes["nzDirection"] || changes["nzProgressDot"] || changes["nzLabelPlacement"] || changes["nzSize"]) {
                    this.setClassMap();
                }
            };
        /**
         * @return {?}
         */
        NzStepsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
                this.updateChildrenSteps();
            };
        /**
         * @return {?}
         */
        NzStepsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
            };
        /**
         * @return {?}
         */
        NzStepsComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.updateChildrenSteps();
                if (this.steps) {
                    this.steps.changes.pipe(operators.takeUntil(this.destroy$)).subscribe(this.updateChildrenSteps);
                }
            };
        /**
         * @return {?}
         */
        NzStepsComponent.prototype.updateChildrenSteps = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.steps) {
                    /** @type {?} */
                    var length_1 = this.steps.length;
                    this.steps.toArray().forEach(function (step, index) {
                        Promise.resolve().then(function () {
                            step.outStatus = _this.nzStatus;
                            step.showProcessDot = _this.showProcessDot;
                            if (_this.customProcessDotTemplate) {
                                step.customProcessTemplate = _this.customProcessDotTemplate;
                            }
                            step.direction = _this.nzDirection;
                            step.index = index + _this.nzStartIndex;
                            step.currentIndex = _this.nzCurrent;
                            step.last = length_1 === index + 1;
                            step.detectChanges();
                        });
                    });
                }
            };
        /**
         * @return {?}
         */
        NzStepsComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.classMap = (_a = {},
                    _a["ant-steps-" + this.nzDirection] = true,
                    _a["ant-steps-label-horizontal"] = this.nzDirection === 'horizontal',
                    _a["ant-steps-label-vertical"] = (this.showProcessDot || this.nzLabelPlacement === 'vertical') && this.nzDirection === 'horizontal',
                    _a["ant-steps-dot"] = this.showProcessDot,
                    _a['ant-steps-small'] = this.nzSize === 'small',
                    _a);
            };
        NzStepsComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        selector: 'nz-steps',
                        template: "<div class=\"ant-steps\" [ngClass]=\"classMap\">\n  <ng-content></ng-content>\n</div>"
                    }] }
        ];
        NzStepsComponent.propDecorators = {
            steps: [{ type: i0.ContentChildren, args: [NzStepComponent,] }],
            nzCurrent: [{ type: i0.Input }],
            nzDirection: [{ type: i0.Input }],
            nzLabelPlacement: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzStartIndex: [{ type: i0.Input }],
            nzStatus: [{ type: i0.Input }],
            nzProgressDot: [{ type: i0.Input }]
        };
        return NzStepsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzStepsModule = /** @class */ (function () {
        function NzStepsModule() {
        }
        NzStepsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, NzIconModule, NzAddOnModule],
                        exports: [NzStepsComponent, NzStepComponent],
                        declarations: [NzStepsComponent, NzStepComponent]
                    },] }
        ];
        return NzStepsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSwitchComponent = /** @class */ (function () {
        function NzSwitchComponent(cdr, focusMonitor) {
            this.cdr = cdr;
            this.focusMonitor = focusMonitor;
            this.checked = false;
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
            this.nzLoading = false;
            this.nzDisabled = false;
            this.nzControl = false;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NzSwitchComponent.prototype.onClick = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.preventDefault();
                if ((!this.nzDisabled) && (!this.nzLoading) && (!this.nzControl)) {
                    this.updateValue(!this.checked);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzSwitchComponent.prototype.updateValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.checked !== value) {
                    this.checked = value;
                    this.onChange(this.checked);
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzSwitchComponent.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (!this.nzControl) {
                    if (e.keyCode === keycodes.LEFT_ARROW) { // Left
                        // Left
                        this.updateValue(false);
                        e.preventDefault();
                    }
                    else if (e.keyCode === keycodes.RIGHT_ARROW) { // Right
                        // Right
                        this.updateValue(true);
                        e.preventDefault();
                    }
                    else if (e.keyCode === keycodes.SPACE || e.keyCode === keycodes.ENTER) { // Space, Enter
                        // Space, Enter
                        this.updateValue(!this.checked);
                        e.preventDefault();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzSwitchComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.focusMonitor.focusVia(this.switchElement.nativeElement, 'keyboard');
            };
        /**
         * @return {?}
         */
        NzSwitchComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.switchElement.nativeElement.blur();
            };
        /**
         * @return {?}
         */
        NzSwitchComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.focusMonitor.monitor(this.switchElement.nativeElement, true).subscribe(function (focusOrigin) {
                    if (!focusOrigin) {
                        // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                        // Angular does not expect events to be raised during change detection, so any state change
                        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.
                        // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                        // telling the form control it has been touched until the next tick.
                        Promise.resolve().then(function () { return _this.onTouched(); });
                    }
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzSwitchComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.checked = value;
                this.cdr.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzSwitchComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzSwitchComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzSwitchComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
                this.cdr.markForCheck();
            };
        NzSwitchComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-switch',
                        preserveWhitespaces: false,
                        template: "<button type=\"button\" #switchElement\n  nz-wave\n  class=\"ant-switch\"\n  [disabled]=\"nzDisabled\"\n  [class.ant-switch-checked]=\"checked\"\n  [class.ant-switch-loading]=\"nzLoading\"\n  [class.ant-switch-disabled]=\"nzDisabled\"\n  [class.ant-switch-small]=\"nzSize === 'small'\"\n  [nzWaveExtraNode]=\"true\"\n  (keydown)=\"onKeyDown($event)\">\n  <i *ngIf=\"nzLoading\" nz-icon type=\"loading\" class=\"ant-switch-loading-icon\"></i>\n  <span class=\"ant-switch-inner\">\n    <span>\n      <ng-container *ngIf=\"checked\">\n        <ng-container *nzStringTemplateOutlet=\"nzCheckedChildren\">{{ nzCheckedChildren }}</ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!checked\">\n        <ng-container *nzStringTemplateOutlet=\"nzUnCheckedChildren\">{{ nzUnCheckedChildren }}</ng-container>\n      </ng-container>\n    </span>\n  </span>\n</button>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzSwitchComponent; }),
                                multi: true
                            }
                        ],
                        styles: ["\n    nz-switch {\n      display: inline-block;\n    }"]
                    }] }
        ];
        /** @nocollapse */
        NzSwitchComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: a11y.FocusMonitor }
            ];
        };
        NzSwitchComponent.propDecorators = {
            switchElement: [{ type: i0.ViewChild, args: ['switchElement',] }],
            nzLoading: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzControl: [{ type: i0.Input }],
            nzCheckedChildren: [{ type: i0.Input }],
            nzUnCheckedChildren: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzSwitchComponent.prototype, "nzLoading", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzSwitchComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzSwitchComponent.prototype, "nzControl", void 0);
        return NzSwitchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzSwitchModule = /** @class */ (function () {
        function NzSwitchModule() {
        }
        NzSwitchModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [NzSwitchComponent],
                        declarations: [NzSwitchComponent],
                        imports: [i3.CommonModule, NzWaveModule, NzIconModule, NzAddOnModule]
                    },] }
        ];
        return NzSwitchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzThComponent = /** @class */ (function () {
        function NzThComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this._sort = null;
            this._filters = [];
            this._showSort = false;
            this._showFilter = false;
            this._showCheckbox = false;
            this._showRowSelection = false;
            this._hasDefaultFilter = false;
            this._customFilter = false;
            this.el = this.elementRef.nativeElement;
            this.hasFilterValue = false;
            this.filterVisible = false;
            this.multipleFilterList = [];
            this.singleFilterList = [];
            /* tslint:disable-next-line:no-any */
            this.nzSelections = [];
            this.nzChecked = false;
            this.nzDisabled = false;
            this.nzIndeterminate = false;
            this.nzFilterMultiple = true;
            this.nzCheckedChange = new i0.EventEmitter();
            this.nzSortChange = new i0.EventEmitter();
            this.nzSortChangeWithKey = new i0.EventEmitter();
            /* tslint:disable-next-line:no-any */
            this.nzFilterChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzThComponent.prototype, "hasActionsClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzShowFilter || this.nzShowSort || this.nzCustomFilter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "hasFiltersClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzShowFilter || this.nzCustomFilter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "hasSortersClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzShowSort;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzThComponent.prototype.updateSortValue = /**
         * @return {?}
         */
            function () {
                if (this.nzShowSort) {
                    if (this.nzSort === 'descend') {
                        this.setSortValue('ascend');
                    }
                    else if (this.nzSort === 'ascend') {
                        this.setSortValue(null);
                    }
                    else {
                        this.setSortValue('descend');
                    }
                }
            };
        Object.defineProperty(NzThComponent.prototype, "nzCustomFilter", {
            get: /**
             * @return {?}
             */ function () {
                return this._customFilter;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._customFilter = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzShowSort", {
            get: /**
             * @return {?}
             */ function () {
                return this._showSort;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showSort = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzShowFilter", {
            get: /**
             * @return {?}
             */ function () {
                return this._showFilter;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showFilter = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzShowRowSelection", {
            get: /**
             * @return {?}
             */ function () {
                return this._showRowSelection;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showRowSelection = toBoolean(value);
                if (this._showRowSelection) {
                    this.renderer.addClass(this.el, 'ant-table-selection-column-custom');
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-selection-column-custom');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzLeft", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this.renderer.addClass(this.el, 'ant-table-th-left-sticky');
                    this.renderer.setStyle(this.el, 'left', value);
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-th-left-sticky');
                    this.renderer.removeStyle(this.el, 'left');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzRight", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this.renderer.addClass(this.el, 'ant-table-th-right-sticky');
                    this.renderer.setStyle(this.el, 'right', value);
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-th-right-sticky');
                    this.renderer.removeStyle(this.el, 'right');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzExpand", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var isExpand = toBoolean(value);
                if (isExpand) {
                    this.renderer.addClass(this.el, 'ant-table-expand-icon-th');
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-expand-icon-th');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzShowCheckbox", {
            get: /**
             * @return {?}
             */ function () {
                return this._showCheckbox;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showCheckbox = toBoolean(value);
                if (this._showCheckbox) {
                    this.renderer.addClass(this.el, 'ant-table-selection-column');
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-selection-column');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "nzSort", {
            get: /**
             * @return {?}
             */ function () {
                return this._sort;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._sort = value;
                if ((value !== 'ascend') && (value !== 'descend')) {
                    this.renderer.removeClass(this.el, 'ant-table-column-sort');
                }
                else {
                    this.renderer.addClass(this.el, 'ant-table-column-sort');
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NzThComponent.prototype.setSortValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.nzSort = value;
                this.nzSortChangeWithKey.emit({ key: this.nzSortKey, value: this.nzSort });
                this.nzSortChange.emit(this.nzSort);
            };
        Object.defineProperty(NzThComponent.prototype, "filterList", {
            get: /**
             * @return {?}
             */ function () {
                return this.multipleFilterList.filter(function (item) { return item.checked; }).map(function (item) { return item.value; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzThComponent.prototype, "filterValue", {
            /* tslint:disable-next-line:no-any */
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var checkedFilter = this.singleFilterList.find(function (item) { return item.checked; });
                return checkedFilter ? checkedFilter.value : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzThComponent.prototype.updateFilterStatus = /**
         * @return {?}
         */
            function () {
                if (this.nzFilterMultiple) {
                    this.hasFilterValue = this.filterList.length > 0;
                }
                else {
                    this.hasFilterValue = isNotNil(this.filterValue);
                }
            };
        /**
         * @return {?}
         */
        NzThComponent.prototype.search = /**
         * @return {?}
         */
            function () {
                this.updateFilterStatus();
                if (this.nzFilterMultiple) {
                    this.nzFilterChange.emit(this.filterList);
                }
                else {
                    this.nzFilterChange.emit(this.filterValue);
                }
                this.hideDropDown();
            };
        /**
         * @return {?}
         */
        NzThComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.initMultipleFilterList(true);
                this.initSingleFilterList(true);
                this.search();
                this.hideDropDown();
                this.hasFilterValue = false;
            };
        /**
         * @param {?} filter
         * @return {?}
         */
        NzThComponent.prototype.checkMultiple = /**
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                filter.checked = !filter.checked;
            };
        /**
         * @param {?} filter
         * @return {?}
         */
        NzThComponent.prototype.checkSingle = /**
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                this.singleFilterList.forEach(function (item) { return item.checked = item === filter; });
            };
        /**
         * @return {?}
         */
        NzThComponent.prototype.hideDropDown = /**
         * @return {?}
         */
            function () {
                this.nzDropDownComponent.nzVisible = false;
                this.nzDropDownComponent.hide();
                this.filterVisible = false;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzThComponent.prototype.dropDownVisibleChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.filterVisible = value;
                if (!value) {
                    this.search();
                }
            };
        Object.defineProperty(NzThComponent.prototype, "nzFilters", {
            get: /**
             * @return {?}
             */ function () {
                return this._filters;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (Array.isArray(value)) {
                    this._filters = value;
                    this.initMultipleFilterList();
                    this.initSingleFilterList();
                    this.updateFilterStatus();
                }
                else {
                    console.warn('nzFilters only accept type of Array<{ text: string; value: any }>');
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} force
         * @return {?}
         */
        NzThComponent.prototype.initMultipleFilterList = /**
         * @param {?=} force
         * @return {?}
         */
            function (force) {
                var _this = this;
                this.multipleFilterList = this.nzFilters.map(function (item) {
                    /** @type {?} */
                    var checked = force ? false : !!item.byDefault;
                    if (checked) {
                        _this._hasDefaultFilter = true;
                    }
                    return { text: item.text, value: item.value, checked: checked };
                });
                this.checkDefaultFilters();
            };
        /**
         * @param {?=} force
         * @return {?}
         */
        NzThComponent.prototype.initSingleFilterList = /**
         * @param {?=} force
         * @return {?}
         */
            function (force) {
                var _this = this;
                this.singleFilterList = this.nzFilters.map(function (item) {
                    /** @type {?} */
                    var checked = force ? false : !!item.byDefault;
                    if (checked) {
                        _this._hasDefaultFilter = true;
                    }
                    return { text: item.text, value: item.value, checked: checked };
                });
                this.checkDefaultFilters();
            };
        /**
         * @return {?}
         */
        NzThComponent.prototype.checkDefaultFilters = /**
         * @return {?}
         */
            function () {
                if (!this.nzFilters || this.nzFilters.length === 0 || !this._hasDefaultFilter) {
                    return;
                }
                this.updateFilterStatus();
            };
        NzThComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'th:not(.nz-disable-th)',
                        preserveWhitespaces: false,
                        template: "<ng-template #checkboxTemplate>\n  <label\n    [class.ant-table-selection-select-all-custom]=\"nzShowRowSelection\"\n    nz-checkbox\n    [(ngModel)]=\"nzChecked\"\n    [nzDisabled]=\"nzDisabled\"\n    [nzIndeterminate]=\"nzIndeterminate\"\n    (ngModelChange)=\"nzCheckedChange.emit($event)\">\n  </label>\n</ng-template>\n<div [class.ant-table-column-sorters]=\"nzShowSort\" (click)=\"updateSortValue()\">\n  <div class=\"ant-table-selection\" *ngIf=\"nzShowRowSelection\">\n    <ng-container *ngIf=\"nzShowCheckbox\">\n      <ng-template [ngTemplateOutlet]=\"checkboxTemplate\"></ng-template>\n    </ng-container>\n    <nz-dropdown nzPlacement=\"bottomLeft\">\n      <div nz-dropdown class=\"ant-table-selection-down\">\n        <i nz-icon type=\"down\"></i>\n      </div>\n      <ul nz-menu class=\"ant-table-selection-menu\">\n        <li nz-menu-item *ngFor=\"let selection of nzSelections\" (click)=\"selection.onSelect()\">{{selection.text}}</li>\n      </ul>\n    </nz-dropdown>\n  </div>\n  <ng-container *ngIf=\"nzShowCheckbox && !nzShowRowSelection\">\n    <ng-template [ngTemplateOutlet]=\"checkboxTemplate\"></ng-template>\n  </ng-container>\n  <ng-content></ng-content>\n  <div class=\"ant-table-column-sorter\" *ngIf=\"nzShowSort\">\n    <i nz-icon\n      type=\"caret-up\"\n      class=\"ant-table-column-sorter-up\"\n      [class.on]=\"nzSort == 'ascend'\"\n      [class.off]=\"nzSort != 'ascend'\"></i>\n    <i nz-icon\n      type=\"caret-down\"\n      class=\"ant-table-column-sorter-down\"\n      [class.on]=\"nzSort == 'descend'\"\n      [class.off]=\"nzSort != 'descend'\"></i>\n  </div>\n</div>\n<nz-dropdown nzTrigger=\"click\" *ngIf=\"nzShowFilter\" [nzClickHide]=\"false\" [hasFilterButton]=\"true\" (nzVisibleChange)=\"dropDownVisibleChange($event)\">\n  <i nz-icon type=\"filter\" theme=\"fill\" [class.ant-table-filter-selected]=\"hasFilterValue\" [class.ant-table-filter-open]=\"filterVisible\" nz-dropdown></i>\n  <ul nz-menu>\n    <ng-container *ngIf=\"nzFilterMultiple\">\n      <li nz-menu-item *ngFor=\"let filter of multipleFilterList\" (click)=\"checkMultiple(filter)\">\n        <label nz-checkbox [ngModel]=\"filter.checked\"></label><span>{{filter.text}}</span>\n      </li>\n    </ng-container>\n    <ng-container *ngIf=\"!nzFilterMultiple\">\n      <li nz-menu-item *ngFor=\"let filter of singleFilterList\" (click)=\"checkSingle(filter)\">\n        <label nz-radio [ngModel]=\"filter.checked\">{{filter.text}}</label>\n      </li>\n    </ng-container>\n  </ul>\n  <div class=\"ant-table-filter-dropdown-btns\">\n    <a class=\"ant-table-filter-dropdown-link confirm\" (click)=\"hideDropDown()\">\n      <span (click)=\"search()\">{{'Table.filterConfirm' | nzI18n}}</span>\n    </a>\n    <a class=\"ant-table-filter-dropdown-link clear\" (click)=\"hideDropDown()\">\n      <span (click)=\"reset()\">{{'Table.filterReset' | nzI18n}}</span>\n    </a>\n  </div>\n</nz-dropdown>\n"
                    }] }
        ];
        /** @nocollapse */
        NzThComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzThComponent.propDecorators = {
            nzDropDownComponent: [{ type: i0.ViewChild, args: [NzDropDownComponent,] }],
            nzSelections: [{ type: i0.Input }],
            nzChecked: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzIndeterminate: [{ type: i0.Input }],
            nzSortKey: [{ type: i0.Input }],
            nzFilterMultiple: [{ type: i0.Input }],
            nzWidth: [{ type: i0.Input }],
            nzCheckedChange: [{ type: i0.Output }],
            nzSortChange: [{ type: i0.Output }],
            nzSortChangeWithKey: [{ type: i0.Output }],
            nzFilterChange: [{ type: i0.Output }],
            hasActionsClass: [{ type: i0.HostBinding, args: ['class.ant-table-column-has-actions',] }],
            hasFiltersClass: [{ type: i0.HostBinding, args: ['class.ant-table-column-has-filters',] }],
            hasSortersClass: [{ type: i0.HostBinding, args: ['class.ant-table-column-has-sorters',] }],
            nzCustomFilter: [{ type: i0.Input }],
            nzShowSort: [{ type: i0.Input }],
            nzShowFilter: [{ type: i0.Input }],
            nzShowRowSelection: [{ type: i0.Input }],
            nzLeft: [{ type: i0.Input }],
            nzRight: [{ type: i0.Input }],
            nzExpand: [{ type: i0.Input }],
            nzShowCheckbox: [{ type: i0.Input }],
            nzSort: [{ type: i0.Input }],
            nzFilters: [{ type: i0.Input }]
        };
        return NzThComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTableComponent = /** @class */ (function () {
        function NzTableComponent(renderer, ngZone, elementRef, cdr, nzMeasureScrollbarService, i18n) {
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.elementRef = elementRef;
            this.cdr = cdr;
            this.nzMeasureScrollbarService = nzMeasureScrollbarService;
            this.i18n = i18n;
            this.unsubscribe$ = new rxjs.Subject();
            this._bordered = false;
            this._showPagination = true;
            this._loading = false;
            this._showSizeChanger = false;
            this._showQuickJumper = false;
            this._hideOnSinglePage = false;
            this._scroll = { x: null, y: null };
            this._pageIndex = 1;
            this._pageSize = 10;
            this._widthConfig = [];
            this._frontPagination = true;
            this._simple = false;
            /* tslint:disable-next-line:no-any */
            this.locale = {};
            this.el = this.elementRef.nativeElement;
            this.lastScrollLeft = 0;
            /* tslint:disable-next-line:no-any */
            this.rawData = [];
            /* tslint:disable-next-line:no-any */
            this.syncData = [];
            /**
             * public data for ngFor tr
             */
            this.data = [];
            this.isWidthConfigSet = false;
            this.nzPageSizeChange = new i0.EventEmitter();
            this.nzPageIndexChange = new i0.EventEmitter();
            /* tslint:disable-next-line:no-any */
            this.nzCurrentPageDataChange = new i0.EventEmitter();
            this.nzSize = 'default';
            /**
             * page size changer select values
             */
            this.nzPageSizeOptions = [10, 20, 30, 40, 50];
            this.nzLoadingDelay = 0;
        }
        Object.defineProperty(NzTableComponent.prototype, "nzSimple", {
            get: /**
             * @return {?}
             */ function () {
                return this._simple;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._simple = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzFrontPagination", {
            get: /**
             * @return {?}
             */ function () {
                return this._frontPagination;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._frontPagination = toBoolean(value);
                this.parseInputData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzWidthConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this._widthConfig;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isWidthConfigSet = true;
                this._widthConfig = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzTitle", {
            get: /**
             * @return {?}
             */ function () {
                return this._title;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isTitleString = !(value instanceof i0.TemplateRef);
                this._title = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzFooter", {
            get: /**
             * @return {?}
             */ function () {
                return this._footer;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isFooterString = !(value instanceof i0.TemplateRef);
                this._footer = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzNoResult", {
            get: /**
             * @return {?}
             */ function () {
                return this._noResult;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isNoResultString = !(value instanceof i0.TemplateRef);
                this._noResult = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzBordered", {
            get: /**
             * @return {?}
             */ function () {
                return this._bordered;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._bordered = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzShowPagination", {
            get: /**
             * @return {?}
             */ function () {
                return this._showPagination;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showPagination = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzLoading", {
            get: /**
             * @return {?}
             */ function () {
                return this._loading;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._loading = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzShowSizeChanger", {
            get: /**
             * @return {?}
             */ function () {
                return this._showSizeChanger;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showSizeChanger = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzHideOnSinglePage", {
            get: /**
             * @return {?}
             */ function () {
                return this._hideOnSinglePage;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._hideOnSinglePage = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzShowQuickJumper", {
            get: /**
             * @return {?}
             */ function () {
                return this._showQuickJumper;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showQuickJumper = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzScroll", {
            get: /**
             * @return {?}
             */ function () {
                return this._scroll;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this._scroll = value;
                }
                else {
                    this._scroll = { x: null, y: null };
                }
                this.cdr.detectChanges();
                this.setScrollPositionClassName();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTableComponent.prototype, "nzData", {
            set: /**
             * @param {?} data
             * @return {?}
             */ function (data) {
                if (Array.isArray(data)) {
                    this.rawData = data;
                    this.parseInputData();
                }
                else {
                    console.warn('nzData only accept array');
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTableComponent.prototype.parseInputData = /**
         * @return {?}
         */
            function () {
                if (this.nzFrontPagination) {
                    this.syncData = this.rawData;
                    this.nzTotal = this.syncData.length;
                    this.checkPageIndexBounding();
                    this.generateSyncDisplayData();
                }
                else {
                    this.data = this.rawData;
                    this.nzCurrentPageDataChange.emit(this.data);
                }
            };
        Object.defineProperty(NzTableComponent.prototype, "nzPageIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._pageIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._pageIndex === value) {
                    return;
                }
                this._pageIndex = value;
                if (this.nzFrontPagination) {
                    this.generateSyncDisplayData();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @return {?}
         */
        NzTableComponent.prototype.emitPageIndex = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.nzPageIndex = index;
                this.nzPageIndexChange.emit(this.nzPageIndex);
            };
        /**
         * @param {?} size
         * @return {?}
         */
        NzTableComponent.prototype.emitPageSize = /**
         * @param {?} size
         * @return {?}
         */
            function (size) {
                this.nzPageSize = size;
                this.nzPageSizeChange.emit(this.nzPageSize);
            };
        Object.defineProperty(NzTableComponent.prototype, "nzPageSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._pageSize;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._pageSize === value) {
                    return;
                }
                this._pageSize = value;
                if (this.nzFrontPagination) {
                    this.checkPageIndexBounding();
                    this.generateSyncDisplayData();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTableComponent.prototype.checkPageIndexBounding = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.nzFrontPagination) {
                    /** @type {?} */
                    var maxPageIndex = Math.ceil(this.syncData.length / this.nzPageSize);
                    /** @type {?} */
                    var pageIndex_1 = !this.nzPageIndex ? 1 : (this.nzPageIndex > maxPageIndex ? maxPageIndex : this.nzPageIndex);
                    if (pageIndex_1 !== this.nzPageIndex) {
                        this._pageIndex = pageIndex_1;
                        Promise.resolve().then(function () { return _this.nzPageIndexChange.emit(pageIndex_1); });
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.generateSyncDisplayData = /**
         * @return {?}
         */
            function () {
                this.data = this.syncData.slice((this.nzPageIndex - 1) * this.nzPageSize, this.nzPageIndex * this.nzPageSize);
                this.nzCurrentPageDataChange.emit(this.data);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTableComponent.prototype.syncScrollTable = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.currentTarget === e.target) {
                    /** @type {?} */
                    var target = /** @type {?} */ (e.target);
                    if (target.scrollLeft !== this.lastScrollLeft && this.nzScroll && this.nzScroll.x) {
                        if (target === this.tableBodyElement.nativeElement && this.tableHeaderElement) {
                            this.tableHeaderElement.nativeElement.scrollLeft = target.scrollLeft;
                        }
                        else if (target === this.tableHeaderElement.nativeElement && this.tableBodyElement) {
                            this.tableBodyElement.nativeElement.scrollLeft = target.scrollLeft;
                        }
                        this.setScrollPositionClassName();
                    }
                    this.lastScrollLeft = target.scrollLeft;
                }
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.setScrollPositionClassName = /**
         * @return {?}
         */
            function () {
                if (this.tableBodyElement && this.nzScroll && this.nzScroll.x) {
                    if ((this.tableBodyElement.nativeElement.scrollWidth === this.tableBodyElement.nativeElement.clientWidth) && (this.tableBodyElement.nativeElement.scrollWidth !== 0)) {
                        this.setScrollName();
                    }
                    else if (this.tableBodyElement.nativeElement.scrollLeft === 0) {
                        this.setScrollName('left');
                    }
                    else if (this.tableBodyElement.nativeElement.scrollWidth === (this.tableBodyElement.nativeElement.scrollLeft + this.tableBodyElement.nativeElement.clientWidth)) {
                        this.setScrollName('right');
                    }
                    else {
                        this.setScrollName('middle');
                    }
                }
            };
        /**
         * @param {?=} position
         * @return {?}
         */
        NzTableComponent.prototype.setScrollName = /**
         * @param {?=} position
         * @return {?}
         */
            function (position) {
                var _this = this;
                /** @type {?} */
                var prefix = 'ant-table-scroll-position';
                /** @type {?} */
                var classList = ['left', 'right', 'middle'];
                classList.forEach(function (name) {
                    _this.renderer.removeClass(_this.tableMainElement.nativeElement, prefix + "-" + name);
                });
                if (position) {
                    this.renderer.addClass(this.tableMainElement.nativeElement, prefix + "-" + position);
                }
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.fitScrollBar = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scrollbarWidth = this.nzMeasureScrollbarService.scrollBarWidth;
                if (scrollbarWidth) {
                    this.headerBottomStyle = {
                        marginBottom: "-" + scrollbarWidth + "px",
                        paddingBottom: "0px"
                    };
                }
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.onWindowResize = /**
         * @return {?}
         */
            function () {
                this.fitScrollBar();
                this.setScrollPositionClassName();
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18n.localeChange.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Table'); });
                this.fitScrollBar();
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () { return _this.setScrollPositionClassName(); });
                this.ngZone.runOutsideAngular(function () {
                    if (_this.tableHeaderElement
                        && _this.tableHeaderElement.nativeElement
                        && _this.tableBodyElement
                        && _this.tableBodyElement.nativeElement) {
                        rxjs.merge(rxjs.fromEvent(_this.tableHeaderElement.nativeElement, 'scroll'), rxjs.fromEvent(_this.tableBodyElement.nativeElement, 'scroll')).pipe(operators.takeUntil(_this.unsubscribe$)).subscribe(function (data) {
                            _this.syncScrollTable(data);
                        });
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTableComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        NzTableComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-table',
                        preserveWhitespaces: false,
                        template: "<ng-template #colGroupTemplate>\n  <colgroup *ngIf=\"!isWidthConfigSet\">\n    <col [style.width]=\"th.nzWidth\" [style.minWidth]=\"th.nzWidth\" *ngFor=\"let th of listOfNzThComponent\">\n  </colgroup>\n  <colgroup *ngIf=\"isWidthConfigSet\">\n    <col [style.width]=\"width\" [style.minWidth]=\"width\" *ngFor=\"let width of nzWidthConfig\">\n  </colgroup>\n</ng-template>\n<ng-template #tableInnerTemplate>\n  <div\n    #tableHeaderElement\n    *ngIf=\"nzScroll.x || nzScroll.y\"\n    class=\"ant-table-header\"\n    [ngStyle]=\"headerBottomStyle\">\n    <table\n      [class.ant-table-fixed]=\"nzScroll.x\"\n      [style.width]=\"nzScroll.x\">\n      <ng-template [ngTemplateOutlet]=\"colGroupTemplate\"></ng-template>\n      <thead class=\"ant-table-thead\" *ngIf=\"nzScroll.y\">\n        <ng-template [ngTemplateOutlet]=\"nzTheadComponent?.template\"></ng-template>\n      </thead>\n    </table>\n  </div>\n  <div\n    #tableBodyElement\n    class=\"ant-table-body\"\n    [style.maxHeight]=\"nzScroll.y\"\n    [style.overflow-y]=\"nzScroll.y?'scroll':''\"\n    [style.overflow-x]=\"nzScroll.x?'auto':''\">\n    <table [class.ant-table-fixed]=\"nzScroll.x\" [style.width]=\"nzScroll.x\">\n      <ng-template [ngTemplateOutlet]=\"colGroupTemplate\"></ng-template>\n      <thead class=\"ant-table-thead\" *ngIf=\"!nzScroll.y\">\n        <ng-template [ngTemplateOutlet]=\"nzTheadComponent?.template\"></ng-template>\n      </thead>\n      <ng-content></ng-content>\n    </table>\n  </div>\n  <div class=\"ant-table-placeholder\" *ngIf=\"(data.length==0)&&!nzLoading\">\n    <span *ngIf=\"!nzNoResult\">{{ locale.emptyText }}</span>\n    <ng-container *ngIf=\"nzNoResult\">\n      <ng-container *ngIf=\"isNoResultString; else noResultTemplate\">{{ nzNoResult }}</ng-container>\n      <ng-template #noResultTemplate>\n        <ng-template [ngTemplateOutlet]=\"nzNoResult\"></ng-template>\n      </ng-template>\n    </ng-container>\n  </div>\n  <div class=\"ant-table-footer\" *ngIf=\"nzFooter\">\n    <ng-container *ngIf=\"isFooterString; else footerTemplate\">{{ nzFooter }}</ng-container>\n    <ng-template #footerTemplate>\n      <ng-template [ngTemplateOutlet]=\"nzFooter\"></ng-template>\n    </ng-template>\n  </div>\n</ng-template>\n<div\n  class=\"ant-table-wrapper\"\n  [class.ant-table-empty]=\"data.length==0\">\n  <nz-spin\n    [nzDelay]=\"nzLoadingDelay\"\n    [nzSpinning]=\"nzLoading\">\n    <div>\n      <div\n        class=\"ant-table\"\n        #tableMainElement\n        [class.ant-table-fixed-header]=\"nzScroll.x || nzScroll.y\"\n        [class.ant-table-bordered]=\"nzBordered\"\n        [class.ant-table-large]=\"nzSize=='default'\"\n        [class.ant-table-middle]=\"nzSize=='middle'\"\n        [class.ant-table-small]=\"nzSize=='small'\">\n        <div class=\"ant-table-title\" *ngIf=\"nzTitle\">\n          <ng-container *ngIf=\"isTitleString; else titleTemplate\">{{ nzTitle }}</ng-container>\n          <ng-template #titleTemplate>\n            <ng-template [ngTemplateOutlet]=\"nzTitle\"></ng-template>\n          </ng-template>\n        </div>\n        <div class=\"ant-table-content\">\n          <ng-container *ngIf=\"nzScroll.x || nzScroll.y; else tableInnerTemplate\">\n            <div class=\"ant-table-scroll\">\n              <ng-template [ngTemplateOutlet]=\"tableInnerTemplate\"></ng-template>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n    <nz-pagination\n      *ngIf=\"nzShowPagination&&data.length\"\n      [nzInTable]=\"true\"\n      [nzShowSizeChanger]=\"nzShowSizeChanger\"\n      [nzPageSizeOptions]=\"nzPageSizeOptions\"\n      [nzShowQuickJumper]=\"nzShowQuickJumper\"\n      [nzHideOnSinglePage]=\"nzHideOnSinglePage\"\n      [nzShowTotal]=\"nzShowTotal\"\n      [nzSize]=\"(nzSize=='middle'||nzSize=='small')?'small':''\"\n      [nzPageSize]=\"nzPageSize\"\n      (nzPageSizeChange)=\"emitPageSize($event)\"\n      [nzTotal]=\"nzTotal\"\n      [nzSimple]=\"nzSimple\"\n      [nzPageIndex]=\"nzPageIndex\"\n      (nzPageIndexChange)=\"emitPageIndex($event)\">\n    </nz-pagination>\n  </nz-spin>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzTableComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.NgZone },
                { type: i0.ElementRef },
                { type: i0.ChangeDetectorRef },
                { type: NzMeasureScrollbarService },
                { type: NzI18nService }
            ];
        };
        NzTableComponent.propDecorators = {
            tableHeaderElement: [{ type: i0.ViewChild, args: ['tableHeaderElement',] }],
            tableBodyElement: [{ type: i0.ViewChild, args: ['tableBodyElement',] }],
            tableMainElement: [{ type: i0.ViewChild, args: ['tableMainElement',] }],
            listOfNzThComponent: [{ type: i0.ContentChildren, args: [NzThComponent, { descendants: true },] }],
            nzPageSizeChange: [{ type: i0.Output }],
            nzPageIndexChange: [{ type: i0.Output }],
            nzShowTotal: [{ type: i0.Input }],
            nzCurrentPageDataChange: [{ type: i0.Output }],
            nzSize: [{ type: i0.Input }],
            nzPageSizeOptions: [{ type: i0.Input }],
            nzLoadingDelay: [{ type: i0.Input }],
            nzTotal: [{ type: i0.Input }],
            nzSimple: [{ type: i0.Input }],
            nzFrontPagination: [{ type: i0.Input }],
            nzWidthConfig: [{ type: i0.Input }],
            nzTitle: [{ type: i0.Input }],
            nzFooter: [{ type: i0.Input }],
            nzNoResult: [{ type: i0.Input }],
            nzBordered: [{ type: i0.Input }],
            nzShowPagination: [{ type: i0.Input }],
            nzLoading: [{ type: i0.Input }],
            nzShowSizeChanger: [{ type: i0.Input }],
            nzHideOnSinglePage: [{ type: i0.Input }],
            nzShowQuickJumper: [{ type: i0.Input }],
            nzScroll: [{ type: i0.Input }],
            nzData: [{ type: i0.Input }],
            nzPageIndex: [{ type: i0.Input }],
            nzPageSize: [{ type: i0.Input }],
            onWindowResize: [{ type: i0.HostListener, args: ['window:resize',] }]
        };
        return NzTableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTbodyDirective = /** @class */ (function () {
        function NzTbodyDirective(nzTableComponent) {
            this.nzTableComponent = nzTableComponent;
        }
        NzTbodyDirective.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'tbody',
                        host: {
                            '[class.ant-table-tbody]': 'nzTableComponent'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzTbodyDirective.ctorParameters = function () {
            return [
                { type: NzTableComponent, decorators: [{ type: i0.Host }, { type: i0.Optional }] }
            ];
        };
        return NzTbodyDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTdComponent = /** @class */ (function () {
        function NzTdComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this._showExpand = false;
            this._expand = false;
            this._showCheckbox = false;
            this.isIndentSizeSet = false;
            this.el = this.elementRef.nativeElement;
            this.nzChecked = false;
            this.nzDisabled = false;
            this.nzIndeterminate = false;
            this.nzCheckedChange = new i0.EventEmitter();
            this.nzExpandChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzTdComponent.prototype, "nzIndentSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._indentSize;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._indentSize = value;
                this.isIndentSizeSet = isNotNil(value);
                this.updateExpandIconClass();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTdComponent.prototype, "nzExpand", {
            get: /**
             * @return {?}
             */ function () {
                return this._expand;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._expand = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTdComponent.prototype, "nzShowExpand", {
            get: /**
             * @return {?}
             */ function () {
                return this._showExpand;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showExpand = toBoolean(value);
                this.updateExpandIconClass();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTdComponent.prototype, "nzShowCheckbox", {
            get: /**
             * @return {?}
             */ function () {
                return this._showCheckbox;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showCheckbox = toBoolean(value);
                if (this._showCheckbox) {
                    this.renderer.addClass(this.el, 'ant-table-selection-column');
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-selection-column');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTdComponent.prototype, "nzLeft", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this.renderer.addClass(this.el, 'ant-table-td-left-sticky');
                    this.renderer.setStyle(this.el, 'left', value);
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-td-left-sticky');
                    this.renderer.removeStyle(this.el, 'left');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTdComponent.prototype, "nzRight", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (isNotNil(value)) {
                    this.renderer.addClass(this.el, 'ant-table-td-right-sticky');
                    this.renderer.setStyle(this.el, 'right', value);
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-td-right-sticky');
                    this.renderer.removeStyle(this.el, 'right');
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTdComponent.prototype.updateExpandIconClass = /**
         * @return {?}
         */
            function () {
                if (this.nzShowExpand && !this.isIndentSizeSet) {
                    this.renderer.addClass(this.el, 'ant-table-row-expand-icon-cell');
                }
                else {
                    this.renderer.removeClass(this.el, 'ant-table-row-expand-icon-cell');
                }
            };
        /**
         * @return {?}
         */
        NzTdComponent.prototype.expandChange = /**
         * @return {?}
         */
            function () {
                this.nzExpand = !this.nzExpand;
                this.nzExpandChange.emit(this.nzExpand);
            };
        NzTdComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'td:not(.nz-disable-td)',
                        template: "<span class=\"ant-table-row-indent\" *ngIf=\"nzIndentSize >= 0\" [style.padding-left.px]=\"nzIndentSize\"></span>\n<label\n  *ngIf=\"nzShowCheckbox\"\n  nz-checkbox\n  [nzDisabled]=\"nzDisabled\"\n  [(ngModel)]=\"nzChecked\"\n  [nzIndeterminate]=\"nzIndeterminate\"\n  (ngModelChange)=\"nzCheckedChange.emit($event)\">\n</label>\n<span\n  *ngIf=\"!nzShowExpand && nzIndentSize != null\"\n  class=\"ant-table-row-expand-icon ant-table-row-spaced\"></span>\n<span\n  *ngIf=\"nzShowExpand\"\n  class=\"ant-table-row-expand-icon\"\n  (click)=\"expandChange()\"\n  [class.ant-table-row-expanded]=\"nzExpand\"\n  [class.ant-table-row-collapsed]=\"!nzExpand\"></span>\n<ng-content></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        NzTdComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NzTdComponent.propDecorators = {
            nzChecked: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzIndeterminate: [{ type: i0.Input }],
            nzCheckedChange: [{ type: i0.Output }],
            nzExpandChange: [{ type: i0.Output }],
            nzIndentSize: [{ type: i0.Input }],
            nzExpand: [{ type: i0.Input }],
            nzShowExpand: [{ type: i0.Input }],
            nzShowCheckbox: [{ type: i0.Input }],
            nzLeft: [{ type: i0.Input }],
            nzRight: [{ type: i0.Input }]
        };
        return NzTdComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTheadComponent = /** @class */ (function () {
        function NzTheadComponent(nzTableComponent) {
            this.nzTableComponent = nzTableComponent;
            this._singleSort = false;
            this.unsubscribe$ = new rxjs.Subject();
            this.nzSortChange = new i0.EventEmitter();
            if (this.nzTableComponent) {
                this.nzTableComponent.nzTheadComponent = this;
            }
        }
        Object.defineProperty(NzTheadComponent.prototype, "nzSingleSort", {
            get: /**
             * @return {?}
             */ function () {
                return this._singleSort;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._singleSort = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTheadComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var sortChange = new rxjs.Subject().asObservable();
                /** @type {?} */
                var listOfTh = this.listOfNzThComponent.toArray();
                /** @type {?} */
                var sortChangeArray = listOfTh.map(function (th) { return th.nzSortChangeWithKey; });
                if (sortChangeArray.length) {
                    sortChangeArray.forEach(function (sort) {
                        sortChange = rxjs.merge(sort.asObservable(), sortChange);
                    });
                }
                sortChange.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (data) {
                    _this.nzSortChange.emit(data);
                    if (_this.nzSingleSort) {
                        listOfTh.forEach(function (th) { return th.nzSort = (th.nzSortKey === data.key ? th.nzSort : null); });
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTheadComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        NzTheadComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'thead:not(.ant-table-thead)',
                        template: "<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n<ng-container *ngIf=\"!nzTableComponent\">\n  <ng-template [ngTemplateOutlet]=\"contentTemplate\"></ng-template>\n</ng-container>"
                    }] }
        ];
        /** @nocollapse */
        NzTheadComponent.ctorParameters = function () {
            return [
                { type: NzTableComponent, decorators: [{ type: i0.Host }, { type: i0.Optional }] }
            ];
        };
        NzTheadComponent.propDecorators = {
            template: [{ type: i0.ViewChild, args: ['contentTemplate',] }],
            listOfNzThComponent: [{ type: i0.ContentChildren, args: [NzThComponent, { descendants: true },] }],
            nzSortChange: [{ type: i0.Output }],
            nzSingleSort: [{ type: i0.Input }]
        };
        return NzTheadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTrDirective = /** @class */ (function () {
        function NzTrDirective(elementRef, renderer, nzTableComponent) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.nzTableComponent = nzTableComponent;
        }
        Object.defineProperty(NzTrDirective.prototype, "nzExpand", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (toBoolean(value)) {
                    this.renderer.removeStyle(this.elementRef.nativeElement, 'display');
                    this.renderer.addClass(this.elementRef.nativeElement, 'ant-table-expanded-row');
                }
                else {
                    this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
                    this.renderer.removeClass(this.elementRef.nativeElement, 'ant-table-expanded-row');
                }
            },
            enumerable: true,
            configurable: true
        });
        NzTrDirective.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'tr',
                        host: {
                            '[class.ant-table-row]': 'nzTableComponent'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzTrDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: NzTableComponent, decorators: [{ type: i0.Host }, { type: i0.Optional }] }
            ];
        };
        NzTrDirective.propDecorators = {
            nzExpand: [{ type: i0.Input }]
        };
        return NzTrDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTableModule = /** @class */ (function () {
        function NzTableModule() {
        }
        NzTableModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzTableComponent, NzThComponent, NzTdComponent, NzTheadComponent, NzTbodyDirective, NzTrDirective],
                        exports: [NzTableComponent, NzThComponent, NzTdComponent, NzTheadComponent, NzTbodyDirective, NzTrDirective],
                        imports: [
                            NzMenuModule,
                            forms.FormsModule,
                            NzRadioModule,
                            NzCheckboxModule,
                            NzDropDownModule,
                            i3.CommonModule,
                            NzPaginationModule,
                            NzSpinModule,
                            NzI18nModule,
                            NzIconModule
                        ]
                    },] }
        ];
        return NzTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTabBodyComponent = /** @class */ (function () {
        function NzTabBodyComponent() {
        }
        NzTabBodyComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-tab-body]',
                        preserveWhitespaces: false,
                        template: "<ng-template [ngTemplateOutlet]=\"content\"></ng-template>"
                    }] }
        ];
        NzTabBodyComponent.propDecorators = {
            content: [{ type: i0.Input }]
        };
        return NzTabBodyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTabLabelDirective = /** @class */ (function () {
        function NzTabLabelDirective(elementRef) {
            this.elementRef = elementRef;
            this._disabled = false;
        }
        Object.defineProperty(NzTabLabelDirective.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTabLabelDirective.prototype.getOffsetLeft = /**
         * @return {?}
         */
            function () {
                return this.elementRef.nativeElement.offsetLeft;
            };
        /**
         * @return {?}
         */
        NzTabLabelDirective.prototype.getOffsetWidth = /**
         * @return {?}
         */
            function () {
                return this.elementRef.nativeElement.offsetWidth;
            };
        /**
         * @return {?}
         */
        NzTabLabelDirective.prototype.getOffsetTop = /**
         * @return {?}
         */
            function () {
                return this.elementRef.nativeElement.offsetTop;
            };
        /**
         * @return {?}
         */
        NzTabLabelDirective.prototype.getOffsetHeight = /**
         * @return {?}
         */
            function () {
                return this.elementRef.nativeElement.offsetHeight;
            };
        NzTabLabelDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-tab-label]',
                        host: {
                            '[class.ant-tabs-tab]': 'true'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzTabLabelDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NzTabLabelDirective.propDecorators = {
            disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ant-tabs-tab-disabled',] }]
        };
        return NzTabLabelDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTabsInkBarDirective = /** @class */ (function () {
        function NzTabsInkBarDirective(renderer, elementRef, ngZone) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.ngZone = ngZone;
            this._animated = false;
            this.nzPositionMode = 'horizontal';
        }
        Object.defineProperty(NzTabsInkBarDirective.prototype, "nzAnimated", {
            get: /**
             * @return {?}
             */ function () {
                return this._animated;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._animated = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} element
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.alignToElement = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                var _this = this;
                this.show();
                this.ngZone.runOutsideAngular(function () {
                    reqAnimFrame(function () {
                        /** when horizontal remove height style and add transform left **/
                        if (_this.nzPositionMode === 'horizontal') {
                            _this.renderer.removeStyle(_this.elementRef.nativeElement, 'height');
                            _this.renderer.setStyle(_this.elementRef.nativeElement, 'transform', "translate3d(" + _this.getLeftPosition(element) + ", 0px, 0px)");
                            _this.renderer.setStyle(_this.elementRef.nativeElement, 'width', _this.getElementWidth(element));
                        }
                        else {
                            /** when vertical remove width style and add transform top **/
                            _this.renderer.removeStyle(_this.elementRef.nativeElement, 'width');
                            _this.renderer.setStyle(_this.elementRef.nativeElement, 'transform', "translate3d(0px, " + _this.getTopPosition(element) + ", 0px)");
                            _this.renderer.setStyle(_this.elementRef.nativeElement, 'height', _this.getElementHeight(element));
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.show = /**
         * @return {?}
         */
            function () {
                this.renderer.setStyle(this.elementRef.nativeElement, 'visibility', 'visible');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.setDisplay = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.renderer.setStyle(this.elementRef.nativeElement, 'display', value);
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.getLeftPosition = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                return element ? element.offsetLeft + 'px' : '0';
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.getElementWidth = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                return element ? element.offsetWidth + 'px' : '0';
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.getTopPosition = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                return element ? element.offsetTop + 'px' : '0';
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NzTabsInkBarDirective.prototype.getElementHeight = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                return element ? element.offsetHeight + 'px' : '0';
            };
        NzTabsInkBarDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[nz-tabs-ink-bar]',
                        host: {
                            '[class.ant-tabs-ink-bar]': 'true',
                            '[class.ant-tabs-ink-bar-animated]': 'nzAnimated',
                            '[class.ant-tabs-ink-bar-no-animated]': '!nzAnimated'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzTabsInkBarDirective.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef },
                { type: i0.NgZone }
            ];
        };
        NzTabsInkBarDirective.propDecorators = {
            nzAnimated: [{ type: i0.Input }],
            nzPositionMode: [{ type: i0.Input }]
        };
        return NzTabsInkBarDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var EXAGGERATED_OVERSCROLL = 64;
    var NzTabsNavComponent = /** @class */ (function () {
        function NzTabsNavComponent(elementRef, ngZone, renderer, dir) {
            this.elementRef = elementRef;
            this.ngZone = ngZone;
            this.renderer = renderer;
            this.dir = dir;
            this._animated = true;
            this._hideBar = false;
            this._showPagination = true;
            this._type = 'line';
            this._tabPositionMode = 'horizontal';
            this._scrollDistance = 0;
            this._selectedIndex = 0;
            this.showPaginationControls = false;
            this.disableScrollAfter = true;
            this.disableScrollBefore = true;
            this.selectedIndexChanged = false;
            this.realignInkBar = null;
            this.nzOnNextClick = new i0.EventEmitter();
            this.nzOnPrevClick = new i0.EventEmitter();
        }
        Object.defineProperty(NzTabsNavComponent.prototype, "nzAnimated", {
            get: /**
             * @return {?}
             */ function () {
                return this._animated;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._animated = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "nzHideBar", {
            get: /**
             * @return {?}
             */ function () {
                return this._hideBar;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._hideBar = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "nzType", {
            get: /**
             * @return {?}
             */ function () {
                return this._type;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._type = value;
                if (this._type !== 'line') {
                    this.nzTabsInkBarDirective.setDisplay('none');
                }
                else {
                    this.nzTabsInkBarDirective.setDisplay('block');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "nzShowPagination", {
            get: /**
             * @return {?}
             */ function () {
                return this._showPagination;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showPagination = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "nzPositionMode", {
            get: /**
             * @return {?}
             */ function () {
                return this._tabPositionMode;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._tabPositionMode = value;
                this.alignInkBarToSelectedTab();
                if (this.nzShowPagination) {
                    this.updatePagination();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "selectedIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.selectedIndexChanged = this._selectedIndex !== value;
                this._selectedIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.onContentChanges = /**
         * @return {?}
         */
            function () {
                if (this.nzShowPagination) {
                    this.updatePagination();
                }
                this.alignInkBarToSelectedTab();
            };
        /**
         * @param {?} scrollDir
         * @return {?}
         */
        NzTabsNavComponent.prototype.scrollHeader = /**
         * @param {?} scrollDir
         * @return {?}
         */
            function (scrollDir) {
                if (scrollDir === 'before' && !this.disableScrollBefore) {
                    this.nzOnPrevClick.emit();
                }
                else if (scrollDir === 'after' && !this.disableScrollAfter) {
                    this.nzOnNextClick.emit();
                }
                // Move the scroll distance one-third the length of the tab list's viewport.
                this.scrollDistance += (scrollDir === 'before' ? -1 : 1) * this.viewWidthHeightPix / 3;
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                if (this.tabLabelCount !== this.listOfNzTabLabelDirective.length) {
                    if (this.nzShowPagination) {
                        this.updatePagination();
                    }
                    this.tabLabelCount = this.listOfNzTabLabelDirective.length;
                }
                if (this.selectedIndexChanged) {
                    this.scrollToLabel(this._selectedIndex);
                    if (this.nzShowPagination) {
                        this.checkScrollingControls();
                    }
                    this.alignInkBarToSelectedTab();
                    this.selectedIndexChanged = false;
                }
                if (this.scrollDistanceChanged) {
                    if (this.nzShowPagination) {
                        this.updateTabScrollPosition();
                    }
                    this.scrollDistanceChanged = false;
                }
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.realignInkBar = this.ngZone.runOutsideAngular(function () {
                    /** @type {?} */
                    var dirChange = _this.dir ? _this.dir.change : rxjs.of(null);
                    /** @type {?} */
                    var resize = typeof window !== 'undefined' ?
                        rxjs.fromEvent(window, 'resize').pipe(operators.auditTime(10)) :
                        rxjs.of(null);
                    return rxjs.merge(dirChange, resize).pipe(operators.startWith(null)).subscribe(function () {
                        if (_this.nzShowPagination) {
                            _this.updatePagination();
                        }
                        _this.alignInkBarToSelectedTab();
                    });
                });
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.updateTabScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scrollDistance = this.scrollDistance;
                if (this.nzPositionMode === 'horizontal') {
                    /** @type {?} */
                    var translateX = this.getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;
                    this.renderer.setStyle(this.navListElement.nativeElement, 'transform', "translate3d(" + translateX + "px, 0, 0)");
                }
                else {
                    this.renderer.setStyle(this.navListElement.nativeElement, 'transform', "translate3d(0," + -scrollDistance + "px, 0)");
                }
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.updatePagination = /**
         * @return {?}
         */
            function () {
                this.checkPaginationEnabled();
                this.checkScrollingControls();
                this.updateTabScrollPosition();
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.checkPaginationEnabled = /**
         * @return {?}
         */
            function () {
                this.showPaginationControls =
                    this.tabListScrollWidthHeightPix > this.elementRefOffSetWidthHeight;
                if (!this.showPaginationControls) {
                    this.scrollDistance = 0;
                }
            };
        /**
         * @param {?} labelIndex
         * @return {?}
         */
        NzTabsNavComponent.prototype.scrollToLabel = /**
         * @param {?} labelIndex
         * @return {?}
         */
            function (labelIndex) {
                /** @type {?} */
                var selectedLabel = this.listOfNzTabLabelDirective
                    ? this.listOfNzTabLabelDirective.toArray()[labelIndex]
                    : null;
                if (selectedLabel) {
                    /** @type {?} */
                    var labelBeforePos = void 0;
                    /** @type {?} */
                    var labelAfterPos = void 0;
                    if (this.nzPositionMode === 'horizontal') {
                        if (this.getLayoutDirection() === 'ltr') {
                            labelBeforePos = selectedLabel.getOffsetLeft();
                            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
                        }
                        else {
                            labelAfterPos = this.navListElement.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
                            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
                        }
                    }
                    else {
                        labelBeforePos = selectedLabel.getOffsetTop();
                        labelAfterPos = labelBeforePos + selectedLabel.getOffsetHeight();
                    }
                    /** @type {?} */
                    var beforeVisiblePos = this.scrollDistance;
                    /** @type {?} */
                    var afterVisiblePos = this.scrollDistance + this.viewWidthHeightPix;
                    if (labelBeforePos < beforeVisiblePos) {
                        // Scroll header to move label to the before direction
                        this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
                    }
                    else if (labelAfterPos > afterVisiblePos) {
                        // Scroll header to move label to the after direction
                        this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.checkScrollingControls = /**
         * @return {?}
         */
            function () {
                // Check if the pagination arrows should be activated.
                this.disableScrollBefore = this.scrollDistance === 0;
                this.disableScrollAfter = this.scrollDistance === this.getMaxScrollDistance();
            };
        /**
         * Determines what is the maximum length in pixels that can be set for the scroll distance. This
         * is equal to the difference in width between the tab list container and tab header container.
         *
         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
         * should be called sparingly.
         */
        /**
         * Determines what is the maximum length in pixels that can be set for the scroll distance. This
         * is equal to the difference in width between the tab list container and tab header container.
         *
         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
         * should be called sparingly.
         * @return {?}
         */
        NzTabsNavComponent.prototype.getMaxScrollDistance = /**
         * Determines what is the maximum length in pixels that can be set for the scroll distance. This
         * is equal to the difference in width between the tab list container and tab header container.
         *
         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
         * should be called sparingly.
         * @return {?}
         */
            function () {
                return (this.tabListScrollWidthHeightPix - this.viewWidthHeightPix) || 0;
            };
        Object.defineProperty(NzTabsNavComponent.prototype, "scrollDistance", {
            get: /**
             * @return {?}
             */ function () {
                return this._scrollDistance;
            },
            /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
            set: /**
             * Sets the distance in pixels that the tab header should be transformed in the X-axis.
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._scrollDistance = Math.max(0, Math.min(this.getMaxScrollDistance(), v));
                // Mark that the scroll distance has changed so that after the view is checked, the CSS
                // transformation can move the header.
                this.scrollDistanceChanged = true;
                this.checkScrollingControls();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "viewWidthHeightPix", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var PAGINATION_PIX = 0;
                if (this.showPaginationControls) {
                    PAGINATION_PIX = 64;
                }
                if (this.nzPositionMode === 'horizontal') {
                    return this.navContainerElement.nativeElement.offsetWidth - PAGINATION_PIX;
                }
                else {
                    return this.navContainerElement.nativeElement.offsetHeight - PAGINATION_PIX;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "tabListScrollWidthHeightPix", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzPositionMode === 'horizontal') {
                    return this.navListElement.nativeElement.scrollWidth;
                }
                else {
                    return this.navListElement.nativeElement.scrollHeight;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabsNavComponent.prototype, "elementRefOffSetWidthHeight", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzPositionMode === 'horizontal') {
                    return this.elementRef.nativeElement.offsetWidth;
                }
                else {
                    return this.elementRef.nativeElement.offsetHeight;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.getLayoutDirection = /**
         * @return {?}
         */
            function () {
                return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';
            };
        /**
         * @return {?}
         */
        NzTabsNavComponent.prototype.alignInkBarToSelectedTab = /**
         * @return {?}
         */
            function () {
                if (this.nzType === 'line') {
                    /** @type {?} */
                    var selectedLabelWrapper = this.listOfNzTabLabelDirective && this.listOfNzTabLabelDirective.length
                        ? this.listOfNzTabLabelDirective.toArray()[this.selectedIndex].elementRef.nativeElement
                        : null;
                    if (this.nzTabsInkBarDirective) {
                        this.nzTabsInkBarDirective.alignToElement(selectedLabelWrapper);
                    }
                }
            };
        NzTabsNavComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-tabs-nav]',
                        preserveWhitespaces: false,
                        template: "<div style=\"float:right;\" *ngIf=\"nzTabBarExtraContent\" class=\"ant-tabs-extra-content\">\n  <ng-template [ngTemplateOutlet]=\"nzTabBarExtraContent\"></ng-template>\n</div>\n<div class=\"ant-tabs-nav-container\" [class.ant-tabs-nav-container-scrolling]=\"showPaginationControls\" #navContainerElement>\n  <span class=\"ant-tabs-tab-prev\" (click)=\"scrollHeader('before')\" [class.ant-tabs-tab-btn-disabled]=\"disableScrollBefore\" [class.ant-tabs-tab-arrow-show]=\"showPaginationControls\">\n    <span class=\"ant-tabs-tab-prev-icon\">\n      <i nz-icon [type]=\"nzPositionMode === 'horizontal' ? 'left' : 'up'\" class=\"ant-tabs-tab-prev-icon-target\"></i>\n    </span>\n  </span>\n  <span class=\"ant-tabs-tab-next\" (click)=\"scrollHeader('after')\" [class.ant-tabs-tab-btn-disabled]=\"disableScrollAfter\" [class.ant-tabs-tab-arrow-show]=\"showPaginationControls\">\n    <span class=\"ant-tabs-tab-next-icon\">\n      <i nz-icon [type]=\"nzPositionMode === 'horizontal' ? 'right' : 'down'\" class=\"ant-tabs-tab-next-icon-target\"></i>\n    </span>\n  </span>\n  <div class=\"ant-tabs-nav-wrap\">\n    <div class=\"ant-tabs-nav-scroll\">\n      <div\n        class=\"ant-tabs-nav\"\n        [class.ant-tabs-nav-animated]=\"nzAnimated\"\n        #navListElement\n        (cdkObserveContent)=\"onContentChanges()\">\n        <div nz-tabs-ink-bar [hidden]=\"nzHideBar\" [nzAnimated]=\"nzAnimated\" [nzPositionMode]=\"nzPositionMode\" style=\"display: block;\"></div>\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzTabsNavComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.NgZone },
                { type: i0.Renderer2 },
                { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }
            ];
        };
        NzTabsNavComponent.propDecorators = {
            listOfNzTabLabelDirective: [{ type: i0.ContentChildren, args: [NzTabLabelDirective,] }],
            nzTabsInkBarDirective: [{ type: i0.ViewChild, args: [NzTabsInkBarDirective,] }],
            navContainerElement: [{ type: i0.ViewChild, args: ['navContainerElement',] }],
            navListElement: [{ type: i0.ViewChild, args: ['navListElement',] }],
            nzOnNextClick: [{ type: i0.Output }],
            nzOnPrevClick: [{ type: i0.Output }],
            nzTabBarExtraContent: [{ type: i0.Input }],
            nzAnimated: [{ type: i0.Input }],
            nzHideBar: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }],
            nzShowPagination: [{ type: i0.Input }],
            nzPositionMode: [{ type: i0.Input }],
            selectedIndex: [{ type: i0.Input }]
        };
        return NzTabsNavComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTabChangeEvent = /** @class */ (function () {
        function NzTabChangeEvent() {
        }
        return NzTabChangeEvent;
    }());
    var NzTabSetComponent = /** @class */ (function () {
        // tslint:disable-next-line:no-any
        function NzTabSetComponent(renderer, nzUpdateHostClassService, elementRef, document) {
            this.renderer = renderer;
            this.nzUpdateHostClassService = nzUpdateHostClassService;
            this.elementRef = elementRef;
            this.document = document;
            this._tabPosition = 'top';
            this._indexToSelect = 0;
            this._selectedIndex = null;
            this._type = 'line';
            this._size = 'default';
            this._animated = true;
            this.el = this.elementRef.nativeElement;
            this.prefixCls = 'ant-tabs';
            this.tabPositionMode = 'horizontal';
            this.inkBarAnimated = true;
            this.tabPaneAnimated = true;
            this.isViewInit = false;
            this.listOfNzTabComponent = [];
            this.nzShowPagination = true;
            this.nzHideAll = false;
            this.nzOnNextClick = new i0.EventEmitter();
            this.nzOnPrevClick = new i0.EventEmitter();
            this.nzSelectChange = new i0.EventEmitter(true);
        }
        Object.defineProperty(NzTabSetComponent.prototype, "nzAnimated", {
            get: /**
             * @return {?}
             */ function () {
                return this._animated;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._animated = value;
                this.setClassMap();
                this.inkBarAnimated = (this.nzAnimated === true) || (( /** @type {?} */(this.nzAnimated)).inkBar === true);
                this.tabPaneAnimated = (this.nzAnimated === true) || (( /** @type {?} */(this.nzAnimated)).tabPane === true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabSetComponent.prototype, "nzSelectedIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._indexToSelect = toNumber(value, null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabSetComponent.prototype, "nzSelectedIndexChange", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzSelectChange.pipe(operators.map(function (event) { return event.index; }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabSetComponent.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = value;
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabSetComponent.prototype, "nzTabPosition", {
            get: /**
             * @return {?}
             */ function () {
                return this._tabPosition;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._tabPosition === value) {
                    return;
                }
                this._tabPosition = value;
                if ((this._tabPosition === 'top') || (this._tabPosition === 'bottom')) {
                    this.tabPositionMode = 'horizontal';
                }
                else {
                    this.tabPositionMode = 'vertical';
                }
                this.setPosition(value);
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabSetComponent.prototype, "nzType", {
            get: /**
             * @return {?}
             */ function () {
                return this._type;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._type === value) {
                    return;
                }
                this._type = value;
                if (this._type === 'card') {
                    this.nzAnimated = false;
                }
                this.setClassMap();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NzTabSetComponent.prototype.setPosition = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.isViewInit) {
                    if (value === 'bottom') {
                        this.renderer.insertBefore(this.el, this.tabContent.nativeElement, this.nzTabsNavComponent.elementRef.nativeElement);
                    }
                    else {
                        this.renderer.insertBefore(this.el, this.nzTabsNavComponent.elementRef.nativeElement, this.tabContent.nativeElement);
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTabSetComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-vertical"] = (this.nzTabPosition === 'left') || (this.nzTabPosition === 'right'),
                    _a[this.prefixCls + "-" + this.nzTabPosition] = this.nzTabPosition,
                    _a[this.prefixCls + "-no-animation"] = (this.nzAnimated === false) || (( /** @type {?} */(this.nzAnimated)).tabPane === false),
                    _a[this.prefixCls + "-" + this.nzType] = this.nzType,
                    _a[this.prefixCls + "-large"] = this.nzSize === 'large',
                    _a[this.prefixCls + "-small"] = this.nzSize === 'small',
                    _a);
                this.nzUpdateHostClassService.updateHostClass(this.el, classMap);
            };
        /**
         * @param {?} index
         * @param {?} disabled
         * @return {?}
         */
        NzTabSetComponent.prototype.clickLabel = /**
         * @param {?} index
         * @param {?} disabled
         * @return {?}
         */
            function (index, disabled) {
                if (!disabled) {
                    this.nzSelectedIndex = index;
                    this.listOfNzTabComponent[index].nzClick.emit();
                }
            };
        /**
         * @return {?}
         */
        NzTabSetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzTabSetComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var indexToSelect = this._indexToSelect =
                    Math.min(this.listOfNzTabComponent.length - 1, Math.max(this._indexToSelect || 0, 0));
                // If there is a change in selected index, emit a change event. Should not trigger if
                // the selected index has not yet been initialized.
                if (this._selectedIndex !== indexToSelect && isNotNil(this._selectedIndex)) {
                    this.nzSelectChange.emit(this.createChangeEvent(indexToSelect));
                }
                // Setup the position for each tab and optionally setup an origin on the next selected tab.
                this.listOfNzTabComponent.forEach(function (tab, index) {
                    tab.position = index - indexToSelect;
                    // If there is already a selected tab, then set up an origin for the next selected tab
                    // if it doesn't have one already.
                    if (isNotNil(_this._selectedIndex) && tab.position === 0 && !tab.origin) {
                        tab.origin = indexToSelect - _this._selectedIndex;
                    }
                });
                this._selectedIndex = indexToSelect;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NzTabSetComponent.prototype.createChangeEvent = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                /** @type {?} */
                var event = new NzTabChangeEvent();
                event.index = index;
                if (this.listOfNzTabComponent && this.listOfNzTabComponent.length) {
                    event.tab = this.listOfNzTabComponent[index];
                    this.listOfNzTabComponent.forEach(function (item, i) {
                        if (i !== index) {
                            item.nzDeselect.emit();
                        }
                    });
                    event.tab.nzSelect.emit();
                }
                return event;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTabSetComponent.prototype.addTab = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.listOfNzTabComponent.push(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTabSetComponent.prototype.removeTab = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.listOfNzTabComponent.splice(this.listOfNzTabComponent.indexOf(value), 1);
            };
        // From https://github.com/react-component/tabs/blob/master/src/Tabs.js
        // Prevent focus to make the Tabs scroll offset
        /**
         * @param {?} $event
         * @return {?}
         */
        NzTabSetComponent.prototype.onScroll = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var target = /** @type {?} */ ($event.target);
                if (target.scrollLeft > 0) {
                    target.scrollLeft = 0;
                    if (this.document && this.document.activeElement) {
                        ( /** @type {?} */(this.document.activeElement)).blur();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTabSetComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.isViewInit = true;
                this.setPosition(this.nzTabPosition);
            };
        NzTabSetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tabset',
                        preserveWhitespaces: false,
                        providers: [NzUpdateHostClassService],
                        template: "<div \n  class=\"ant-tabs-bar\"\n  nz-tabs-nav\n  role=\"tablist\"\n  tabindex=\"0\"\n  [nzType]=\"nzType\"\n  [nzShowPagination]=\"nzShowPagination\"\n  [nzPositionMode]=\"tabPositionMode\"\n  [nzAnimated]=\"inkBarAnimated\"\n  [ngStyle]=\"nzTabBarStyle\"\n  [nzHideBar]=\"nzHideAll\"\n  [nzTabBarExtraContent]=\"nzTabBarExtraContent\"\n  [selectedIndex]=\"nzSelectedIndex\"\n  (nzOnNextClick)=\"nzOnNextClick.emit()\"\n  (nzOnPrevClick)=\"nzOnPrevClick.emit()\">\n  <div\n    nz-tab-label\n    role=\"tab\"\n    [style.margin-right.px]=\"nzTabBarGutter\"\n    [class.ant-tabs-tab-active]=\"(nzSelectedIndex == i) && !nzHideAll\"\n    [disabled]=\"tab.nzDisabled\"\n    (click)=\"clickLabel(i,tab.nzDisabled)\"\n    *ngFor=\"let tab of listOfNzTabComponent; let i = index\">\n    <ng-container *ngIf=\"tab.isTitleString; else titleTemplate\">{{ tab.nzTitle }}</ng-container>\n    <ng-template #titleTemplate>\n      <ng-template [ngTemplateOutlet]=\"tab.nzTitle\"></ng-template>\n    </ng-template>\n  </div>\n</div>\n<div\n  class=\"ant-tabs-content\"\n  #tabContent\n  [class.ant-tabs-content-animated]=\"tabPaneAnimated\"\n  [class.ant-tabs-content-no-animated]=\"!tabPaneAnimated\"\n  [style.margin-left.%]=\"tabPaneAnimated&&(-nzSelectedIndex*100)\">\n  <div nz-tab-body\n    class=\"ant-tabs-tabpane\"\n    [class.ant-tabs-tabpane-active]=\"(nzSelectedIndex == i) && !nzHideAll\"\n    [class.ant-tabs-tabpane-inactive]=\"(nzSelectedIndex != i) || nzHideAll\"\n    [content]=\"tab.content\"\n    *ngFor=\"let tab of listOfNzTabComponent; let i = index\">\n  </div>\n</div>",
                        host: {
                            '(scroll)': 'onScroll($event)'
                        },
                        styles: ["\n    :host {\n      display: block;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzTabSetComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: NzUpdateHostClassService },
                { type: i0.ElementRef },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i3.DOCUMENT,] }] }
            ];
        };
        NzTabSetComponent.propDecorators = {
            nzTabBarExtraContent: [{ type: i0.Input }],
            nzTabsNavComponent: [{ type: i0.ViewChild, args: [NzTabsNavComponent,] }],
            tabContent: [{ type: i0.ViewChild, args: ['tabContent',] }],
            nzShowPagination: [{ type: i0.Input }],
            nzHideAll: [{ type: i0.Input }],
            nzTabBarGutter: [{ type: i0.Input }],
            nzTabBarStyle: [{ type: i0.Input }],
            nzOnNextClick: [{ type: i0.Output }],
            nzOnPrevClick: [{ type: i0.Output }],
            nzAnimated: [{ type: i0.Input }],
            nzSelectedIndex: [{ type: i0.Input }],
            nzSelectedIndexChange: [{ type: i0.Output }],
            nzSelectChange: [{ type: i0.Output }],
            nzSize: [{ type: i0.Input }],
            nzTabPosition: [{ type: i0.Input }],
            nzType: [{ type: i0.Input }]
        };
        return NzTabSetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTabComponent = /** @class */ (function () {
        function NzTabComponent(nzTabSetComponent) {
            this.nzTabSetComponent = nzTabSetComponent;
            this._disabled = false;
            this.position = null;
            this.origin = null;
            this.nzClick = new i0.EventEmitter();
            this.nzSelect = new i0.EventEmitter();
            this.nzDeselect = new i0.EventEmitter();
        }
        Object.defineProperty(NzTabComponent.prototype, "nzDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTabComponent.prototype, "nzTitle", {
            get: /**
             * @return {?}
             */ function () {
                return this._title;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.isTitleString = !(value instanceof i0.TemplateRef);
                this._title = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTabComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.nzTabSetComponent.addTab(this);
            };
        /**
         * @return {?}
         */
        NzTabComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.nzTabSetComponent.removeTab(this);
            };
        NzTabComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tab',
                        preserveWhitespaces: false,
                        template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>",
                        host: {
                            '[class.ant-tabs-tabpane]': 'true'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzTabComponent.ctorParameters = function () {
            return [
                { type: NzTabSetComponent }
            ];
        };
        NzTabComponent.propDecorators = {
            nzDisabled: [{ type: i0.Input }],
            nzClick: [{ type: i0.Output }],
            nzSelect: [{ type: i0.Output }],
            nzDeselect: [{ type: i0.Output }],
            content: [{ type: i0.ViewChild, args: [i0.TemplateRef,] }],
            nzTitle: [{ type: i0.Input }]
        };
        return NzTabComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTabsModule = /** @class */ (function () {
        function NzTabsModule() {
        }
        NzTabsModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzTabComponent, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabsInkBarDirective, NzTabBodyComponent],
                        exports: [NzTabComponent, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabsInkBarDirective, NzTabBodyComponent],
                        imports: [i3.CommonModule, observers.ObserversModule, NzIconModule]
                    },] }
        ];
        return NzTabsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTagComponent = /** @class */ (function () {
        function NzTagComponent(renderer) {
            this.renderer = renderer;
            this._checked = false;
            this._mode = 'default';
            this.closed = false;
            this.nzAfterClose = new i0.EventEmitter();
            this.nzOnClose = new i0.EventEmitter();
            this.nzCheckedChange = new i0.EventEmitter();
        }
        Object.defineProperty(NzTagComponent.prototype, "nzMode", {
            get: /**
             * @return {?}
             */ function () {
                return this._mode;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._mode = value;
                this.updateClassMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTagComponent.prototype, "nzColor", {
            get: /**
             * @return {?}
             */ function () {
                return this._color;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._color = value;
                this.isPreset = this.isPresetColor(value);
                this.updateClassMap();
                this.updateColorStatus();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTagComponent.prototype, "nzChecked", {
            get: /**
             * @return {?}
             */ function () {
                return this._checked;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._checked = toBoolean(value);
                this.updateClassMap();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} color
         * @return {?}
         */
        NzTagComponent.prototype.isPresetColor = /**
         * @param {?=} color
         * @return {?}
         */
            function (color) {
                if (!color) {
                    return false;
                }
                return (/^(pink|red|yellow|orange|cyan|green|blue|purple|geekblue|magenta|volcano|gold|lime)(-inverse)?$/
                    .test(color));
            };
        /**
         * @return {?}
         */
        NzTagComponent.prototype.updateCheckedStatus = /**
         * @return {?}
         */
            function () {
                if (this.nzMode === 'checkable') {
                    this.nzChecked = !this.nzChecked;
                    this.nzCheckedChange.emit(this.nzChecked);
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTagComponent.prototype.closeTag = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.nzOnClose.emit(e);
                if (!e.defaultPrevented) {
                    this.closed = true;
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTagComponent.prototype.afterAnimation = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.closed && !e.fromState) {
                    this.nzAfterClose.emit();
                }
            };
        /**
         * @return {?}
         */
        NzTagComponent.prototype.updateClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var isPresetColor = this.isPresetColor(this.nzColor);
                this.classMap = (_a = {},
                    _a["ant-tag"] = true,
                    _a["ant-tag-has-color"] = this.nzColor && !isPresetColor,
                    _a["ant-tag-" + this.nzColor] = isPresetColor,
                    _a["ant-tag-checkable"] = this.nzMode === 'checkable',
                    _a["ant-tag-checkable-checked"] = this.nzChecked,
                    _a);
            };
        /**
         * @return {?}
         */
        NzTagComponent.prototype.updateColorStatus = /**
         * @return {?}
         */
            function () {
                if (this.wrapperElement && this.nzColor) {
                    if (this.isPreset) {
                        this.renderer.removeStyle(this.wrapperElement.nativeElement, 'background-color');
                    }
                    else {
                        this.renderer.setStyle(this.wrapperElement.nativeElement, 'background-color', this.nzColor);
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTagComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.updateClassMap();
            };
        /**
         * @return {?}
         */
        NzTagComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.updateColorStatus();
            };
        NzTagComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tag',
                        preserveWhitespaces: false,
                        animations: [animations.trigger('tagAnimation', [
                                animations.state('*', animations.style({ opacity: 1 })),
                                animations.transition('void => *', [
                                    animations.style({ opacity: 0 }),
                                    animations.animate('300ms cubic-bezier(0.78, 0.14, 0.15, 0.86)')
                                ]),
                                animations.state('void', animations.style({ opacity: 0 })),
                                animations.transition('* => void', [
                                    animations.style({ opacity: 1 }),
                                    animations.animate('300ms cubic-bezier(0.78, 0.14, 0.15, 0.86)')
                                ])
                            ])],
                        template: "<div\n  *ngIf=\"!closed\"\n  [ngClass]=\"classMap\"\n  #wrapperElement\n  [@tagAnimation]\n  (@tagAnimation.done)=\"afterAnimation($event)\"\n  (click)=\"updateCheckedStatus()\">\n  <ng-content></ng-content>\n  <i nz-icon type=\"close\" *ngIf=\"nzMode==='closeable'\" (click)=\"closeTag($event)\"></i>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        NzTagComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 }
            ];
        };
        NzTagComponent.propDecorators = {
            wrapperElement: [{ type: i0.ViewChild, args: ['wrapperElement',] }],
            nzAfterClose: [{ type: i0.Output }],
            nzOnClose: [{ type: i0.Output }],
            nzCheckedChange: [{ type: i0.Output }],
            nzMode: [{ type: i0.Input }],
            nzColor: [{ type: i0.Input }],
            nzChecked: [{ type: i0.Input }]
        };
        return NzTagComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTagModule = /** @class */ (function () {
        function NzTagModule() {
        }
        NzTagModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, NzIconModule],
                        declarations: [
                            NzTagComponent
                        ],
                        exports: [
                            NzTagComponent
                        ]
                    },] }
        ];
        return NzTagModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTimelineItemComponent = /** @class */ (function () {
        function NzTimelineItemComponent(renderer, cdr) {
            this.renderer = renderer;
            this.cdr = cdr;
            this.nzColor = 'blue';
            this.isLast = false;
        }
        /**
         * @return {?}
         */
        NzTimelineItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.tryUpdateCustomColor();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTimelineItemComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzColor"]) {
                    this.tryUpdateCustomColor();
                }
            };
        /**
         * @return {?}
         */
        NzTimelineItemComponent.prototype.detectChanges = /**
         * @return {?}
         */
            function () {
                this.cdr.detectChanges();
            };
        /**
         * @return {?}
         */
        NzTimelineItemComponent.prototype.tryUpdateCustomColor = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var defaultColors = ['blue', 'red', 'green'];
                /** @type {?} */
                var circle = this.liTemplate.nativeElement.querySelector('.ant-timeline-item-head');
                if (defaultColors.indexOf(this.nzColor) === -1) {
                    this.renderer.setStyle(circle, 'border-color', this.nzColor);
                }
                else {
                    this.renderer.removeStyle(circle, 'border-color');
                }
            };
        NzTimelineItemComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        selector: 'nz-timeline-item, [nz-timeline-item]',
                        template: "<li\n  class=\"ant-timeline-item\"\n  [class.ant-timeline-item-right]=\"position === 'right'\"\n  [class.ant-timeline-item-left]=\"position === 'left'\"\n  [class.ant-timeline-item-last]=\"isLast\"\n  #liTemplate>\n  <div class=\"ant-timeline-item-tail\"></div>\n  <div\n    class=\"ant-timeline-item-head\"\n    [class.ant-timeline-item-head-red]=\"nzColor === 'red'\"\n    [class.ant-timeline-item-head-blue]=\"nzColor === 'blue'\"\n    [class.ant-timeline-item-head-green]=\"nzColor === 'green'\"\n    [class.ant-timeline-item-head-custom]=\"!!nzDot\">\n    <ng-container *nzStringTemplateOutlet=\"nzDot\">{{ nzDot }}</ng-container>\n  </div>\n  <div class=\"ant-timeline-item-content\">\n    <ng-content></ng-content>\n  </div>\n</li>"
                    }] }
        ];
        /** @nocollapse */
        NzTimelineItemComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzTimelineItemComponent.propDecorators = {
            liTemplate: [{ type: i0.ViewChild, args: ['liTemplate',] }],
            nzColor: [{ type: i0.Input }],
            nzDot: [{ type: i0.Input }]
        };
        return NzTimelineItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} parent
     * @return {?}
     */
    function reverseChildNodes(parent) {
        /** @type {?} */
        var children = parent.childNodes;
        /** @type {?} */
        var length = children.length;
        if (length) {
            /** @type {?} */
            var nodes_1 = [];
            children.forEach(function (node, i) { return nodes_1[i] = node; });
            while (length--) {
                parent.appendChild(nodes_1[length]);
            }
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTimelineComponent = /** @class */ (function () {
        function NzTimelineComponent(cdr) {
            this.cdr = cdr;
            this.nzReverse = false;
            this.isPendingBoolean = false;
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTimelineComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var modeChanges = changes["nzMode"];
                /** @type {?} */
                var reverseChanges = changes["nzReverse"];
                /** @type {?} */
                var pendingChanges = changes["nzPending"];
                if (modeChanges && (modeChanges.previousValue !== modeChanges.currentValue || modeChanges.isFirstChange())) {
                    this.updateChildren();
                }
                if (reverseChanges && reverseChanges.previousValue !== reverseChanges.currentValue && !reverseChanges.isFirstChange()) {
                    this.reverseChildTimelineDots();
                }
                if (pendingChanges) {
                    this.isPendingBoolean = pendingChanges.currentValue === true;
                }
            };
        /**
         * @return {?}
         */
        NzTimelineComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.updateChildren();
                if (this.listOfTimeLine) {
                    this.listOfTimeLine.changes.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                        _this.updateChildren();
                    });
                }
            };
        /**
         * @return {?}
         */
        NzTimelineComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.destroy$.complete();
            };
        /**
         * @return {?}
         */
        NzTimelineComponent.prototype.updateChildren = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.listOfTimeLine && this.listOfTimeLine.length) {
                    /** @type {?} */
                    var length_1 = this.listOfTimeLine.length;
                    this.listOfTimeLine.toArray().forEach(function (item, index) {
                        item.isLast = !_this.nzReverse ? index === length_1 - 1 : index === 0;
                        item.position = _this.nzMode === 'left' || !_this.nzMode
                            ? undefined
                            : _this.nzMode === 'right'
                                ? 'right'
                                : _this.nzMode === 'alternate' && index % 2 === 0 ? 'left' : 'right';
                        item.detectChanges();
                    });
                    this.cdr.markForCheck();
                }
            };
        /**
         * @return {?}
         */
        NzTimelineComponent.prototype.reverseChildTimelineDots = /**
         * @return {?}
         */
            function () {
                reverseChildNodes(/** @type {?} */ (this.timeline.nativeElement));
                this.updateChildren();
            };
        NzTimelineComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        selector: 'nz-timeline',
                        template: "<ul\n  class=\"ant-timeline\"\n  [class.ant-timeline-right]=\"nzMode === 'right'\"\n  [class.ant-timeline-alternate]=\"nzMode === 'alternate'\"\n  [class.ant-timeline-pending]=\"!!nzPending\"\n  [class.ant-timeline-reverse]=\"nzReverse\"\n  #timeline>\n  <!-- User inserted timeline dots. -->\n  <ng-content></ng-content>\n  <!-- Pending dot. -->\n  <li *ngIf=\"nzPending\" class=\"ant-timeline-item ant-timeline-item-pending\">\n    <div class=\"ant-timeline-item-tail\"></div>\n    <div class=\"ant-timeline-item-head ant-timeline-item-head-custom ant-timeline-item-head-blue\">\n      <ng-container *nzStringTemplateOutlet=\"nzPendingDot\">\n        {{ nzPendingDot }}<i *ngIf=\"!nzPendingDot\" nz-icon type=\"loading\"></i>\n      </ng-container>\n    </div>\n    <div class=\"ant-timeline-item-content\">\n      <ng-container *nzStringTemplateOutlet=\"nzPending\">\n        {{ isPendingBoolean ? '' : nzPending }}\n      </ng-container>\n    </div>\n  </li>\n</ul>\n"
                    }] }
        ];
        /** @nocollapse */
        NzTimelineComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzTimelineComponent.propDecorators = {
            timeline: [{ type: i0.ViewChild, args: ['timeline',] }],
            listOfTimeLine: [{ type: i0.ContentChildren, args: [NzTimelineItemComponent,] }],
            _pendingContent: [{ type: i0.ContentChild, args: ['pending',] }],
            nzMode: [{ type: i0.Input }],
            nzPending: [{ type: i0.Input }],
            nzPendingDot: [{ type: i0.Input }],
            nzReverse: [{ type: i0.Input }]
        };
        return NzTimelineComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTimelineModule = /** @class */ (function () {
        function NzTimelineModule() {
        }
        NzTimelineModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NzTimelineItemComponent, NzTimelineComponent],
                        exports: [NzTimelineItemComponent, NzTimelineComponent],
                        imports: [i3.CommonModule, NzIconModule, NzAddOnModule]
                    },] }
        ];
        return NzTimelineModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTransferListComponent = /** @class */ (function () {
        // #endregion
        function NzTransferListComponent(el, updateHostClassService, cdr) {
            this.el = el;
            this.updateHostClassService = updateHostClassService;
            this.cdr = cdr;
            // #region fields
            this.direction = '';
            this.titleText = '';
            this.dataSource = [];
            this.itemUnit = '';
            this.itemsUnit = '';
            this.filter = '';
            // events
            this.handleSelectAll = new i0.EventEmitter();
            this.handleSelect = new i0.EventEmitter();
            this.filterChange = new i0.EventEmitter();
            // #endregion
            // #region styles
            this.prefixCls = 'ant-transfer-list';
            // #endregion
            // #region select all
            this.stat = {
                checkAll: false,
                checkHalf: false,
                checkCount: 0,
                shownCount: 0
            };
        }
        /**
         * @return {?}
         */
        NzTransferListComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-with-footer"] = !!this.footer,
                    _a);
                this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);
            };
        /**
         * @param {?} status
         * @return {?}
         */
        NzTransferListComponent.prototype.onHandleSelectAll = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                this.dataSource.forEach(function (item) {
                    if (!item.disabled && !item._hiden) {
                        item.checked = status;
                    }
                });
                this.updateCheckStatus();
                this.handleSelectAll.emit(status);
            };
        /**
         * @return {?}
         */
        NzTransferListComponent.prototype.updateCheckStatus = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var validCount = this.dataSource.filter(function (w) { return !w.disabled; }).length;
                this.stat.checkCount = this.dataSource.filter(function (w) { return w.checked && !w.disabled; }).length;
                this.stat.shownCount = this.dataSource.filter(function (w) { return !w._hiden; }).length;
                this.stat.checkAll = validCount > 0 && validCount === this.stat.checkCount;
                this.stat.checkHalf = this.stat.checkCount > 0 && !this.stat.checkAll;
            };
        // #endregion
        // #region search
        /**
         * @param {?} value
         * @return {?}
         */
        NzTransferListComponent.prototype.handleFilter = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this.filter = value;
                this.dataSource.forEach(function (item) {
                    item._hiden = value.length > 0 && !_this.matchFilter(value, item);
                });
                this.stat.shownCount = this.dataSource.filter(function (w) { return !w._hiden; }).length;
                this.filterChange.emit({ direction: this.direction, value: value });
            };
        /**
         * @return {?}
         */
        NzTransferListComponent.prototype.handleClear = /**
         * @return {?}
         */
            function () {
                this.handleFilter('');
            };
        /**
         * @param {?} text
         * @param {?} item
         * @return {?}
         */
        NzTransferListComponent.prototype.matchFilter = /**
         * @param {?} text
         * @param {?} item
         * @return {?}
         */
            function (text, item) {
                if (this.filterOption) {
                    return this.filterOption(text, item);
                }
                return item.title.includes(text);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTransferListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if ('footer' in changes) {
                    this.setClassMap();
                }
            };
        /**
         * @return {?}
         */
        NzTransferListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzTransferListComponent.prototype.markForCheck = /**
         * @return {?}
         */
            function () {
                this.updateCheckStatus();
                this.cdr.markForCheck();
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NzTransferListComponent.prototype._handleSelect = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this.disabled || item.disabled) {
                    return;
                }
                item.checked = !item.checked;
                this.updateCheckStatus();
                this.handleSelect.emit(item);
            };
        NzTransferListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-transfer-list',
                        preserveWhitespaces: false,
                        providers: [NzUpdateHostClassService],
                        template: "<div class=\"ant-transfer-list-header\">\n  <label nz-checkbox [nzChecked]=\"stat.checkAll\" (nzCheckedChange)=\"onHandleSelectAll($event)\"\n    [nzIndeterminate]=\"stat.checkHalf\" [nzDisabled]=\"stat.shownCount == 0 || disabled\">\n  </label>\n  <span class=\"ant-transfer-list-header-selected\">\n    <span>{{ (stat.checkCount > 0 ? stat.checkCount + '/' : '') + stat.shownCount }} {{ dataSource.length > 1 ? itemsUnit : itemUnit }}</span>\n    <span *ngIf=\"titleText\" class=\"ant-transfer-list-header-title\">{{ titleText }}</span>\n  </span>\n</div>\n<div class=\"{{showSearch ? 'ant-transfer-list-body ant-transfer-list-body-with-search' : 'ant-transfer-list-body'}}\"\n  [ngClass]=\"{'ant-transfer__nodata': stat.shownCount === 0}\">\n  <div *ngIf=\"showSearch\" class=\"ant-transfer-list-body-search-wrapper\">\n    <div nz-transfer-search\n      (valueChanged)=\"handleFilter($event)\"\n      (valueClear)=\"handleClear()\"\n      [placeholder]=\"searchPlaceholder\"\n      [disabled]=\"disabled\"\n      [value]=\"filter\"></div>\n  </div>\n  <ul class=\"ant-transfer-list-content\">\n    <ng-container *ngFor=\"let item of dataSource\">\n      <li *ngIf=\"!item._hiden\" (click)=\"_handleSelect(item)\"\n        class=\"ant-transfer-list-content-item\" [ngClass]=\"{'ant-transfer-list-content-item-disabled': disabled || item.disabled}\">\n        <label nz-checkbox [nzChecked]=\"item.checked\" [nzDisabled]=\"disabled || item.disabled\">\n          <ng-container *ngIf=\"!render; else renderContainer\">{{ item.title }}</ng-container>\n          <ng-template #renderContainer [ngTemplateOutlet]=\"render\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n        </label>\n      </li>\n    </ng-container>\n  </ul>\n  <div class=\"ant-transfer-list-body-not-found\">{{ notFoundContent }}</div>\n</div>\n<div *ngIf=\"footer\" class=\"ant-transfer-list-footer\">\n  <ng-template [ngTemplateOutlet]=\"footer\" [ngTemplateOutletContext]=\"{ $implicit: direction }\"></ng-template>\n</div>",
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzTransferListComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NzUpdateHostClassService },
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzTransferListComponent.propDecorators = {
            direction: [{ type: i0.Input }],
            titleText: [{ type: i0.Input }],
            dataSource: [{ type: i0.Input }],
            itemUnit: [{ type: i0.Input }],
            itemsUnit: [{ type: i0.Input }],
            filter: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            showSearch: [{ type: i0.Input }],
            searchPlaceholder: [{ type: i0.Input }],
            notFoundContent: [{ type: i0.Input }],
            filterOption: [{ type: i0.Input }],
            render: [{ type: i0.Input }],
            footer: [{ type: i0.Input }],
            handleSelectAll: [{ type: i0.Output }],
            handleSelect: [{ type: i0.Output }],
            filterChange: [{ type: i0.Output }]
        };
        return NzTransferListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTransferSearchComponent = /** @class */ (function () {
        // endregion
        function NzTransferSearchComponent(cdr) {
            this.cdr = cdr;
            this.valueChanged = new i0.EventEmitter();
            this.valueClear = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        NzTransferSearchComponent.prototype._handle = /**
         * @return {?}
         */
            function () {
                this.valueChanged.emit(this.value);
            };
        /**
         * @return {?}
         */
        NzTransferSearchComponent.prototype._clear = /**
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return;
                }
                this.value = '';
                this.valueClear.emit();
            };
        /**
         * @return {?}
         */
        NzTransferSearchComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.cdr.detectChanges();
            };
        NzTransferSearchComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-transfer-search]',
                        preserveWhitespaces: false,
                        template: "<input [(ngModel)]=\"value\" (ngModelChange)=\"_handle()\" [disabled]=\"disabled\" [placeholder]=\"placeholder\"\n  class=\"ant-input ant-transfer-list-search\" [ngClass]=\"{'ant-input-disabled': disabled}\">\n<a *ngIf=\"value && value.length > 0; else def\" class=\"ant-transfer-list-search-action\" (click)=\"_clear()\">\n  <i nz-icon type=\"close-circle\"></i>\n</a>\n<ng-template #def>\n  <span class=\"ant-transfer-list-search-action\"><i nz-icon type=\"search\"></i></span>\n</ng-template>",
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzTransferSearchComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NzTransferSearchComponent.propDecorators = {
            placeholder: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            valueChanged: [{ type: i0.Output }],
            valueClear: [{ type: i0.Output }]
        };
        return NzTransferSearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTransferComponent = /** @class */ (function () {
        // #endregion
        function NzTransferComponent(cdr, i18n) {
            var _this = this;
            this.cdr = cdr;
            this.i18n = i18n;
            this.unsubscribe$ = new rxjs.Subject();
            // tslint:disable-next-line:no-any
            this.locale = {};
            this.leftFilter = '';
            this.rightFilter = '';
            // #region fields
            this.nzDisabled = false;
            this.nzDataSource = [];
            this.nzTitles = ['', ''];
            this.nzOperations = [];
            this.nzCanMove = function (arg) { return rxjs.of(arg.list); };
            this.nzShowSearch = false;
            // events
            this.nzChange = new i0.EventEmitter();
            this.nzSearchChange = new i0.EventEmitter();
            this.nzSelectChange = new i0.EventEmitter();
            // #endregion
            // #region process data
            // left
            this.leftDataSource = [];
            // right
            this.rightDataSource = [];
            this.handleLeftSelectAll = function (checked) { return _this.handleSelect('left', checked); };
            this.handleRightSelectAll = function (checked) { return _this.handleSelect('right', checked); };
            this.handleLeftSelect = function (item) { return _this.handleSelect('left', item.checked, item); };
            this.handleRightSelect = function (item) { return _this.handleSelect('right', item.checked, item); };
            // #endregion
            // #region operation
            this.leftActive = false;
            this.rightActive = false;
            this.moveToLeft = function () { return _this.moveTo('left'); };
            this.moveToRight = function () { return _this.moveTo('right'); };
        }
        /**
         * @return {?}
         */
        NzTransferComponent.prototype.splitDataSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.leftDataSource = [];
                this.rightDataSource = [];
                this.nzDataSource.forEach(function (record) {
                    if (record.direction === 'right') {
                        _this.rightDataSource.push(record);
                    }
                    else {
                        _this.leftDataSource.push(record);
                    }
                });
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        NzTransferComponent.prototype.getCheckedData = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                return this[direction === 'left' ? 'leftDataSource' : 'rightDataSource'].filter(function (w) { return w.checked; });
            };
        /**
         * @param {?} direction
         * @param {?} checked
         * @param {?=} item
         * @return {?}
         */
        NzTransferComponent.prototype.handleSelect = /**
         * @param {?} direction
         * @param {?} checked
         * @param {?=} item
         * @return {?}
         */
            function (direction, checked, item) {
                /** @type {?} */
                var list = this.getCheckedData(direction);
                this.updateOperationStatus(direction, list.length);
                this.nzSelectChange.emit({ direction: direction, checked: checked, list: list, item: item });
            };
        /**
         * @param {?} ret
         * @return {?}
         */
        NzTransferComponent.prototype.handleFilterChange = /**
         * @param {?} ret
         * @return {?}
         */
            function (ret) {
                this.nzSearchChange.emit(ret);
            };
        /**
         * @param {?} direction
         * @param {?=} count
         * @return {?}
         */
        NzTransferComponent.prototype.updateOperationStatus = /**
         * @param {?} direction
         * @param {?=} count
         * @return {?}
         */
            function (direction, count) {
                this[direction === 'right' ? 'leftActive' : 'rightActive'] = (typeof count === 'undefined' ? this.getCheckedData(direction).filter(function (w) { return !w.disabled; }).length : count) > 0;
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        NzTransferComponent.prototype.moveTo = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                var _this = this;
                /** @type {?} */
                var oppositeDirection = direction === 'left' ? 'right' : 'left';
                this.updateOperationStatus(oppositeDirection, 0);
                /** @type {?} */
                var datasource = direction === 'left' ? this.rightDataSource : this.leftDataSource;
                /** @type {?} */
                var moveList = datasource.filter(function (item) { return item.checked === true && !item.disabled; });
                this.nzCanMove({ direction: direction, list: moveList })
                    .subscribe(function (newMoveList) { return _this.truthMoveTo(direction, newMoveList.filter(function (i) { return !!i; })); }, function () { return moveList.forEach(function (i) { return i.checked = false; }); });
            };
        /**
         * @param {?} direction
         * @param {?} list
         * @return {?}
         */
        NzTransferComponent.prototype.truthMoveTo = /**
         * @param {?} direction
         * @param {?} list
         * @return {?}
         */
            function (direction, list) {
                var e_1, _a;
                /** @type {?} */
                var oppositeDirection = direction === 'left' ? 'right' : 'left';
                /** @type {?} */
                var datasource = direction === 'left' ? this.rightDataSource : this.leftDataSource;
                /** @type {?} */
                var targetDatasource = direction === 'left' ? this.leftDataSource : this.rightDataSource;
                try {
                    for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                        var item = list_1_1.value;
                        item.checked = false;
                        targetDatasource.push(item);
                        datasource.splice(datasource.indexOf(item), 1);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (list_1_1 && !list_1_1.done && (_a = list_1.return))
                            _a.call(list_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                this.updateOperationStatus(oppositeDirection);
                this.nzChange.emit({
                    from: oppositeDirection,
                    to: direction,
                    list: list
                });
                this.markForCheckAllList();
            };
        /**
         * @return {?}
         */
        NzTransferComponent.prototype.markForCheckAllList = /**
         * @return {?}
         */
            function () {
                if (!this.lists) {
                    return;
                }
                this.lists.forEach(function (i) { return i.markForCheck(); });
            };
        /**
         * @return {?}
         */
        NzTransferComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18n.localeChange.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () {
                    _this.locale = _this.i18n.getLocaleData('Transfer');
                    _this.markForCheckAllList();
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTransferComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if ('nzDataSource' in changes) {
                    this.splitDataSource();
                    this.updateOperationStatus('left');
                    this.updateOperationStatus('right');
                    this.cdr.detectChanges();
                    this.markForCheckAllList();
                }
            };
        /**
         * @return {?}
         */
        NzTransferComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe$.next();
                this.unsubscribe$.complete();
            };
        NzTransferComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-transfer',
                        preserveWhitespaces: false,
                        template: "<nz-transfer-list class=\"ant-transfer-list\" [ngStyle]=\"nzListStyle\" data-direction=\"left\"\n  [titleText]=\"nzTitles[0]\"\n  [dataSource]=\"leftDataSource\"\n  [filter]=\"leftFilter\"\n  [filterOption]=\"nzFilterOption\"\n  (filterChange)=\"handleFilterChange($event)\"\n  [render]=\"nzRender\"\n  [disabled]=\"nzDisabled\"\n  [showSearch]=\"nzShowSearch\"\n  [searchPlaceholder]=\"nzSearchPlaceholder || locale.searchPlaceholder\"\n  [notFoundContent]=\"nzNotFoundContent || locale.notFoundContent\"\n  [itemUnit]=\"nzItemUnit || locale.itemUnit\"\n  [itemsUnit]=\"nzItemsUnit || locale.itemsUnit\"\n  [footer]=\"nzFooter\"\n  (handleSelect)=\"handleLeftSelect($event)\"\n  (handleSelectAll)=\"handleLeftSelectAll($event)\"></nz-transfer-list>\n<div class=\"ant-transfer-operation\">\n  <button nz-button (click)=\"moveToLeft()\" [disabled]=\"nzDisabled || !leftActive\" [nzType]=\"'primary'\" [nzSize]=\"'small'\">\n    <i nz-icon type=\"left\"></i><span *ngIf=\"nzOperations[1]\">{{ nzOperations[1] }}</span>\n  </button>\n  <button nz-button (click)=\"moveToRight()\" [disabled]=\"nzDisabled || !rightActive\" [nzType]=\"'primary'\" [nzSize]=\"'small'\">\n    <i nz-icon type=\"right\"></i><span *ngIf=\"nzOperations[0]\">{{ nzOperations[0] }}</span>\n  </button>\n</div>\n<nz-transfer-list class=\"ant-transfer-list\" [ngStyle]=\"nzListStyle\" data-direction=\"right\"\n  [titleText]=\"nzTitles[1]\"\n  [dataSource]=\"rightDataSource\"\n  [filter]=\"rightFilter\"\n  [filterOption]=\"nzFilterOption\"\n  (filterChange)=\"handleFilterChange($event)\"\n  [render]=\"nzRender\"\n  [disabled]=\"nzDisabled\"\n  [showSearch]=\"nzShowSearch\"\n  [searchPlaceholder]=\"nzSearchPlaceholder || locale.searchPlaceholder\"\n  [notFoundContent]=\"nzNotFoundContent || locale.notFoundContent\"\n  [itemUnit]=\"nzItemUnit || locale.itemUnit\"\n  [itemsUnit]=\"nzItemsUnit || locale.itemsUnit\"\n  [footer]=\"nzFooter\"\n  (handleSelect)=\"handleRightSelect($event)\"\n  (handleSelectAll)=\"handleRightSelectAll($event)\"></nz-transfer-list>",
                        host: {
                            '[class.ant-transfer]': 'true',
                            '[class.ant-transfer-disabled]': 'nzDisabled'
                        },
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzTransferComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: NzI18nService }
            ];
        };
        NzTransferComponent.propDecorators = {
            lists: [{ type: i0.ViewChildren, args: [NzTransferListComponent,] }],
            nzDisabled: [{ type: i0.Input }],
            nzDataSource: [{ type: i0.Input }],
            nzTitles: [{ type: i0.Input }],
            nzOperations: [{ type: i0.Input }],
            nzListStyle: [{ type: i0.Input }],
            nzItemUnit: [{ type: i0.Input }],
            nzItemsUnit: [{ type: i0.Input }],
            nzCanMove: [{ type: i0.Input }],
            nzRender: [{ type: i0.Input }],
            nzFooter: [{ type: i0.Input }],
            nzShowSearch: [{ type: i0.Input }],
            nzFilterOption: [{ type: i0.Input }],
            nzSearchPlaceholder: [{ type: i0.Input }],
            nzNotFoundContent: [{ type: i0.Input }],
            nzChange: [{ type: i0.Output }],
            nzSearchChange: [{ type: i0.Output }],
            nzSelectChange: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTransferComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTransferComponent.prototype, "nzShowSearch", void 0);
        return NzTransferComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTransferModule = /** @class */ (function () {
        function NzTransferModule() {
        }
        NzTransferModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, NzCheckboxModule, NzButtonModule, NzInputModule, NzI18nModule, NzIconModule],
                        declarations: [NzTransferComponent, NzTransferListComponent, NzTransferSearchComponent],
                        exports: [NzTransferComponent]
                    },] }
        ];
        return NzTransferModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} node
     * @return {?}
     */
    function isCheckDisabled(node) {
        var isDisabled = node.isDisabled, isDisableCheckbox = node.isDisableCheckbox;
        return !!(isDisabled || isDisableCheckbox);
    }
    /**
     * @param {?} needle
     * @param {?} haystack
     * @return {?}
     */
    function isInArray(needle, haystack) {
        return (haystack.length > 0 && haystack.indexOf(needle) > -1);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeNode = /** @class */ (function () {
        function NzTreeNode(option, parent) {
            if (parent === void 0) {
                parent = null;
            }
            var _this = this;
            this.level = 0;
            this.title = option.title || '---';
            this.key = option.key || null;
            this.isLeaf = option.isLeaf || false;
            this.origin = option;
            this.children = [];
            this.parentNode = parent;
            // option params
            this.isChecked = option.checked || false;
            this.isSelectable = option.disabled || (option.selectable === false ? false : true);
            this.isDisabled = option.disabled || false;
            this.isDisableCheckbox = option.disableCheckbox || false;
            this.isExpanded = option.isLeaf ? false : (option.expanded || false);
            this.isAllChecked = option.checked || false;
            this.isHalfChecked = false;
            this.isSelected = (!option.disabled && option.selected) || false;
            this.isLoading = false;
            this.isMatched = false;
            /**
                 * parent's checked status will affect children while initializing
                 */
            if (parent) {
                this.level = parent.level + 1;
            }
            else {
                this.level = 0;
            }
            if (typeof (option.children) !== 'undefined' && option.children !== null) {
                option.children.forEach(function (nodeOptions) {
                    if (option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {
                        nodeOptions.checked = option.checked;
                    }
                    _this.children.push(new NzTreeNode(nodeOptions, _this));
                });
            }
        }
        /**
         * @param {?=} checked
         * @param {?=} halfChecked
         * @return {?}
         */
        NzTreeNode.prototype.setChecked = /**
         * @param {?=} checked
         * @param {?=} halfChecked
         * @return {?}
         */
            function (checked, halfChecked) {
                if (checked === void 0) {
                    checked = false;
                }
                if (halfChecked === void 0) {
                    halfChecked = false;
                }
                this.origin.checked = checked;
                this.isChecked = checked;
                this.isAllChecked = checked;
                this.isHalfChecked = halfChecked;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTreeNode.prototype.setExpanded = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.origin.expanded = value;
                this.isExpanded = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTreeNode.prototype.setSelected = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.origin.selected = value;
                this.isSelected = value;
            };
        /**
         * @return {?}
         */
        NzTreeNode.prototype.getParentNode = /**
         * @return {?}
         */
            function () {
                return this.parentNode;
            };
        /**
         * @return {?}
         */
        NzTreeNode.prototype.getChildren = /**
         * @return {?}
         */
            function () {
                return this.children;
            };
        /**
         * 支持按索引位置插入,叶子节点不可添加
         * @param {?} children
         * @param {?=} childPos
         * @return {?}
         */
        NzTreeNode.prototype.addChildren = /**
         * 支持按索引位置插入,叶子节点不可添加
         * @param {?} children
         * @param {?=} childPos
         * @return {?}
         */
            function (children, childPos) {
                var _this = this;
                if (childPos === void 0) {
                    childPos = -1;
                }
                if (!this.isLeaf) {
                    children.forEach(function (node) {
                        /** @type {?} */
                        var refreshLevel = function (n) {
                            n.getChildren().forEach(function (c) {
                                c.level = c.getParentNode().level + 1;
                                // flush origin
                                c.origin.level = c.level;
                                refreshLevel(c);
                            });
                        };
                        /** @type {?} */
                        var child = node;
                        if (child instanceof NzTreeNode) {
                            child.parentNode = _this;
                        }
                        else {
                            child = new NzTreeNode(node, _this);
                        }
                        child.level = _this.level + 1;
                        child.origin.level = child.level;
                        refreshLevel(child);
                        try {
                            childPos === -1 ? _this.children.push(child) : _this.children.splice(childPos, 0, child);
                            // flush origin
                        }
                        catch (e) {
                        }
                    });
                    this.origin.children = this.getChildren().map(function (v) { return v.origin; });
                    // remove loading state
                    this.isLoading = false;
                }
            };
        /**
         * @return {?}
         */
        NzTreeNode.prototype.clearChildren = /**
         * @return {?}
         */
            function () {
                this.children = [];
            };
        return NzTreeNode;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeService = /** @class */ (function () {
        function NzTreeService() {
            this.DRAG_SIDE_RANGE = 0.25;
            this.DRAG_MIN_GAP = 2;
            this.conductOption = {
                isCheckStrictly: false
            };
            this.rootNodes = [];
            this.selectedNodeList = [];
            this.expandedNodeList = [];
            this.checkedNodeList = [];
            this.halfCheckedNodeList = [];
            this.matchedNodeList = [];
        }
        /**
         * reset tree nodes will clear default node list
         */
        /**
         * reset tree nodes will clear default node list
         * @param {?} nzNodes
         * @return {?}
         */
        NzTreeService.prototype.initTree = /**
         * reset tree nodes will clear default node list
         * @param {?} nzNodes
         * @return {?}
         */
            function (nzNodes) {
                var _this = this;
                this.rootNodes = nzNodes;
                this.expandedNodeList = [];
                this.selectedNodeList = [];
                this.halfCheckedNodeList = [];
                this.checkedNodeList = [];
                this.expandedNodeList = [];
                this.matchedNodeList = [];
                setTimeout(function () {
                    _this.refreshCheckState(_this.conductOption.isCheckStrictly);
                });
            };
        /**
         * @return {?}
         */
        NzTreeService.prototype.getSelectedNode = /**
         * @return {?}
         */
            function () {
                return this.selectedNode;
            };
        /**
         * get some list
         */
        /**
         * get some list
         * @return {?}
         */
        NzTreeService.prototype.getSelectedNodeList = /**
         * get some list
         * @return {?}
         */
            function () {
                return this.conductNodeState('select');
            };
        /**
         * return checked nodes
         */
        /**
         * return checked nodes
         * @return {?}
         */
        NzTreeService.prototype.getCheckedNodeList = /**
         * return checked nodes
         * @return {?}
         */
            function () {
                return this.conductNodeState('check');
            };
        /**
         * @return {?}
         */
        NzTreeService.prototype.getHalfCheckedNodeList = /**
         * @return {?}
         */
            function () {
                return this.conductNodeState('halfCheck');
            };
        /**
         * return expanded nodes
         */
        /**
         * return expanded nodes
         * @return {?}
         */
        NzTreeService.prototype.getExpandedNodeList = /**
         * return expanded nodes
         * @return {?}
         */
            function () {
                return this.conductNodeState('expand');
            };
        /**
         * return search matched nodes
         */
        /**
         * return search matched nodes
         * @return {?}
         */
        NzTreeService.prototype.getMatchedNodeList = /**
         * return search matched nodes
         * @return {?}
         */
            function () {
                return this.conductNodeState('match');
            };
        // tslint:disable-next-line:no-any
        /**
         * @param {?} value
         * @return {?}
         */
        NzTreeService.prototype.isArrayOfNzTreeNode = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value.every(function (item) { return item instanceof NzTreeNode; });
            };
        /**
         * reset selectedNodeList
         */
        /**
         * reset selectedNodeList
         * @param {?} selectedKeys
         * @param {?} nzNodes
         * @param {?=} isMulti
         * @return {?}
         */
        NzTreeService.prototype.calcSelectedKeys = /**
         * reset selectedNodeList
         * @param {?} selectedKeys
         * @param {?} nzNodes
         * @param {?=} isMulti
         * @return {?}
         */
            function (selectedKeys, nzNodes, isMulti) {
                var _this = this;
                if (isMulti === void 0) {
                    isMulti = false;
                }
                this.selectedNodeList = [];
                /** @type {?} */
                var calc = function (nodes) {
                    nodes.forEach(function (node) {
                        if (isInArray(node.key, selectedKeys)) {
                            node.setSelected(true);
                        }
                        else {
                            node.setSelected(false);
                        }
                        _this.setSelectedNodeList(node, isMulti);
                        if (node.getChildren().length > 0) {
                            calc(node.getChildren());
                        }
                    });
                };
                calc(nzNodes);
            };
        /**
         * reset expandedNodeList
         */
        /**
         * reset expandedNodeList
         * @param {?} expandedKeys
         * @param {?} nzNodes
         * @return {?}
         */
        NzTreeService.prototype.calcExpandedKeys = /**
         * reset expandedNodeList
         * @param {?} expandedKeys
         * @param {?} nzNodes
         * @return {?}
         */
            function (expandedKeys, nzNodes) {
                var _this = this;
                this.expandedNodeList = [];
                /** @type {?} */
                var calc = function (nodes) {
                    nodes.forEach(function (node) {
                        if (isInArray(node.key, expandedKeys)) {
                            node.setExpanded(true);
                            _this.setExpandedNodeList(node);
                        }
                        else {
                            node.setExpanded(false);
                        }
                        if (node.getChildren().length > 0) {
                            calc(node.getChildren());
                        }
                    });
                };
                calc(nzNodes);
            };
        /**
         * reset checkedNodeList
         */
        /**
         * reset checkedNodeList
         * @param {?} checkedKeys
         * @param {?} nzNodes
         * @param {?=} isCheckStrictly
         * @return {?}
         */
        NzTreeService.prototype.calcCheckedKeys = /**
         * reset checkedNodeList
         * @param {?} checkedKeys
         * @param {?} nzNodes
         * @param {?=} isCheckStrictly
         * @return {?}
         */
            function (checkedKeys, nzNodes, isCheckStrictly) {
                var _this = this;
                if (isCheckStrictly === void 0) {
                    isCheckStrictly = false;
                }
                this.checkedNodeList = [];
                this.halfCheckedNodeList = [];
                /** @type {?} */
                var calc = function (nodes) {
                    nodes.forEach(function (node) {
                        if (isInArray(node.key, checkedKeys)) {
                            node.setChecked(true);
                            _this.setCheckedNodeList(node);
                        }
                        else {
                            node.setChecked(false);
                        }
                        if (node.getChildren().length > 0) {
                            calc(node.getChildren());
                        }
                    });
                };
                calc(nzNodes);
                // controlled state
                this.refreshCheckState(isCheckStrictly);
            };
        /**
         * set drag node
         */
        /**
         * set drag node
         * @param {?=} node
         * @return {?}
         */
        NzTreeService.prototype.setSelectedNode = /**
         * set drag node
         * @param {?=} node
         * @return {?}
         */
            function (node) {
                this.selectedNode = null;
                if (node) {
                    this.selectedNode = node;
                }
            };
        /**
         * set node selected status
         */
        /**
         * set node selected status
         * @param {?} node
         * @param {?=} isMultiple
         * @return {?}
         */
        NzTreeService.prototype.setNodeActive = /**
         * set node selected status
         * @param {?} node
         * @param {?=} isMultiple
         * @return {?}
         */
            function (node, isMultiple) {
                if (isMultiple === void 0) {
                    isMultiple = false;
                }
                /** @type {?} */
                var isSelected = node.isSelected;
                if (node.isDisabled) {
                    return;
                }
                if (!isMultiple) {
                    this.selectedNodeList.forEach(function (n) {
                        n.setSelected(false);
                    });
                    this.selectedNodeList = [];
                }
                node.setSelected(!isSelected);
                this.setSelectedNodeList(node, isMultiple);
            };
        /**
         * add or remove node to selectedNodeList
         */
        /**
         * add or remove node to selectedNodeList
         * @param {?} node
         * @param {?=} isMultiple
         * @return {?}
         */
        NzTreeService.prototype.setSelectedNodeList = /**
         * add or remove node to selectedNodeList
         * @param {?} node
         * @param {?=} isMultiple
         * @return {?}
         */
            function (node, isMultiple) {
                if (isMultiple === void 0) {
                    isMultiple = false;
                }
                /** @type {?} */
                var index = this.selectedNodeList.findIndex(function (n) { return node.key === n.key; });
                if (isMultiple) {
                    if (node.isSelected && index === -1) {
                        this.selectedNodeList.push(node);
                    }
                }
                else {
                    if (node.isSelected && index === -1) {
                        this.selectedNodeList = [node];
                    }
                }
                if (!node.isSelected && index > -1) {
                    this.selectedNodeList.splice(index, 1);
                }
            };
        /**
         * merge checked nodes
         */
        /**
         * merge checked nodes
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.setHalfCheckedNodeList = /**
         * merge checked nodes
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var index = this.halfCheckedNodeList.findIndex(function (n) { return node.key === n.key; });
                if (node.isHalfChecked && index === -1) {
                    this.halfCheckedNodeList.push(node);
                }
                else if (!node.isHalfChecked && index > -1) {
                    this.halfCheckedNodeList.splice(index, 1);
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.setCheckedNodeList = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var index = this.checkedNodeList.findIndex(function (n) { return node.key === n.key; });
                if (node.isChecked && index === -1) {
                    this.checkedNodeList.push(node);
                }
                else if (!node.isChecked && index > -1) {
                    this.checkedNodeList.splice(index, 1);
                }
            };
        /**
         * conduct checked/selected/expanded keys
         */
        /**
         * conduct checked/selected/expanded keys
         * @param {?=} type
         * @return {?}
         */
        NzTreeService.prototype.conductNodeState = /**
         * conduct checked/selected/expanded keys
         * @param {?=} type
         * @return {?}
         */
            function (type) {
                var _this = this;
                if (type === void 0) {
                    type = 'check';
                }
                /** @type {?} */
                var resultNodesList = [];
                /** @type {?} */
                var loop = function (node) {
                    switch (type) {
                        case 'check':
                            if (node.isChecked) {
                                resultNodesList.push(node);
                            }
                            if (!_this.conductOption.isCheckStrictly) {
                                if (!node.isChecked) {
                                    node.getChildren().forEach(function (child) {
                                        loop(child);
                                    });
                                }
                            }
                            else {
                                node.getChildren().forEach(function (child) {
                                    loop(child);
                                });
                            }
                            break;
                        case 'halfCheck':
                            if (!_this.conductOption.isCheckStrictly) {
                                if (node.isHalfChecked) {
                                    resultNodesList.push(node);
                                    node.getChildren().forEach(function (child) {
                                        loop(child);
                                    });
                                }
                            }
                            break;
                        case 'select':
                            if (node.isSelected) {
                                resultNodesList.push(node);
                            }
                            node.getChildren().forEach(function (child) {
                                loop(child);
                            });
                            break;
                        case 'expand':
                            if (node.isExpanded) {
                                resultNodesList.push(node);
                            }
                            node.getChildren().forEach(function (child) {
                                loop(child);
                            });
                            break;
                        case 'match':
                            if (node.isMatched) {
                                resultNodesList.push(node);
                            }
                            node.getChildren().forEach(function (child) {
                                loop(child);
                            });
                            break;
                    }
                };
                this.rootNodes.forEach(function (node) {
                    loop(node);
                });
                return resultNodesList;
            };
        /**
         * set expanded nodes
         */
        /**
         * set expanded nodes
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.setExpandedNodeList = /**
         * set expanded nodes
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (node.isLeaf) {
                    return;
                }
                /** @type {?} */
                var index = this.expandedNodeList.findIndex(function (n) { return node.key === n.key; });
                if (node.isExpanded && index === -1) {
                    this.expandedNodeList.push(node);
                }
                else if (!node.isExpanded && index > -1) {
                    this.expandedNodeList.splice(index, 1);
                }
            };
        /**
         * check state
         * @param node
         */
        /**
         * check state
         * @param {?=} isCheckStrictly
         * @return {?}
         */
        NzTreeService.prototype.refreshCheckState = /**
         * check state
         * @param {?=} isCheckStrictly
         * @return {?}
         */
            function (isCheckStrictly) {
                var _this = this;
                if (isCheckStrictly === void 0) {
                    isCheckStrictly = false;
                }
                if (isCheckStrictly) {
                    return;
                }
                this.checkedNodeList.forEach(function (node) {
                    _this.conduct(node);
                });
            };
        /**
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.conduct = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var isChecked = node.isChecked;
                if (node) {
                    this.conductUp(node);
                    this.conductDown(node, isChecked);
                }
            };
        /**
         * 1、children half checked
         * 2、children all checked, parent checked
         * 3、no children checked
         */
        /**
         * 1、children half checked
         * 2、children all checked, parent checked
         * 3、no children checked
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.conductUp = /**
         * 1、children half checked
         * 2、children all checked, parent checked
         * 3、no children checked
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var parentNode = node.getParentNode();
                // 全禁用节点不选中
                if (parentNode) {
                    if (!isCheckDisabled(parentNode)) {
                        if (parentNode.getChildren().every(function (child) { return isCheckDisabled(child) || (!child.isHalfChecked && child.isChecked); })) {
                            parentNode.setChecked(true);
                        }
                        else if (parentNode.getChildren().some(function (child) { return child.isHalfChecked || child.isChecked; })) {
                            parentNode.setChecked(false, true);
                        }
                        else {
                            parentNode.setChecked(false);
                        }
                    }
                    this.setHalfCheckedNodeList(parentNode);
                    this.conductUp(parentNode);
                }
            };
        /**
         * reset child check state
         */
        /**
         * reset child check state
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        NzTreeService.prototype.conductDown = /**
         * reset child check state
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
            function (node, value) {
                var _this = this;
                if (!isCheckDisabled(node)) {
                    node.setChecked(value);
                    node.children.forEach(function (n) {
                        _this.conductDown(n, value);
                    });
                }
            };
        /**
         * search value & expand node
         * should add expandlist
         */
        /**
         * search value & expand node
         * should add expandlist
         * @param {?} value
         * @return {?}
         */
        NzTreeService.prototype.searchExpand = /**
         * search value & expand node
         * should add expandlist
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this.matchedNodeList = [];
                if (!isNotNil(value)) {
                    return;
                }
                // to reset expandedNodeList
                this.expandedNodeList = [];
                /** @type {?} */
                var expandParent = function (p) {
                    // expand parent node
                    if (p.getParentNode()) {
                        p.getParentNode().setExpanded(true);
                        _this.setExpandedNodeList(p.getParentNode());
                        expandParent(p.getParentNode());
                    }
                };
                /** @type {?} */
                var searchChild = function (n) {
                    if (value && n.title.includes(value)) {
                        // match the node
                        n.isMatched = true;
                        _this.matchedNodeList.push(n);
                        // expand parentNode
                        expandParent(n);
                    }
                    else {
                        n.isMatched = false;
                        n.setExpanded(false);
                        _this.setExpandedNodeList(n);
                    }
                    n.children.forEach(function (g) {
                        searchChild(g);
                    });
                };
                this.rootNodes.forEach(function (child) {
                    searchChild(child);
                });
            };
        /**
         * drag event
         */
        /**
         * drag event
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.refreshDragNode = /**
         * drag event
         * @param {?} node
         * @return {?}
         */
            function (node) {
                var _this = this;
                if (node.getChildren().length === 0) {
                    // until root
                    this.conductUp(node);
                }
                else {
                    node.children.forEach(function (child) {
                        _this.refreshDragNode(child);
                    });
                }
            };
        // reset node level
        /**
         * @param {?} node
         * @return {?}
         */
        NzTreeService.prototype.resetNodeLevel = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                var e_1, _a;
                if (node.getParentNode()) {
                    node.level = node.getParentNode().level + 1;
                }
                else {
                    node.level = 0;
                }
                try {
                    for (var _b = __values(node.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        this.resetNodeLevel(child);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzTreeService.prototype.calcDropPosition = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var clientY = event.clientY;
                var _a = event.srcElement ? event.srcElement.getBoundingClientRect() : ( /** @type {?} */(event.target)).getBoundingClientRect(), top = _a.top, bottom = _a.bottom, height = _a.height;
                /** @type {?} */
                var des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);
                if (clientY <= top + des) {
                    return -1;
                }
                else if (clientY >= bottom - des) {
                    return 1;
                }
                return 0;
            };
        /**
         * drop
         * 0: inner -1: pre 1: next
         */
        /**
         * drop
         * 0: inner -1: pre 1: next
         * @param {?} targetNode
         * @param {?=} dragPos
         * @return {?}
         */
        NzTreeService.prototype.dropAndApply = /**
         * drop
         * 0: inner -1: pre 1: next
         * @param {?} targetNode
         * @param {?=} dragPos
         * @return {?}
         */
            function (targetNode, dragPos) {
                var _this = this;
                if (dragPos === void 0) {
                    dragPos = -1;
                }
                if (!targetNode || dragPos > 1) {
                    return;
                }
                /** @type {?} */
                var targetParent = targetNode.getParentNode();
                /** @type {?} */
                var isSelectedRootNode = this.selectedNode.getParentNode();
                // remove the dragNode
                if (isSelectedRootNode) {
                    isSelectedRootNode.getChildren().splice(isSelectedRootNode.getChildren().indexOf(this.selectedNode), 1);
                }
                else {
                    this.rootNodes.splice(this.rootNodes.indexOf(this.selectedNode), 1);
                }
                switch (dragPos) {
                    case 0:
                        targetNode.addChildren([this.selectedNode]);
                        this.resetNodeLevel(targetNode);
                        break;
                    case -1:
                    case 1:
                        /** @type {?} */
                        var tIndex = dragPos === 1 ? 1 : 0;
                        if (targetParent) {
                            targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);
                            if (this.selectedNode.getParentNode()) {
                                this.resetNodeLevel(this.selectedNode.getParentNode());
                            }
                        }
                        else {
                            /** @type {?} */
                            var targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;
                            // 根节点插入
                            this.rootNodes.splice(targetIndex, 0, this.selectedNode);
                            this.rootNodes[targetIndex].parentNode = null;
                            this.rootNodes[targetIndex].level = 0;
                        }
                        break;
                }
                // flush all nodes
                this.rootNodes.forEach(function (child) {
                    _this.refreshDragNode(child);
                });
            };
        /**
         * emit Structure
         * eventName
         * node
         * event: MouseEvent / DragEvent
         * dragNode
         */
        /**
         * emit Structure
         * eventName
         * node
         * event: MouseEvent / DragEvent
         * dragNode
         * @param {?} eventName
         * @param {?} node
         * @param {?} event
         * @return {?}
         */
        NzTreeService.prototype.formatEvent = /**
         * emit Structure
         * eventName
         * node
         * event: MouseEvent / DragEvent
         * dragNode
         * @param {?} eventName
         * @param {?} node
         * @param {?} event
         * @return {?}
         */
            function (eventName, node, event) {
                /** @type {?} */
                var emitStructure = {
                    'eventName': eventName,
                    'node': node,
                    'event': event
                };
                switch (eventName) {
                    case 'dragstart':
                    case 'dragenter':
                    case 'dragover':
                    case 'dragleave':
                    case 'drop':
                    case 'dragend':
                        Object.assign(emitStructure, { 'dragNode': this.getSelectedNode() });
                        break;
                    case 'click':
                    case 'dblclick':
                        Object.assign(emitStructure, { 'selectedKeys': this.getSelectedNodeList() });
                        Object.assign(emitStructure, { 'nodes': this.getSelectedNodeList() });
                        Object.assign(emitStructure, { 'keys': this.getSelectedNodeList().map(function (n) { return n.key; }) });
                        break;
                    case 'check':
                        Object.assign(emitStructure, { 'checkedKeys': this.getCheckedNodeList() });
                        Object.assign(emitStructure, { 'nodes': this.getCheckedNodeList() });
                        Object.assign(emitStructure, { 'keys': this.getCheckedNodeList().map(function (n) { return n.key; }) });
                        break;
                    case 'search':
                        Object.assign(emitStructure, { 'matchedKeys': this.getMatchedNodeList() });
                        Object.assign(emitStructure, { 'nodes': this.getMatchedNodeList() });
                        Object.assign(emitStructure, { 'keys': this.getMatchedNodeList().map(function (n) { return n.key; }) });
                        break;
                    case 'expand':
                        Object.assign(emitStructure, { 'nodes': this.getExpandedNodeList() });
                        Object.assign(emitStructure, { 'keys': this.getExpandedNodeList().map(function (n) { return n.key; }) });
                        break;
                }
                return emitStructure;
            };
        NzTreeService.decorators = [
            { type: i0.Injectable }
        ];
        return NzTreeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeNodeComponent = /** @class */ (function () {
        function NzTreeNodeComponent(nzTreeService, ngZone, renderer, elRef) {
            this.nzTreeService = nzTreeService;
            this.ngZone = ngZone;
            this.renderer = renderer;
            this.elRef = elRef;
            this.nzHideUnMatched = false;
            // Output
            this.clickNode = new i0.EventEmitter();
            this.dblClick = new i0.EventEmitter();
            this.contextMenu = new i0.EventEmitter();
            this.clickCheckBox = new i0.EventEmitter();
            this.clickExpand = new i0.EventEmitter();
            this.nzDragStart = new i0.EventEmitter();
            this.nzDragEnter = new i0.EventEmitter();
            this.nzDragOver = new i0.EventEmitter();
            this.nzDragLeave = new i0.EventEmitter();
            this.nzDrop = new i0.EventEmitter();
            this.nzDragEnd = new i0.EventEmitter();
            // default var
            this.prefixCls = 'ant-tree';
            this.highlightKeys = [];
            this.nzNodeClass = {};
            this.nzNodeSwitcherClass = {};
            this.nzNodeContentClass = {};
            this.nzNodeContentIconClass = {};
            this.nzNodeContentLoadingClass = {};
            this.nzNodeChildrenClass = {};
            /**
             * drag var
             */
            this.destory$ = new rxjs.Subject();
            this.dragPos = 2;
            this.dragPosClass = {
                '0': 'drag-over',
                '1': 'drag-over-gap-bottom',
                '-1': 'drag-over-gap-top'
            };
            this._searchValue = '';
            this._nzExpandAll = false;
            this._nzDraggable = false;
            this.oldAPIIcon = true;
        }
        Object.defineProperty(NzTreeNodeComponent.prototype, "nzTreeNode", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzTreeNode;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                // add to checked list & selected list
                if (value.isChecked) {
                    this.nzTreeService.setCheckedNodeList(value);
                }
                // add select list
                if (value.isSelected) {
                    this.nzTreeService.setSelectedNodeList(value, this.nzMultiple);
                }
                if (!value.isLeaf) {
                    this.nzTreeService.setExpandedNodeList(value);
                }
                this._nzTreeNode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "nzDraggable", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzDraggable;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._nzDraggable = value;
                this.handDragEvent();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "nzDefaultExpandAll", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzExpandAll;
            },
            /**
             * @deprecated use
             * nzExpandAll instead
             */
            set: /**
             * @deprecated use
             * nzExpandAll instead
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._nzExpandAll = value;
                if (value && this.nzTreeNode && !this.nzTreeNode.isLeaf) {
                    this.nzTreeNode.setExpanded(true);
                    this.nzTreeService.setExpandedNodeList(this.nzTreeNode);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "nzExpandAll", {
            get: /**
             * @return {?}
             */ function () {
                return this._nzExpandAll;
            },
            // default set
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._nzExpandAll = value;
                if (value && this.nzTreeNode && !this.nzTreeNode.isLeaf) {
                    this.nzTreeNode.setExpanded(true);
                    this.nzTreeService.setExpandedNodeList(this.nzTreeNode);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "nzSearchValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._searchValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.highlightKeys = [];
                if (value && this.nzTreeNode.title.includes(value)) {
                    /** @type {?} */
                    var index = this.nzTreeNode.title.indexOf(value);
                    this.highlightKeys.push(this.nzTreeNode.title.slice(0, index));
                    this.highlightKeys.push(this.nzTreeNode.title.slice(index + value.length, this.nzTreeNode.title.length));
                }
                this._searchValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "nzIcon", {
            get: /**
             * @return {?}
             */ function () {
                if (this.nzTreeNode && this.nzTreeNode.origin.icon) {
                    this.oldAPIIcon = this.nzTreeNode.origin.icon.indexOf('anticon') > -1;
                }
                return this.nzTreeNode && this.nzTreeNode.origin.icon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "canDraggable", {
            get: /**
             * @return {?}
             */ function () {
                return (this.nzDraggable && this.nzTreeNode && !this.nzTreeNode.isDisabled) ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "isShowLineIcon", {
            get: /**
             * @return {?}
             */ function () {
                return !this.nzTreeNode.isLeaf && this.nzShowLine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "isShowSwitchIcon", {
            get: /**
             * @return {?}
             */ function () {
                return !this.nzTreeNode.isLeaf && !this.nzShowLine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "isSwitcherOpen", {
            get: /**
             * @return {?}
             */ function () {
                return (this.nzTreeNode.isExpanded && !this.nzTreeNode.isLeaf);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "isSwitcherClose", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.nzTreeNode.isExpanded && !this.nzTreeNode.isLeaf);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeNodeComponent.prototype, "displayStyle", {
            get: /**
             * @return {?}
             */ function () {
                // TODO
                return (this.nzSearchValue && this.nzHideUnMatched && !this.nzTreeNode.isMatched && !this.nzTreeNode.isExpanded) ? 'none' : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * reset node class
         */
        /**
         * reset node class
         * @return {?}
         */
        NzTreeNodeComponent.prototype.setClassMap = /**
         * reset node class
         * @return {?}
         */
            function () {
                var _a, _b, _c, _d, _e, _f;
                this.nzNodeClass = (_a = {},
                    _a[this.prefixCls + "-treenode-disabled"] = this.nzTreeNode.isDisabled,
                    _a);
                this.nzNodeSwitcherClass = (_b = {},
                    _b[this.prefixCls + "-switcher"] = true,
                    _b[this.prefixCls + "-switcher-noop"] = this.nzTreeNode.isLeaf,
                    _b);
                this.nzNodeContentClass = (_c = {},
                    _c[this.prefixCls + "-node-content-wrapper"] = true,
                    _c);
                this.nzNodeContentIconClass = (_d = {},
                    _d[this.prefixCls + "-iconEle"] = true,
                    _d[this.prefixCls + "-icon__customize"] = true,
                    _d);
                this.nzNodeContentLoadingClass = (_e = {},
                    _e[this.prefixCls + "-iconEle"] = true,
                    _e);
                this.nzNodeChildrenClass = (_f = {},
                    _f[this.prefixCls + "-child-tree"] = true,
                    _f[this.prefixCls + "-child-tree-open"] = true,
                    _f);
            };
        /**
         * click node to select, 200ms to dbl click
         */
        /**
         * click node to select, 200ms to dbl click
         * @param {?} event
         * @return {?}
         */
        NzTreeNodeComponent.prototype.nzClick = /**
         * click node to select, 200ms to dbl click
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                if (this.nzTreeNode.isSelectable) {
                    this.nzTreeService.setNodeActive(this.nzTreeNode, this.nzMultiple);
                }
                this.clickNode.emit(this.nzTreeService.formatEvent('click', this.nzTreeNode, event));
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NzTreeNodeComponent.prototype.nzDblClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.dblClick.emit(this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event));
            };
        /**
         * @param event
         */
        /**
         * @param {?} event
         * @return {?}
         */
        NzTreeNodeComponent.prototype.nzContextMenu = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.contextMenu.emit(this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event));
            };
        /**
         * collapse node
         * @param event
         */
        /**
         * collapse node
         * @param {?} event
         * @return {?}
         */
        NzTreeNodeComponent.prototype._clickExpand = /**
         * collapse node
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                if (!this.nzTreeNode.isLoading && !this.nzTreeNode.isLeaf) {
                    // set async state
                    if (this.nzAsyncData && this.nzTreeNode.getChildren().length === 0 && !this.nzTreeNode.isExpanded) {
                        this.nzTreeNode.isLoading = true;
                    }
                    this.nzTreeNode.setExpanded(!this.nzTreeNode.isExpanded);
                    this.nzTreeService.setExpandedNodeList(this.nzTreeNode);
                    this.clickExpand.emit(this.nzTreeService.formatEvent('expand', this.nzTreeNode, event));
                }
            };
        /**
         * check node
         * @param event
         */
        /**
         * check node
         * @param {?} event
         * @return {?}
         */
        NzTreeNodeComponent.prototype._clickCheckBox = /**
         * check node
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                // return if node is disabled
                if (isCheckDisabled(this.nzTreeNode)) {
                    return;
                }
                this.nzTreeNode.setChecked(!this.nzTreeNode.isChecked);
                this.nzTreeService.setCheckedNodeList(this.nzTreeNode);
                if (!this.nzCheckStrictly) {
                    this.nzTreeService.conduct(this.nzTreeNode);
                }
                this.clickCheckBox.emit(this.nzTreeService.formatEvent('check', this.nzTreeNode, event));
            };
        /**
         * drag event
         * @param e
         */
        /**
         * drag event
         * @return {?}
         */
        NzTreeNodeComponent.prototype.clearDragClass = /**
         * drag event
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over'];
                dragClass.forEach(function (e) {
                    _this.renderer.removeClass(_this.dragElement.nativeElement, e);
                });
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handleDragStart = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.stopPropagation();
                try {
                    // ie throw error
                    // firefox-need-it
                    e.dataTransfer.setData('text/plain', '');
                }
                catch (error) {
                    // empty
                }
                this.nzTreeService.setSelectedNode(this.nzTreeNode);
                this.nzTreeNode.setExpanded(false);
                this.nzDragStart.emit(this.nzTreeService.formatEvent('dragstart', null, e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handleDragEnter = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                e.preventDefault();
                e.stopPropagation();
                // reset position
                this.dragPos = 2;
                this.ngZone.run(function () {
                    if ((_this.nzTreeNode !== _this.nzTreeService.getSelectedNode()) && !_this.nzTreeNode.isLeaf) {
                        _this.nzTreeNode.setExpanded(true);
                    }
                });
                this.nzDragEnter.emit(this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handleDragOver = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.preventDefault();
                e.stopPropagation();
                /** @type {?} */
                var dropPosition = this.nzTreeService.calcDropPosition(e);
                if (this.dragPos !== dropPosition) {
                    this.clearDragClass();
                    this.dragPos = dropPosition;
                    // leaf node will pass
                    if (!(this.dragPos === 0 && this.nzTreeNode.isLeaf)) {
                        this.renderer.addClass(this.dragElement.nativeElement, this.dragPosClass[this.dragPos]);
                    }
                }
                this.nzDragOver.emit(this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handleDragLeave = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                e.stopPropagation();
                this.ngZone.run(function () {
                    _this.clearDragClass();
                });
                this.nzDragLeave.emit(this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handleDragDrop = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                e.preventDefault();
                e.stopPropagation();
                this.ngZone.run(function () {
                    _this.clearDragClass();
                    if (_this.nzTreeService.getSelectedNode() === _this.nzTreeNode) {
                        return;
                    }
                    else if (_this.dragPos === 0 && _this.nzTreeNode.isLeaf) {
                        return;
                    }
                    // pass if node is leafNo
                    if (_this.nzBeforeDrop) {
                        _this.nzBeforeDrop({
                            dragNode: _this.nzTreeService.getSelectedNode(),
                            node: _this.nzTreeNode,
                            pos: _this.dragPos
                        }).subscribe(function (canDrop) {
                            if (canDrop) {
                                _this.nzTreeService.dropAndApply(_this.nzTreeNode, _this.dragPos);
                            }
                            _this.nzDrop.emit(_this.nzTreeService.formatEvent('drop', _this.nzTreeNode, e));
                            _this.nzDragEnd.emit(_this.nzTreeService.formatEvent('dragend', _this.nzTreeNode, e));
                        });
                    }
                    else if (_this.nzTreeNode) {
                        _this.nzTreeService.dropAndApply(_this.nzTreeNode, _this.dragPos);
                        _this.nzDrop.emit(_this.nzTreeService.formatEvent('drop', _this.nzTreeNode, e));
                    }
                });
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handleDragEnd = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                e.stopPropagation();
                this.ngZone.run(function () {
                    // if user do not custom beforeDrop
                    if (!_this.nzBeforeDrop) {
                        _this.nzTreeService.setSelectedNode(null);
                        _this.nzDragEnd.emit(_this.nzTreeService.formatEvent('dragend', _this.nzTreeNode, e));
                    }
                });
            };
        /**
         * 监听拖拽事件
         */
        /**
         * 监听拖拽事件
         * @return {?}
         */
        NzTreeNodeComponent.prototype.handDragEvent = /**
         * 监听拖拽事件
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.runOutsideAngular(function () {
                    if (_this.nzDraggable) {
                        _this.destory$ = new rxjs.Subject();
                        rxjs.fromEvent(_this.elRef.nativeElement, 'dragstart').pipe(operators.takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragStart(e); });
                        rxjs.fromEvent(_this.elRef.nativeElement, 'dragenter').pipe(operators.takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragEnter(e); });
                        rxjs.fromEvent(_this.elRef.nativeElement, 'dragover').pipe(operators.takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragOver(e); });
                        rxjs.fromEvent(_this.elRef.nativeElement, 'dragleave').pipe(operators.takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragLeave(e); });
                        rxjs.fromEvent(_this.elRef.nativeElement, 'drop').pipe(operators.takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragDrop(e); });
                        rxjs.fromEvent(_this.elRef.nativeElement, 'dragend').pipe(operators.takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragEnd(e); });
                    }
                    else {
                        _this.destory$.next();
                        _this.destory$.complete();
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTreeNodeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTreeNodeComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzTreeNodeComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destory$.next();
                this.destory$.complete();
            };
        NzTreeNodeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tree-node',
                        template: "<li\n  #dragElement\n  role=\"treeitem\"\n  [style.display]=\"displayStyle\"\n  [ngClass]=\"nzNodeClass\"\n  [class.ant-tree-treenode-switcher-open]=\"isSwitcherOpen\"\n  [class.ant-tree-treenode-switcher-close]=\"isSwitcherClose\"\n  [class.ant-tree-treenode-checkbox-checked]=\"nzTreeNode.isChecked\"\n  [class.ant-tree-treenode-checkbox-indeterminate]=\"nzTreeNode.isHalfChecked\"\n  [class.ant-tree-treenode-selected]=\"nzTreeNode.isSelected\"\n  [class.ant-tree-treenode-loading]=\"nzTreeNode.isLoading\">\n  <ng-container *ngIf=\"nzShowExpand\">\n    <span\n      [ngClass]=\"nzNodeSwitcherClass\"\n      [class.ant-tree-switcher_open]=\"isSwitcherOpen\"\n      [class.ant-tree-switcher_close]=\"isSwitcherClose\"\n      (click)=\"_clickExpand($event)\">\n      <ng-container *ngIf=\"isShowSwitchIcon\">\n        <i *ngIf=\"!nzTreeNode.isLoading\" nz-icon type=\"caret-down\" class=\"ant-tree-switcher-icon\"></i>\n        <i *ngIf=\"nzTreeNode.isLoading\" nz-icon type=\"loading\" [spin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n      </ng-container>\n      <ng-container *ngIf=\"nzShowLine\">\n        <i *ngIf=\"isShowLineIcon\" nz-icon [type]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\" class=\"ant-tree-switcher-line-icon\"></i>\n        <i *ngIf=\"!isShowLineIcon\" nz-icon type=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n      </ng-container>\n    </span>\n  </ng-container>\n  <ng-container *ngIf=\"nzCheckable\">\n    <span\n      class=\"ant-tree-checkbox\"\n      [class.ant-tree-checkbox-checked]=\"nzTreeNode.isChecked\"\n      [class.ant-tree-checkbox-indeterminate]=\"nzTreeNode.isHalfChecked\"\n      [class.ant-tree-checkbox-disabled]=\"(nzTreeNode.isDisabled || nzTreeNode.isDisableCheckbox)\"\n      (click)=\"_clickCheckBox($event)\">\n      <span class=\"ant-tree-checkbox-inner\"></span>\n    </span>\n  </ng-container>\n  <ng-container *ngIf=\"!nzTreeTemplate\">\n    <span\n      title=\"{{nzTreeNode.title}}\"\n      [attr.draggable]=\"canDraggable\"\n      [attr.aria-grabbed]=\"canDraggable\"\n      [ngClass]=\"nzNodeContentClass\"\n      [class.ant-tree-node-content-wrapper-open]=\"isSwitcherOpen\"\n      [class.ant-tree-node-content-wrapper-close]=\"isSwitcherClose\"\n      [class.ant-tree-node-selected]=\"nzTreeNode.isSelected\"\n      [class.draggable]=\"canDraggable\">\n      <span\n        *ngIf=\"nzTreeNode.origin.icon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"nzTreeNode.isLoading\"\n        [ngClass]=\"nzNodeContentLoadingClass\">\n        <span\n          [ngClass]=\"nzNodeContentIconClass\">\n          <i nz-icon *ngIf=\"nzIcon\" [type]=\"!oldAPIIcon && nzIcon\" [ngClass]=\"oldAPIIcon && nzIcon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\">\n        <ng-container *ngIf=\"nzTreeNode.isMatched\">\n          <span>\n            {{highlightKeys[0]}}<span class=\"font-highlight\">{{nzSearchValue}}</span>{{highlightKeys[1]}}\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"!nzTreeNode.isMatched\">\n          {{nzTreeNode.title}}\n        </ng-container>\n      </span>\n    </span>\n  </ng-container>\n  <ng-template\n    [ngTemplateOutlet]=\"nzTreeTemplate\"\n    [ngTemplateOutletContext]=\"{ $implicit: nzTreeNode }\">\n  </ng-template>\n\n  <ul\n    role=\"group\"\n    [attr.data-expanded]=\"nzTreeNode.isExpanded\"\n    [ngClass]=\"nzNodeChildrenClass\"\n    [@nodeState]=\"nzTreeNode.isExpanded ? 'active' : 'inactive'\">\n    <nz-tree-node\n      *ngFor=\"let node of nzTreeNode.getChildren()\"\n      [nzTreeNode]=\"node\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzDraggable]=\"nzDraggable\"\n      [nzCheckable]=\"nzCheckable\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzAsyncData]=\"nzAsyncData\"\n      [nzMultiple]=\"nzMultiple\"\n      [nzExpandAll]=\"nzExpandAll\"\n      [nzDefaultExpandAll]=\"nzDefaultExpandAll\"\n      [nzSearchValue]=\"nzSearchValue\"\n      [nzHideUnMatched]=\"nzHideUnMatched\"\n      [nzBeforeDrop]=\"nzBeforeDrop\"\n      [nzCheckStrictly]=\"nzCheckStrictly\"\n      [nzTreeTemplate]=\"nzTreeTemplate\"\n      (clickNode)=\"clickNode.emit($event)\"\n      (dblClick)=\"dblClick.emit($event)\"\n      (contextMenu)=\"contextMenu.emit($event)\"\n      (clickExpand)=\"clickExpand.emit($event)\"\n      (clickCheckBox)=\"clickCheckBox.emit($event)\"\n      (nzDragStart)=\"nzDragStart.emit($event)\"\n      (nzDragEnter)=\"nzDragEnter.emit($event)\"\n      (nzDragOver)=\"nzDragOver.emit($event)\"\n      (nzDragLeave)=\"nzDragLeave.emit($event)\"\n      (nzDrop)=\"nzDrop.emit($event)\"\n      (nzDragEnd)=\"nzDragEnd.emit($event)\">\n    </nz-tree-node>\n  </ul>\n</li>",
                        preserveWhitespaces: false,
                        animations: [
                            animations.trigger('nodeState', [
                                animations.state('inactive', animations.style({
                                    opacity: '0',
                                    height: '0',
                                    display: 'none'
                                })),
                                animations.state('active', animations.style({
                                    opacity: '1',
                                    height: '*'
                                })),
                                animations.transition('inactive => active', animations.animate('100ms ease-in')),
                                animations.transition('active => inactive', animations.animate('100ms ease-out'))
                            ])
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzTreeNodeComponent.ctorParameters = function () {
            return [
                { type: NzTreeService },
                { type: i0.NgZone },
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        NzTreeNodeComponent.propDecorators = {
            dragElement: [{ type: i0.ViewChild, args: ['dragElement',] }],
            nzShowLine: [{ type: i0.Input }],
            nzShowExpand: [{ type: i0.Input }],
            nzMultiple: [{ type: i0.Input }],
            nzCheckable: [{ type: i0.Input }],
            nzAsyncData: [{ type: i0.Input }],
            nzCheckStrictly: [{ type: i0.Input }],
            nzHideUnMatched: [{ type: i0.Input }],
            nzTreeTemplate: [{ type: i0.Input }],
            nzBeforeDrop: [{ type: i0.Input }],
            nzTreeNode: [{ type: i0.Input }],
            nzDraggable: [{ type: i0.Input }],
            nzDefaultExpandAll: [{ type: i0.Input }],
            nzExpandAll: [{ type: i0.Input }],
            nzSearchValue: [{ type: i0.Input }],
            clickNode: [{ type: i0.Output }],
            dblClick: [{ type: i0.Output }],
            contextMenu: [{ type: i0.Output }],
            clickCheckBox: [{ type: i0.Output }],
            clickExpand: [{ type: i0.Output }],
            nzDragStart: [{ type: i0.Output }],
            nzDragEnter: [{ type: i0.Output }],
            nzDragOver: [{ type: i0.Output }],
            nzDragLeave: [{ type: i0.Output }],
            nzDrop: [{ type: i0.Output }],
            nzDragEnd: [{ type: i0.Output }],
            nzClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }],
            nzDblClick: [{ type: i0.HostListener, args: ['dblclick', ['$event'],] }],
            nzContextMenu: [{ type: i0.HostListener, args: ['contextmenu', ['$event'],] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeNodeComponent.prototype, "nzShowLine", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeNodeComponent.prototype, "nzShowExpand", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeNodeComponent.prototype, "nzMultiple", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeNodeComponent.prototype, "nzCheckable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeNodeComponent.prototype, "nzAsyncData", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeNodeComponent.prototype, "nzCheckStrictly", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeNodeComponent.prototype, "nzHideUnMatched", void 0);
        return NzTreeNodeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeComponent = /** @class */ (function () {
        function NzTreeComponent(nzTreeService) {
            this.nzTreeService = nzTreeService;
            this.nzShowIcon = false;
            this.nzShowLine = false;
            this.nzCheckStrictly = false;
            this.nzCheckable = false;
            this.nzShowExpand = true;
            this.nzAsyncData = false;
            this.nzDraggable = false;
            this.nzMultiple = false;
            this.nzExpandAll = false;
            this.nzHideUnMatched = false;
            /**
             * @deprecated use
             * nzExpandAll instead
             */
            this.nzDefaultExpandAll = false;
            // model bind
            this.nzExpandedKeysChange = new i0.EventEmitter();
            this.nzSelectedKeysChange = new i0.EventEmitter();
            this.nzCheckedKeysChange = new i0.EventEmitter();
            this.nzSearchValueChange = new i0.EventEmitter();
            /**
             * @deprecated use
             * nzSearchValueChange instead
             */
            this.nzOnSearchNode = new i0.EventEmitter();
            this.nzClick = new i0.EventEmitter();
            this.nzDblClick = new i0.EventEmitter();
            this.nzContextMenu = new i0.EventEmitter();
            this.nzCheckBoxChange = new i0.EventEmitter();
            this.nzExpandChange = new i0.EventEmitter();
            this.nzOnDragStart = new i0.EventEmitter();
            this.nzOnDragEnter = new i0.EventEmitter();
            this.nzOnDragOver = new i0.EventEmitter();
            this.nzOnDragLeave = new i0.EventEmitter();
            this.nzOnDrop = new i0.EventEmitter();
            this.nzOnDragEnd = new i0.EventEmitter();
            this._searchValue = null;
            this.nzDefaultSubject = new rxjs.ReplaySubject(6);
            this.nzNodes = [];
            this.prefixCls = 'ant-tree';
            this.nzTreeClass = {};
            this.onChange = function () { return null; };
            this.onTouched = function () { return null; };
        }
        Object.defineProperty(NzTreeComponent.prototype, "nzData", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (Array.isArray(value)) {
                    if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {
                        // has not been new NzTreeNode
                        this.nzNodes = value.map(function (item) { return (new NzTreeNode(item)); });
                    }
                    else {
                        this.nzNodes = value;
                    }
                    this.nzTreeService.conductOption.isCheckStrictly = this.nzCheckStrictly;
                    this.nzTreeService.initTree(this.nzNodes);
                }
                else {
                    if (value !== null) {
                        console.warn('ngModel only accepts an array and must be not empty');
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzDefaultExpandedKeys", {
            /**
             * @deprecated use
             * nzExpandedKeys instead
             */
            set: /**
             * @deprecated use
             * nzExpandedKeys instead
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.nzDefaultSubject.next({ type: 'nzExpandedKeys', keys: value });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzDefaultSelectedKeys", {
            /**
             * @deprecated use
             * nzSelectedKeys instead
             */
            set: /**
             * @deprecated use
             * nzSelectedKeys instead
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.nzDefaultSubject.next({ type: 'nzSelectedKeys', keys: value });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzDefaultCheckedKeys", {
            /**
             * @deprecated use
             * nzCheckedKeys instead
             */
            set: /**
             * @deprecated use
             * nzCheckedKeys instead
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.nzDefaultSubject.next({ type: 'nzCheckedKeys', keys: value });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzExpandedKeys", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.nzDefaultSubject.next({ type: 'nzExpandedKeys', keys: value });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzSelectedKeys", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.nzDefaultSubject.next({ type: 'nzSelectedKeys', keys: value });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzCheckedKeys", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.nzDefaultSubject.next({ type: 'nzCheckedKeys', keys: value });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeComponent.prototype, "nzSearchValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._searchValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._searchValue = value;
                this.nzTreeService.searchExpand(value);
                if (isNotNil(value)) {
                    this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));
                    this.nzOnSearchNode.emit(this.nzTreeService.formatEvent('search', null, null));
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.getTreeNodes = /**
         * @return {?}
         */
            function () {
                return this.nzNodes;
            };
        /**
         * public function
         */
        /**
         * public function
         * @return {?}
         */
        NzTreeComponent.prototype.getCheckedNodeList = /**
         * public function
         * @return {?}
         */
            function () {
                return this.nzTreeService.getCheckedNodeList();
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.getSelectedNodeList = /**
         * @return {?}
         */
            function () {
                return this.nzTreeService.getSelectedNodeList();
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.getHalfCheckedNodeList = /**
         * @return {?}
         */
            function () {
                return this.nzTreeService.getHalfCheckedNodeList();
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.getExpandedNodeList = /**
         * @return {?}
         */
            function () {
                return this.nzTreeService.getExpandedNodeList();
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.getMatchedNodeList = /**
         * @return {?}
         */
            function () {
                return this.nzTreeService.getMatchedNodeList();
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                this.nzTreeClass = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + '-show-line'] = this.nzShowLine,
                    _a[this.prefixCls + "-icon-hide"] = !this.nzShowIcon,
                    _a['draggable-tree'] = this.nzDraggable,
                    _a);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTreeComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (Array.isArray(value)) {
                    this.nzNodes = value;
                    this.nzTreeService.conductOption.isCheckStrictly = this.nzCheckStrictly;
                    this.nzTreeService.initTree(this.nzNodes);
                }
                else {
                    if (value !== null) {
                        console.warn('ngModel only accepts an array and should be not empty');
                    }
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTreeComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTreeComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.setClassMap();
                this.nzDefaultSubscription = this.nzDefaultSubject.subscribe(function (data) {
                    if (!data || !data.keys) {
                        return;
                    }
                    switch (data.type) {
                        case 'nzExpandedKeys':
                            _this.nzTreeService.calcExpandedKeys(data.keys, _this.nzNodes);
                            _this.nzExpandedKeysChange.emit(data.keys);
                            break;
                        case 'nzSelectedKeys':
                            _this.nzTreeService.calcSelectedKeys(data.keys, _this.nzNodes, _this.nzMultiple);
                            _this.nzSelectedKeysChange.emit(data.keys);
                            break;
                        case 'nzCheckedKeys':
                            _this.nzTreeService.calcCheckedKeys(data.keys, _this.nzNodes, _this.nzCheckStrictly);
                            _this.nzCheckedKeysChange.emit(data.keys);
                            break;
                    }
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTreeComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["nzCheckStrictly"]) {
                    this.nzTreeService.conductOption.isCheckStrictly = changes["nzCheckStrictly"].currentValue;
                }
            };
        /**
         * @return {?}
         */
        NzTreeComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.nzDefaultSubscription) {
                    this.nzDefaultSubscription.unsubscribe();
                    this.nzDefaultSubscription = null;
                }
            };
        NzTreeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tree',
                        template: "<ul\n  role=\"tree\"\n  unselectable=\"on\"\n  [ngClass]=\"nzTreeClass\">\n  <nz-tree-node\n    *ngFor=\"let node of nzNodes\"\n    [nzTreeNode]=\"node\"\n    [nzShowLine]=\"nzShowLine\"\n    [nzDraggable]=\"nzDraggable\"\n    [nzCheckable]=\"nzCheckable\"\n    [nzShowExpand]=\"nzShowExpand\"\n    [nzAsyncData]=\"nzAsyncData\"\n    [nzMultiple]=\"nzMultiple\"\n    [nzSearchValue]=\"nzSearchValue\"\n    [nzHideUnMatched]=\"nzHideUnMatched\"\n    [nzBeforeDrop]=\"nzBeforeDrop\"\n    [nzCheckStrictly]=\"nzCheckStrictly\"\n    [nzExpandAll]=\"nzExpandAll\"\n    [nzDefaultExpandAll]=\"nzDefaultExpandAll\"\n    [nzTreeTemplate]=\"nzTreeTemplate\"\n    (clickNode)=\"nzClick.emit($event)\"\n    (dblClick)=\"nzDblClick.emit($event)\"\n    (contextMenu)=\"nzContextMenu.emit($event)\"\n    (clickExpand)=\"nzExpandChange.emit($event)\"\n    (clickCheckBox)=\"nzCheckBoxChange.emit($event)\"\n    (nzDragStart)=\"nzOnDragStart.emit($event)\"\n    (nzDragEnter)=\"nzOnDragEnter.emit($event)\"\n    (nzDragOver)=\"nzOnDragOver.emit($event)\"\n    (nzDragLeave)=\"nzOnDragLeave.emit($event)\"\n    (nzDrop)=\"nzOnDrop.emit($event)\"\n    (nzDragEnd)=\"nzOnDragEnd.emit($event)\">\n  </nz-tree-node>\n</ul>",
                        providers: [
                            NzTreeService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzTreeComponent; }),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzTreeComponent.ctorParameters = function () {
            return [
                { type: NzTreeService }
            ];
        };
        NzTreeComponent.propDecorators = {
            nzShowIcon: [{ type: i0.Input }],
            nzShowLine: [{ type: i0.Input }],
            nzCheckStrictly: [{ type: i0.Input }],
            nzCheckable: [{ type: i0.Input }],
            nzShowExpand: [{ type: i0.Input }],
            nzAsyncData: [{ type: i0.Input }],
            nzDraggable: [{ type: i0.Input }],
            nzMultiple: [{ type: i0.Input }],
            nzExpandAll: [{ type: i0.Input }],
            nzHideUnMatched: [{ type: i0.Input }],
            nzDefaultExpandAll: [{ type: i0.Input }],
            nzBeforeDrop: [{ type: i0.Input }],
            nzData: [{ type: i0.Input }],
            nzDefaultExpandedKeys: [{ type: i0.Input }],
            nzDefaultSelectedKeys: [{ type: i0.Input }],
            nzDefaultCheckedKeys: [{ type: i0.Input }],
            nzExpandedKeys: [{ type: i0.Input }],
            nzSelectedKeys: [{ type: i0.Input }],
            nzCheckedKeys: [{ type: i0.Input }],
            nzSearchValue: [{ type: i0.Input }],
            nzExpandedKeysChange: [{ type: i0.Output }],
            nzSelectedKeysChange: [{ type: i0.Output }],
            nzCheckedKeysChange: [{ type: i0.Output }],
            nzSearchValueChange: [{ type: i0.Output }],
            nzOnSearchNode: [{ type: i0.Output }],
            nzClick: [{ type: i0.Output }],
            nzDblClick: [{ type: i0.Output }],
            nzContextMenu: [{ type: i0.Output }],
            nzCheckBoxChange: [{ type: i0.Output }],
            nzExpandChange: [{ type: i0.Output }],
            nzOnDragStart: [{ type: i0.Output }],
            nzOnDragEnter: [{ type: i0.Output }],
            nzOnDragOver: [{ type: i0.Output }],
            nzOnDragLeave: [{ type: i0.Output }],
            nzOnDrop: [{ type: i0.Output }],
            nzOnDragEnd: [{ type: i0.Output }],
            nzTreeTemplate: [{ type: i0.ContentChild, args: ['nzTreeTemplate',] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzShowIcon", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzShowLine", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzCheckStrictly", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzCheckable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzShowExpand", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzAsyncData", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzDraggable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzMultiple", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeComponent.prototype, "nzExpandAll", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeComponent.prototype, "nzHideUnMatched", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzTreeComponent.prototype, "nzDefaultExpandAll", void 0);
        return NzTreeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeModule = /** @class */ (function () {
        function NzTreeModule() {
        }
        NzTreeModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i3.CommonModule,
                            NzIconModule
                        ],
                        declarations: [
                            NzTreeComponent,
                            NzTreeNodeComponent
                        ],
                        exports: [
                            NzTreeComponent,
                            NzTreeNodeComponent
                        ]
                    },] }
        ];
        return NzTreeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var selectDropDownAnimation = animations.trigger('selectDropDownAnimation', [
        animations.state('hidden', animations.style({
            opacity: 0,
            display: 'none'
        })),
        animations.state('bottom', animations.style({
            opacity: 1,
            transform: 'scaleY(1)',
            transformOrigin: '0% 0%'
        })),
        animations.state('top', animations.style({
            opacity: 1,
            transform: 'scaleY(1)',
            transformOrigin: '0% 100%'
        })),
        animations.transition('hidden => bottom', [
            animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 0%'
            }),
            animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')
        ]),
        animations.transition('bottom => hidden', [
            animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 0%'
            }))
        ]),
        animations.transition('hidden => top', [
            animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 100%'
            }),
            animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')
        ]),
        animations.transition('top => hidden', [
            animations.animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', animations.style({
                opacity: 0,
                transform: 'scaleY(0.8)',
                transformOrigin: '0% 100%'
            }))
        ])
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var selectTagAnimation = animations.trigger('selectTagAnimation', [
        animations.state('*', animations.style({ opacity: 1, transform: 'scale(1)' })),
        animations.transition('void => *', [
            animations.style({ opacity: 0, transform: 'scale(0)' }),
            animations.animate('150ms linear')
        ]),
        animations.state('void', animations.style({ opacity: 0, transform: 'scale(0)' })),
        animations.transition('* => void', [
            animations.style({ opacity: 1, transform: 'scale(1)' }),
            animations.animate('150ms linear')
        ])
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeSelectComponent = /** @class */ (function () {
        function NzTreeSelectComponent(renderer, cdr, overlay, viewContainerRef) {
            this.renderer = renderer;
            this.cdr = cdr;
            this.overlay = overlay;
            this.viewContainerRef = viewContainerRef;
            this.nzAllowClear = true;
            this.nzShowExpand = true;
            this.nzDropdownMatchSelectWidth = true;
            this.nzCheckable = false;
            this.nzShowSearch = false;
            this.nzDisabled = false;
            this.nzShowLine = false;
            this.nzAsyncData = false;
            this.nzMultiple = false;
            this.nzDefaultExpandAll = false;
            this.nzNodes = [];
            this.nzOpen = false;
            this.nzSize = 'default';
            this.nzPlaceHolder = '';
            this.nzDefaultExpandedKeys = [];
            this.nzDisplayWith = function (node) { return node.title; };
            this.nzOpenChange = new i0.EventEmitter();
            this.nzCleared = new i0.EventEmitter();
            this.nzRemoved = new i0.EventEmitter();
            this.nzExpandChange = new i0.EventEmitter();
            this.nzTreeClick = new i0.EventEmitter();
            this.nzTreeCheckBoxChange = new i0.EventEmitter();
            this.isComposing = false;
            this.isDestroy = true;
            this.inputValue = '';
            this.dropDownPosition = 'bottom';
            this.selectedNodes = [];
            this.value = [];
            this.onTouched = function () { return null; };
        }
        Object.defineProperty(NzTreeSelectComponent.prototype, "placeHolderDisplay", {
            get: /**
             * @return {?}
             */ function () {
                return this.inputValue || this.isComposing || this.selectedNodes.length ? 'none' : 'block';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeSelectComponent.prototype, "searchDisplay", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzOpen ? 'block' : 'none';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeSelectComponent.prototype, "isMultiple", {
            get: /**
             * @return {?}
             */ function () {
                return this.nzMultiple || this.nzCheckable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTreeSelectComponent.prototype, "selectedValueDisplay", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var showSelectedValue = false;
                /** @type {?} */
                var opacity = 1;
                if (!this.nzShowSearch) {
                    showSelectedValue = true;
                }
                else {
                    if (this.nzOpen) {
                        showSelectedValue = !(this.inputValue || this.isComposing);
                        if (showSelectedValue) {
                            opacity = 0.4;
                        }
                    }
                    else {
                        showSelectedValue = true;
                    }
                }
                return {
                    display: showSelectedValue ? 'block' : 'none',
                    opacity: "" + opacity
                };
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.isDestroy = false;
                this.selectionChangeSubscription = this.subscribeSelectionChange();
                Promise.resolve().then(function () {
                    _this.updateDropDownClassMap();
                    _this.updateCdkConnectedOverlayStatus();
                });
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.isDestroy = true;
                this.detachOverlay();
                this.selectionChangeSubscription.unsubscribe();
                this.overlayBackdropClickSubscription.unsubscribe();
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.attachOverlay();
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NzTreeSelectComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.nzDisabled = isDisabled;
                this.closeDropDown();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTreeSelectComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes.hasOwnProperty('nzNodes')) {
                    setTimeout(function () { return _this.updateSelectedNodes(); }, 0);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTreeSelectComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (value) {
                    if (this.isMultiple && Array.isArray(value)) {
                        this.value = value;
                    }
                    else {
                        this.value = [( /** @type {?} */(value))];
                    }
                    this.updateSelectedNodes();
                }
                else {
                    this.value = [];
                    this.selectedNodes.forEach(function (node) {
                        _this.removeSelected(node, false);
                    });
                    this.selectedNodes = [];
                }
                this.cdr.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTreeSelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NzTreeSelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.trigger = /**
         * @return {?}
         */
            function () {
                if (this.nzDisabled || (!this.nzDisabled && this.nzOpen)) {
                    this.closeDropDown();
                }
                else {
                    this.openDropdown();
                    if (this.nzShowSearch) {
                        this.focusOnInput();
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.openDropdown = /**
         * @return {?}
         */
            function () {
                if (!this.nzDisabled) {
                    this.nzOpen = true;
                    this.nzOpenChange.emit(this.nzOpen);
                    this.updateCdkConnectedOverlayStatus();
                    this.updatePosition();
                    this.updateDropDownClassMap();
                }
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.closeDropDown = /**
         * @return {?}
         */
            function () {
                this.onTouched();
                this.nzOpen = false;
                this.nzOpenChange.emit(this.nzOpen);
                this.updateCdkConnectedOverlayStatus();
                this.cdr.markForCheck();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzTreeSelectComponent.prototype.onKeyDownInput = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var keyCode = e.keyCode;
                /** @type {?} */
                var eventTarget = /** @type {?} */ (e.target);
                if (this.isMultiple &&
                    !eventTarget.value &&
                    keyCode === keycodes.BACKSPACE) {
                    e.preventDefault();
                    if (this.selectedNodes.length) {
                        this.removeSelected(this.selectedNodes[this.selectedNodes.length - 1]);
                    }
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NzTreeSelectComponent.prototype.setInputValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.inputValue = value;
                this.updateInputWidth();
                this.updatePosition();
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.detachOverlay = /**
         * @return {?}
         */
            function () {
                if (this.overlayRef && this.overlayRef.hasAttached()) {
                    this.overlayRef.detach();
                    this.overlayBackdropClickSubscription.unsubscribe();
                    this.onTouched();
                    this.nzOpen = false;
                    this.nzOpenChange.emit(this.nzOpen);
                }
            };
        /**
         * @param {?} node
         * @param {?=} emit
         * @param {?=} event
         * @return {?}
         */
        NzTreeSelectComponent.prototype.removeSelected = /**
         * @param {?} node
         * @param {?=} emit
         * @param {?=} event
         * @return {?}
         */
            function (node, emit, event) {
                if (emit === void 0) {
                    emit = true;
                }
                node.isSelected = false;
                node.isChecked = false;
                if (this.nzCheckable) {
                    this.treeRef.nzTreeService.conduct(node);
                    this.treeRef.nzTreeService.setCheckedNodeList(node);
                }
                else {
                    this.treeRef.nzTreeService.setSelectedNodeList(node, this.nzMultiple);
                }
                if (emit) {
                    this.nzRemoved.emit(node);
                }
                // Do not trigger the popup
                if (event && event.stopPropagation) {
                    event.stopPropagation();
                }
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.focusOnInput = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    if (_this.inputElement) {
                        _this.inputElement.nativeElement.focus();
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.attachOverlay = /**
         * @return {?}
         */
            function () {
                this.portal = new portal.TemplatePortal(this.dropdownTemplate, this.viewContainerRef);
                this.overlayRef = this.overlay.create(this.getOverlayConfig());
                this.overlayRef.attach(this.portal);
                this.cdr.detectChanges();
                this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.getOverlayConfig = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var overlayWidth = this.treeSelect.nativeElement.getBoundingClientRect().width;
                return new i2$1.OverlayConfig((_a = {
                    positionStrategy: this.getOverlayPosition(),
                    scrollStrategy: this.overlay.scrollStrategies.reposition()
                },
                    _a[this.nzDropdownMatchSelectWidth ? 'width' : 'minWidth'] = overlayWidth,
                    _a.hasBackdrop = true,
                    _a));
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.getOverlayPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var positions = [
                    new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
                    new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                ];
                this.positionStrategy = this.overlay.position()
                    .flexibleConnectedTo(this.treeSelect)
                    .withPositions(positions)
                    .withFlexibleDimensions(false)
                    .withPush(false);
                return this.positionStrategy;
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.subscribeOverlayBackdropClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.overlayRef.backdropClick()
                    .subscribe(function () {
                    _this.closeDropDown();
                });
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.subscribeSelectionChange = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.merge(this.nzTreeClick.pipe(operators.tap(function (event) {
                    /** @type {?} */
                    var node = event.node;
                    if (_this.nzCheckable && !node.isDisabled && !node.isDisableCheckbox) {
                        node.isChecked = !node.isChecked;
                        _this.treeRef.nzTreeService.conduct(node);
                        _this.treeRef.nzTreeService.setCheckedNodeList(node);
                    }
                    if (_this.nzCheckable) {
                        node.isSelected = false;
                    }
                }), operators.filter(function (event) {
                    return _this.nzCheckable ? (!event.node.isDisabled && !event.node.isDisableCheckbox) : !event.node.isDisabled;
                })), this.nzCheckable ? this.nzTreeCheckBoxChange : rxjs.of(), this.nzCleared, this.nzRemoved).subscribe(function () {
                    _this.updateSelectedNodes();
                    /** @type {?} */
                    var value = _this.selectedNodes.map(function (node) { return node.key; });
                    _this.value = __spread(value);
                    if (_this.nzShowSearch) {
                        _this.inputValue = '';
                    }
                    if (_this.isMultiple) {
                        _this.onChange(value);
                        if (_this.nzShowSearch) {
                            _this.focusOnInput();
                        }
                    }
                    else {
                        _this.closeDropDown();
                        _this.onChange(value.length ? value[0] : null);
                    }
                });
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.updateSelectedNodes = /**
         * @return {?}
         */
            function () {
                if (this.treeRef) {
                    this.selectedNodes = __spread((this.nzCheckable ? this.treeRef.getCheckedNodeList() : this.treeRef.getSelectedNodeList()));
                }
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.updatePosition = /**
         * @return {?}
         */
            function () {
                this.overlayRef.updatePosition();
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.updateInputWidth = /**
         * @return {?}
         */
            function () {
                if (this.isMultiple && this.inputElement) {
                    if (this.inputValue || this.isComposing) {
                        this.renderer.setStyle(this.inputElement.nativeElement, 'width', this.inputElement.nativeElement.scrollWidth + "px");
                    }
                    else {
                        this.renderer.removeStyle(this.inputElement.nativeElement, 'width');
                    }
                }
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.onClearSelection = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectedNodes.forEach(function (node) {
                    _this.removeSelected(node, false);
                });
                this.nzCleared.emit();
                this.closeDropDown();
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.updateDropDownClassMap = /**
         * @return {?}
         */
            function () {
                var _a, _b;
                if (this.treeRef && !this.treeRef.nzTreeClass['ant-select-tree']) {
                    this.treeRef.nzTreeClass = __assign({}, this.treeRef.nzTreeClass, (_a = {}, _a['ant-select-tree'] = true, _a));
                }
                this.dropDownClassMap = (_b = {},
                    _b['ant-select-dropdown'] = true,
                    _b['ant-select-tree-dropdown'] = true,
                    _b["ant-select-dropdown--single"] = !this.nzMultiple,
                    _b["ant-select-dropdown--multiple"] = this.nzMultiple,
                    _b["ant-select-dropdown-placement-bottomLeft"] = this.dropDownPosition === 'bottom',
                    _b["ant-select-dropdown-placement-topLeft"] = this.dropDownPosition === 'top',
                    _b);
            };
        /**
         * @return {?}
         */
        NzTreeSelectComponent.prototype.updateCdkConnectedOverlayStatus = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var overlayWidth = this.treeSelect.nativeElement.getBoundingClientRect().width;
                if (this.nzDropdownMatchSelectWidth) {
                    this.overlayRef.updateSize({ width: overlayWidth });
                }
                else {
                    this.overlayRef.updateSize({ minWidth: overlayWidth });
                }
                if (this.nzOpen) {
                    this.renderer.removeStyle(this.overlayRef.backdropElement, 'display');
                }
                else {
                    this.renderer.setStyle(this.overlayRef.backdropElement, 'display', 'none');
                }
            };
        NzTreeSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-tree-select',
                        animations: [selectDropDownAnimation, selectTagAnimation],
                        template: "<ng-template #inputTemplate>\n  <input\n    #inputElement\n    autocomplete=\"off\"\n    class=\"ant-select-search__field\"\n    (compositionstart)=\"isComposing = true\"\n    (compositionend)=\"isComposing = false\"\n    (keydown)=\"onKeyDownInput($event)\"\n    [ngModel]=\"inputValue\"\n    (ngModelChange)=\"setInputValue($event)\"\n    [disabled]=\"nzDisabled\">\n</ng-template>\n\n<ng-template #dropdownTemplate>\n  <div [ngClass]=\"dropDownClassMap\" [@selectDropDownAnimation]=\"nzOpen ? dropDownPosition : 'hidden'\"\n    [ngStyle]=\"nzDropdownStyle\">\n    <nz-tree\n      #treeRef\n      [nzData]=\"nzNodes\"\n      [nzMultiple]=\"nzMultiple\"\n      [nzSearchValue]=\"inputValue\"\n      [nzCheckable]=\"nzCheckable\"\n      [nzAsyncData]=\"nzAsyncData\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandAll]=\"nzDefaultExpandAll\"\n      [nzExpandedKeys]=\"nzDefaultExpandedKeys\"\n      [nzCheckedKeys]=\"nzCheckable ? value : []\"\n      [nzSelectedKeys]=\"!nzCheckable ? value : []\"\n      (nzExpandChange)=\"nzExpandChange.emit($event)\"\n      (nzClick)=\"nzTreeClick.emit($event)\"\n      (nzCheckedKeysChange)=\"updateSelectedNodes()\"\n      (nzSelectedKeysChange)=\"updateSelectedNodes()\"\n      (nzCheckBoxChange)=\"nzTreeCheckBoxChange.emit($event)\">\n    </nz-tree>\n  </div>\n</ng-template>\n\n<div\n  #treeSelect\n  class=\"ant-select-selection\"\n  [class.ant-select-selection--single]=\"!isMultiple\"\n  [class.ant-select-selection--multiple]=\"isMultiple\"\n  tabindex=\"0\">\n  <ng-container *ngIf=\"!isMultiple\">\n    <div class=\"ant-select-selection__rendered\">\n      <div\n        *ngIf=\"nzPlaceHolder && selectedNodes.length === 0\"\n        [style.display]=\"placeHolderDisplay\"\n        class=\"ant-select-selection__placeholder\">\n        {{ nzPlaceHolder }}\n      </div>\n\n      <div\n        *ngIf=\"selectedNodes.length === 1\"\n        class=\"ant-select-selection-selected-value\"\n        [attr.title]=\"nzDisplayWith(selectedNodes[0])\"\n        [ngStyle]=\"selectedValueDisplay\">\n        {{ nzDisplayWith(selectedNodes[0]) }}\n      </div>\n\n      <div\n        *ngIf=\"nzShowSearch\"\n        [style.display]=\"searchDisplay\"\n        class=\"ant-select-search ant-select-search--inline\">\n        <div class=\"ant-select-search__field__wrap\">\n          <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n          <span class=\"ant-select-search__field__mirror\">{{inputValue}}&nbsp;</span>\n        </div>\n      </div>\n\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"isMultiple\">\n    <ul class=\"ant-select-selection__rendered\">\n      <div\n        *ngIf=\"nzPlaceHolder && selectedNodes.length === 0\"\n        [style.display]=\"placeHolderDisplay\"\n        class=\"ant-select-selection__placeholder\">\n        {{ nzPlaceHolder }}\n      </div>\n      <ng-container *ngFor=\"let node of selectedNodes\">\n        <li\n          [@selectTagAnimation]\n          (@selectTagAnimation.done)=\"updatePosition()\"\n          [attr.title]=\"nzDisplayWith(node)\"\n          [class.ant-select-selection__choice__disabled]=\"node.isDisabled\"\n          class=\"ant-select-selection__choice\">\n               <span *ngIf=\"!node.isDisabled\" class=\"ant-select-selection__choice__remove\" (click)=\"removeSelected(node, true, $event)\">\n                 <i nz-icon type=\"close\" class=\"ant-select-remove-icon\"></i>\n               </span>\n          <span class=\"ant-select-selection__choice__content\">{{ nzDisplayWith(node) }}</span>\n        </li>\n      </ng-container>\n      <li class=\"ant-select-search ant-select-search--inline\">\n        <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n      </li>\n    </ul>\n  </ng-container>\n  <span *ngIf=\"nzAllowClear\" class=\"ant-select-selection__clear\" (click)=\"onClearSelection()\">\n    <i nz-icon type=\"close-circle\" class=\"ant-select-clear-icon\" theme=\"fill\"></i>\n  </span>\n  <span *ngIf=\"!isMultiple\" class=\"ant-select-arrow\">\n    <i nz-icon type=\"down\" class=\"ant-select-arrow-icon\"></i>\n  </span>\n</div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NzTreeSelectComponent; }),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.ant-select]': 'true',
                            '[class.ant-select-lg]': 'nzSize==="large"',
                            '[class.ant-select-sm]': 'nzSize==="small"',
                            '[class.ant-select-enabled]': '!nzDisabled',
                            '[class.ant-select-disabled]': 'nzDisabled',
                            '[class.ant-select-allow-clear]': 'nzAllowClear',
                            '[class.ant-select-open]': 'nzOpen'
                        },
                        styles: ["\n    .ant-select-dropdown {\n      top: 100%;\n      left: 0;\n      position: relative;\n      width: 100%;\n      margin-top: 4px;\n      margin-bottom: 4px;\n      overflow: auto;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NzTreeSelectComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef },
                { type: i2$1.Overlay },
                { type: i0.ViewContainerRef }
            ];
        };
        NzTreeSelectComponent.propDecorators = {
            nzAllowClear: [{ type: i0.Input }],
            nzShowExpand: [{ type: i0.Input }],
            nzDropdownMatchSelectWidth: [{ type: i0.Input }],
            nzCheckable: [{ type: i0.Input }],
            nzShowSearch: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzShowLine: [{ type: i0.Input }],
            nzAsyncData: [{ type: i0.Input }],
            nzMultiple: [{ type: i0.Input }],
            nzDefaultExpandAll: [{ type: i0.Input }],
            nzNodes: [{ type: i0.Input }],
            nzOpen: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzPlaceHolder: [{ type: i0.Input }],
            nzDropdownStyle: [{ type: i0.Input }],
            nzDefaultExpandedKeys: [{ type: i0.Input }],
            nzDisplayWith: [{ type: i0.Input }],
            nzOpenChange: [{ type: i0.Output }],
            nzCleared: [{ type: i0.Output }],
            nzRemoved: [{ type: i0.Output }],
            nzExpandChange: [{ type: i0.Output }],
            nzTreeClick: [{ type: i0.Output }],
            nzTreeCheckBoxChange: [{ type: i0.Output }],
            inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
            treeSelect: [{ type: i0.ViewChild, args: ['treeSelect',] }],
            dropdownTemplate: [{ type: i0.ViewChild, args: ['dropdownTemplate', { read: i0.TemplateRef },] }],
            treeRef: [{ type: i0.ViewChild, args: ['treeRef',] }],
            trigger: [{ type: i0.HostListener, args: ['click',] }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzAllowClear", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzShowExpand", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzDropdownMatchSelectWidth", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzCheckable", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzShowSearch", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzShowLine", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzAsyncData", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzMultiple", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzTreeSelectComponent.prototype, "nzDefaultExpandAll", void 0);
        return NzTreeSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzTreeSelectModule = /** @class */ (function () {
        function NzTreeSelectModule() {
        }
        NzTreeSelectModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, i2$1.OverlayModule, forms.FormsModule, NzTreeModule, NzIconModule],
                        declarations: [NzTreeSelectComponent],
                        exports: [NzTreeSelectComponent]
                    },] }
        ];
        return NzTreeSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzUploadBtnComponent = /** @class */ (function () {
        // #endregion
        function NzUploadBtnComponent(http, el, updateHostClassService) {
            this.http = http;
            this.el = el;
            this.updateHostClassService = updateHostClassService;
            this.reqs = {};
            this.inited = false;
            this.destroy = false;
            // #region fields
            this.classes = {};
            this.prefixCls = 'ant-upload';
            if (!http) {
                throw new Error("Not found 'HttpClient', You can import 'HttpClientModule' in your root module.");
            }
        }
        // #endregion
        /**
         * @return {?}
         */
        NzUploadBtnComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (this.options.disabled || !this.options.openFileDialogOnClick) {
                    return;
                }
                ( /** @type {?} */(this.file.nativeElement)).click();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzUploadBtnComponent.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.options.disabled) {
                    return;
                }
                if (e.key === 'Enter' || e.keyCode === keycodes.ENTER) {
                    this.onClick();
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzUploadBtnComponent.prototype.onFileDrop = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                if (this.options.disabled || e.type === 'dragover') {
                    e.preventDefault();
                    return;
                }
                if (this.options.directory) {
                    this.traverseFileTree(e.dataTransfer.items);
                }
                else {
                    /** @type {?} */
                    var files = Array.prototype.slice.call(e.dataTransfer.files).filter(function (file) { return _this.attrAccept(file, _this.options.accept); });
                    if (files.length) {
                        this.uploadFiles(files);
                    }
                }
                e.preventDefault();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzUploadBtnComponent.prototype.onChange = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.options.disabled) {
                    return;
                }
                /** @type {?} */
                var hie = /** @type {?} */ (e.target);
                this.uploadFiles(hie.files);
                hie.value = '';
            };
        /**
         * @param {?} files
         * @return {?}
         */
        NzUploadBtnComponent.prototype.traverseFileTree = /**
         * @param {?} files
         * @return {?}
         */
            function (files) {
                var _this = this;
                var e_1, _a;
                /** @type {?} */
                var _traverseFileTree = function (item, path) {
                    if (item.isFile) {
                        item.file(function (file) {
                            if (_this.attrAccept(file, _this.options.accept)) {
                                _this.uploadFiles([file]);
                            }
                        });
                    }
                    else if (item.isDirectory) {
                        /** @type {?} */
                        var dirReader = item.createReader();
                        dirReader.readEntries(function (entries) {
                            var e_2, _a;
                            try {
                                for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                                    var entrieItem = entries_1_1.value;
                                    _traverseFileTree(entrieItem, "" + path + item.name + "/");
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return))
                                        _a.call(entries_1);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                        });
                    }
                };
                try {
                    // tslint:disable-next-line:no-any
                    for (var _b = __values(/** @type {?} */ (files)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var file = _c.value;
                        _traverseFileTree(file.webkitGetAsEntry(), '');
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @param {?} file
         * @param {?} acceptedFiles
         * @return {?}
         */
        NzUploadBtnComponent.prototype.attrAccept = /**
         * @param {?} file
         * @param {?} acceptedFiles
         * @return {?}
         */
            function (file, acceptedFiles) {
                if (file && acceptedFiles) {
                    /** @type {?} */
                    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
                    /** @type {?} */
                    var fileName_1 = '' + file.name;
                    /** @type {?} */
                    var mimeType_1 = '' + file.type;
                    /** @type {?} */
                    var baseMimeType_1 = mimeType_1.replace(/\/.*$/, '');
                    return acceptedFilesArray.some(function (type) {
                        /** @type {?} */
                        var validType = type.trim();
                        if (validType.charAt(0) === '.') {
                            return fileName_1.toLowerCase().indexOf(validType.toLowerCase(), fileName_1.toLowerCase().length - validType.toLowerCase().length) !== -1;
                        }
                        else if (/\/\*$/.test(validType)) {
                            // This is something like a image/* mime type
                            return baseMimeType_1 === validType.replace(/\/.*$/, '');
                        }
                        return mimeType_1 === validType;
                    });
                }
                return true;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        NzUploadBtnComponent.prototype.attachUid = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                if (!file.uid) {
                    file.uid = Math.random().toString(36).substring(2);
                }
                return file;
            };
        /**
         * @param {?} fileList
         * @return {?}
         */
        NzUploadBtnComponent.prototype.uploadFiles = /**
         * @param {?} fileList
         * @return {?}
         */
            function (fileList) {
                var _this = this;
                /** @type {?} */
                var postFiles = Array.prototype.slice.call(fileList);
                this.options.filters.forEach(function (f) { return postFiles = f.fn(postFiles); });
                postFiles.forEach(function (file) {
                    _this.attachUid(file);
                    _this.upload(file, postFiles);
                });
            };
        /**
         * @param {?} file
         * @param {?} fileList
         * @return {?}
         */
        NzUploadBtnComponent.prototype.upload = /**
         * @param {?} file
         * @param {?} fileList
         * @return {?}
         */
            function (file, fileList) {
                var _this = this;
                if (!this.options.beforeUpload) {
                    return this.post(file);
                }
                /** @type {?} */
                var before = this.options.beforeUpload(file, fileList);
                if (before instanceof rxjs.Observable) {
                    before.subscribe(function (processedFile) {
                        /** @type {?} */
                        var processedFileType = Object.prototype.toString.call(processedFile);
                        if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {
                            _this.attachUid(processedFile);
                            _this.post(processedFile);
                        }
                        else if (typeof processedFile === 'boolean' && processedFile !== false) {
                            _this.post(file);
                        }
                    });
                }
                else if (before !== false) {
                    return this.post(file);
                }
            };
        /**
         * @param {?} file
         * @return {?}
         */
        NzUploadBtnComponent.prototype.post = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                var _this = this;
                if (this.destroy) {
                    return;
                }
                /** @type {?} */
                var opt = this.options;
                var uid = file.uid;
                var data = opt.data, headers = opt.headers;
                if (typeof data === 'function') {
                    data = ( /** @type {?} */(data))(file);
                }
                if (typeof headers === 'function') {
                    headers = ( /** @type {?} */(headers))(file);
                }
                /** @type {?} */
                var args = {
                    action: opt.action,
                    name: opt.name,
                    headers: headers,
                    file: file,
                    data: data,
                    withCredentials: opt.withCredentials,
                    onProgress: opt.onProgress ? function (e) {
                        opt.onProgress(e, file);
                    } : null,
                    onSuccess: function (ret, xhr) {
                        _this.clean(uid);
                        opt.onSuccess(ret, file, xhr);
                    },
                    onError: function (xhr) {
                        _this.clean(uid);
                        opt.onError(xhr, file);
                    }
                };
                /** @type {?} */
                var req$ = (opt.customRequest || this.xhr).call(this, args);
                if (!(req$ instanceof rxjs.Subscription)) {
                    console.warn("Must return Subscription type in '[nzCustomRequest]' property");
                }
                this.reqs[uid] = req$;
                opt.onStart(file);
            };
        /**
         * @param {?} args
         * @return {?}
         */
        NzUploadBtnComponent.prototype.xhr = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                var _this = this;
                /** @type {?} */
                var formData = new FormData();
                // tslint:disable-next-line:no-any
                formData.append(args.name, /** @type {?} */ (args.file));
                if (args.data) {
                    Object.keys(args.data).map(function (key) {
                        formData.append(key, args.data[key]);
                    });
                }
                if (!args.headers) {
                    args.headers = {};
                }
                if (args.headers['X-Requested-With'] !== null) {
                    args.headers['X-Requested-With'] = "XMLHttpRequest";
                }
                else {
                    delete args.headers['X-Requested-With'];
                }
                /** @type {?} */
                var req = new i2.HttpRequest('POST', args.action, formData, {
                    reportProgress: true,
                    withCredentials: args.withCredentials,
                    headers: new i2.HttpHeaders(args.headers)
                });
                return this.http.request(req).subscribe(function (event) {
                    if (event.type === i2.HttpEventType.UploadProgress) {
                        if (event.total > 0) {
                            // tslint:disable-next-line:no-any
                            ( /** @type {?} */(event)).percent = event.loaded / event.total * 100;
                        }
                        args.onProgress(event, args.file);
                    }
                    else if (event instanceof i2.HttpResponse) {
                        args.onSuccess(event.body, args.file, event);
                    }
                }, function (err) {
                    _this.abort(args.file);
                    args.onError(err, args.file);
                });
            };
        /**
         * @param {?} uid
         * @return {?}
         */
        NzUploadBtnComponent.prototype.clean = /**
         * @param {?} uid
         * @return {?}
         */
            function (uid) {
                /** @type {?} */
                var req$ = this.reqs[uid];
                if (req$ instanceof rxjs.Subscription) {
                    req$.unsubscribe();
                }
                delete this.reqs[uid];
            };
        /**
         * @param {?=} file
         * @return {?}
         */
        NzUploadBtnComponent.prototype.abort = /**
         * @param {?=} file
         * @return {?}
         */
            function (file) {
                var _this = this;
                if (file) {
                    this.clean(file && file.uid);
                }
                else {
                    Object.keys(this.reqs).forEach(function (uid) { return _this.clean(uid); });
                }
            };
        /**
         * @return {?}
         */
        NzUploadBtnComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = __assign((_a = {}, _a[this.prefixCls] = true, _a[this.prefixCls + "-disabled"] = this.options.disabled, _a), this.classes);
                this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);
            };
        /**
         * @return {?}
         */
        NzUploadBtnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.inited = true;
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzUploadBtnComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.inited) {
                    this.setClassMap();
                }
            };
        /**
         * @return {?}
         */
        NzUploadBtnComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy = true;
                this.abort();
            };
        NzUploadBtnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: '[nz-upload-btn]',
                        template: "<input type=\"file\" #file (change)=\"onChange($event)\"\n  [attr.accept]=\"options.accept\"\n  [attr.directory]=\"options.directory ? 'directory': null\"\n  [attr.webkitdirectory]=\"options.directory ? 'webkitdirectory': null\"\n  [multiple]=\"options.multiple\" style=\"display: none;\">\n<ng-content></ng-content>",
                        host: {
                            '[attr.tabindex]': '"0"',
                            '[attr.role]': '"button"'
                        },
                        providers: [NzUpdateHostClassService],
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        NzUploadBtnComponent.ctorParameters = function () {
            return [
                { type: i2.HttpClient, decorators: [{ type: i0.Optional }] },
                { type: i0.ElementRef },
                { type: NzUpdateHostClassService }
            ];
        };
        NzUploadBtnComponent.propDecorators = {
            file: [{ type: i0.ViewChild, args: ['file',] }],
            classes: [{ type: i0.Input }],
            options: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click',] }],
            onKeyDown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
            onFileDrop: [{ type: i0.HostListener, args: ['drop', ['$event'],] }, { type: i0.HostListener, args: ['dragover', ['$event'],] }]
        };
        return NzUploadBtnComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzUploadListComponent = /** @class */ (function () {
        // #endregion
        function NzUploadListComponent(el, updateHostClassService) {
            this.el = el;
            this.updateHostClassService = updateHostClassService;
            // #region fields
            // tslint:disable-next-line:no-any
            this.locale = {};
            this.prefixCls = 'ant-upload-list';
        }
        /**
         * @return {?}
         */
        NzUploadListComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                var _a;
                /** @type {?} */
                var classMap = (_a = {},
                    _a[this.prefixCls] = true,
                    _a[this.prefixCls + "-" + this.listType] = true,
                    _a);
                this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);
            };
        // #endregion
        // #region render
        /**
         * @param {?} file
         * @param {?} e
         * @return {?}
         */
        NzUploadListComponent.prototype.handlePreview = /**
         * @param {?} file
         * @param {?} e
         * @return {?}
         */
            function (file, e) {
                if (!this.onPreview) {
                    return;
                }
                e.preventDefault();
                return this.onPreview(file);
            };
        /**
         * @param {?} file
         * @param {?} e
         * @return {?}
         */
        NzUploadListComponent.prototype.handleRemove = /**
         * @param {?} file
         * @param {?} e
         * @return {?}
         */
            function (file, e) {
                e.preventDefault();
                if (this.onRemove) {
                    this.onRemove(file);
                }
                return;
            };
        /**
         * @return {?}
         */
        NzUploadListComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.setClassMap();
            };
        NzUploadListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-upload-list',
                        template: "<div *ngFor=\"let file of items\" class=\"ant-upload-list-item ant-upload-list-item-{{file.status}}\" @itemState>\n  <ng-template #icon>\n    <ng-container *ngIf=\"listType === 'picture' || listType === 'picture-card'; else defIcon\">\n      <ng-container *ngIf=\"file.status === 'uploading' || (!file.thumbUrl && !file.url); else thumbIcon\">\n        <div *ngIf=\"listType === 'picture-card'\" class=\"ant-upload-list-item-uploading-text\">{{ locale.uploading }}</div>\n        <i *ngIf=\"listType !== 'picture-card'\" class=\"anticon anticon-picture ant-upload-list-item-thumbnail\"></i>\n      </ng-container>\n    </ng-container>\n    <ng-template #defIcon>\n      <i nz-icon [type]=\"file.status === 'uploading' ? 'loading' : 'paper-clip'\"></i>\n    </ng-template>\n    <ng-template #thumbIcon>\n      <a class=\"ant-upload-list-item-thumbnail\" target=\"_blank\" rel=\"noopener noreferrer\"\n        [href]=\"file.thumbUrl || file.url\"\n        (click)=\"handlePreview(file, $event)\">\n        <img [src]=\"file.thumbUrl || file.url\" [attr.alt]=\"file.name\" />\n      </a>\n    </ng-template>\n  </ng-template>\n  <ng-template #preview>\n    <ng-container *ngIf=\"file.url; else prevText\">\n      <a [href]=\"file.thumbUrl || file.url\" target=\"_blank\" rel=\"noopener noreferrer\"\n        (click)=\"handlePreview(file, $event)\" class=\"ant-upload-list-item-name\" title=\"{{ file.name }}\">{{ file.name }}</a>\n    </ng-container>\n    <ng-template #prevText>\n      <span (click)=\"handlePreview(file, $event)\" class=\"ant-upload-list-item-name\" title=\"{{ file.name }}\">{{ file.name }}</span>\n    </ng-template>\n  </ng-template>\n  <div class=\"ant-upload-list-item-info\">\n    <nz-tooltip *ngIf=\"file.status === 'error'\" [nzTitle]=\"file.message\">\n        <span nz-tooltip>\n          <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\n          <ng-template [ngTemplateOutlet]=\"preview\"></ng-template>\n        </span>\n    </nz-tooltip>\n    <span *ngIf=\"file.status !== 'error'\">\n        <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\n        <ng-template [ngTemplateOutlet]=\"preview\"></ng-template>\n      </span>\n  </div>\n  <ng-container *ngIf=\"listType === 'picture-card' && file.status !== 'uploading'; else close\">\n      <span class=\"ant-upload-list-item-actions\">\n        <a *ngIf=\"icons.showPreviewIcon\" [href]=\"file.thumbUrl || file.url\"\n          target=\"_blank\" rel=\"noopener noreferrer\"\n          title=\"{{ locale.previewFile }}\"\n          [ngStyle]=\"!(file.url || file.thumbUrl) && {'opacity': .5, 'pointer-events': 'none'}\"\n          (click)=\"handlePreview(file, $event)\">\n            <i nz-icon type=\"eye-o\"></i>\n        </a>\n        <i *ngIf=\"icons.showRemoveIcon\" (click)=\"handleRemove(file, $event)\" class=\"anticon anticon-delete\" title=\"{{ locale.removeFile }}\"></i>\n      </span>\n  </ng-container>\n  <ng-template #close>\n    <i *ngIf=\"icons.showRemoveIcon\" (click)=\"handleRemove(file, $event)\" nz-icon type=\"close\" title=\"{{ locale.removeFile }}\"></i>\n  </ng-template>\n  <div *ngIf=\"file.status === 'uploading'\" class=\"ant-upload-list-item-progress\">\n    <nz-progress [nzPercent]=\"file.percent\" [nzShowInfo]=\"false\" [nzStrokeWidth]=\"2\"></nz-progress>\n  </div>\n</div>",
                        providers: [NzUpdateHostClassService],
                        animations: [
                            animations.trigger('itemState', [
                                animations.transition(':enter', [
                                    animations.style({ height: '0', width: '0', opacity: 0 }),
                                    animations.animate(150, animations.style({ height: '*', width: '*', opacity: 1 }))
                                ]),
                                animations.transition(':leave', [
                                    animations.animate(150, animations.style({ height: '0', width: '0', opacity: 0 }))
                                ])
                            ])
                        ],
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        NzUploadListComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NzUpdateHostClassService }
            ];
        };
        NzUploadListComponent.propDecorators = {
            locale: [{ type: i0.Input }],
            listType: [{ type: i0.Input }],
            items: [{ type: i0.Input }],
            icons: [{ type: i0.Input }],
            onPreview: [{ type: i0.Input }],
            onRemove: [{ type: i0.Input }]
        };
        return NzUploadListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzUploadComponent = /** @class */ (function () {
        // #endregion
        function NzUploadComponent(cdr, i18n) {
            var _this = this;
            this.cdr = cdr;
            this.i18n = i18n;
            // tslint:disable-next-line:no-any
            this.locale = {};
            // #region fields
            this.nzType = 'select';
            this._limit = 0;
            this._size = 0;
            this.nzDirectory = false;
            this.nzOpenFileDialogOnClick = true;
            this.nzFilter = [];
            this.nzFileList = [];
            this.nzDisabled = false;
            this.nzListType = 'text';
            this.nzMultiple = false;
            this.nzName = 'file';
            this._showUploadList = true;
            this.nzShowButton = true;
            this.nzWithCredentials = false;
            this.nzChange = new i0.EventEmitter();
            this.nzFileListChange = new i0.EventEmitter();
            this.onStart = function (file) {
                if (!_this.nzFileList) {
                    _this.nzFileList = [];
                }
                /** @type {?} */
                var targetItem = _this.fileToObject(file);
                targetItem.status = 'uploading';
                _this.nzFileList.push(targetItem);
                _this.genThumb(targetItem);
                _this.nzFileListChange.emit(_this.nzFileList);
                _this.nzChange.emit({ file: targetItem, fileList: _this.nzFileList, type: 'start' });
                _this.cdr.markForCheck();
            };
            this.onProgress = function (e, file) {
                /** @type {?} */
                var fileList = _this.nzFileList;
                /** @type {?} */
                var targetItem = _this.getFileItem(file, fileList);
                targetItem.percent = e.percent;
                _this.nzChange.emit({
                    event: e,
                    file: __assign({}, targetItem),
                    fileList: _this.nzFileList,
                    type: 'progress'
                });
                _this.cdr.detectChanges();
            };
            this.onSuccess = function (res, file) {
                /** @type {?} */
                var fileList = _this.nzFileList;
                /** @type {?} */
                var targetItem = _this.getFileItem(file, fileList);
                targetItem.status = 'done';
                targetItem.response = res;
                _this.nzChange.emit({
                    file: __assign({}, targetItem),
                    fileList: fileList,
                    type: 'success'
                });
                _this.cdr.detectChanges();
            };
            this.onError = function (err, file) {
                /** @type {?} */
                var fileList = _this.nzFileList;
                /** @type {?} */
                var targetItem = _this.getFileItem(file, fileList);
                targetItem.error = err;
                targetItem.status = 'error';
                targetItem["message"] = _this.genErr(targetItem);
                _this.nzChange.emit({
                    file: __assign({}, targetItem),
                    fileList: fileList,
                    type: 'error'
                });
                _this.cdr.detectChanges();
            };
            // #endregion
            // #region list
            this.onRemove = function (file) {
                _this.upload.abort(file);
                file.status = 'removed';
                /** @type {?} */
                var fnRes = typeof _this.nzRemove === 'function' ?
                    _this.nzRemove(file) : _this.nzRemove == null ? true : _this.nzRemove;
                (fnRes instanceof rxjs.Observable ? fnRes : rxjs.of(fnRes))
                    .pipe(operators.filter(function (res) { return res; }))
                    .subscribe(function () {
                    _this.nzFileList = _this.removeFileItem(file, _this.nzFileList);
                    _this.nzChange.emit({
                        file: file,
                        fileList: _this.nzFileList,
                        type: 'removed'
                    });
                    _this.nzFileListChange.emit(_this.nzFileList);
                    _this.cdr.detectChanges();
                });
            };
            this.prefixCls = 'ant-upload';
            this.classList = [];
        }
        Object.defineProperty(NzUploadComponent.prototype, "nzLimit", {
            get: /**
             * @return {?}
             */ function () {
                return this._limit;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._limit = toNumber(value, null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzUploadComponent.prototype, "nzSize", {
            get: /**
             * @return {?}
             */ function () {
                return this._size;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._size = toNumber(value, null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzUploadComponent.prototype, "nzShowUploadList", {
            get: /**
             * @return {?}
             */ function () {
                return this._showUploadList;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showUploadList = typeof value === 'boolean' ? toBoolean(value) : value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NzUploadComponent.prototype.zipOptions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (typeof this.nzShowUploadList === 'boolean' && this.nzShowUploadList) {
                    this.nzShowUploadList = {
                        showPreviewIcon: true,
                        showRemoveIcon: true
                    };
                }
                /** @type {?} */
                var filters = this.nzFilter.slice();
                if (this.nzMultiple && this.nzLimit > 0 && filters.findIndex(function (w) { return w.name === 'limit'; }) === -1) {
                    filters.push({
                        name: 'limit',
                        fn: function (fileList) { return fileList.slice(-_this.nzLimit); }
                    });
                }
                if (this.nzSize > 0 && filters.findIndex(function (w) { return w.name === 'size'; }) === -1) {
                    filters.push({
                        name: 'size',
                        fn: function (fileList) { return fileList.filter(function (w) { return (w.size / 1024) <= _this.nzSize; }); }
                    });
                }
                if (this.nzFileType && this.nzFileType.length > 0 && filters.findIndex(function (w) { return w.name === 'type'; }) === -1) {
                    /** @type {?} */
                    var types_1 = this.nzFileType.split(',');
                    filters.push({
                        name: 'type',
                        fn: function (fileList) { return fileList.filter(function (w) { return ~types_1.indexOf(w.type); }); }
                    });
                }
                this._btnOptions = {
                    disabled: this.nzDisabled,
                    accept: this.nzAccept,
                    action: this.nzAction,
                    directory: this.nzDirectory,
                    openFileDialogOnClick: this.nzOpenFileDialogOnClick,
                    beforeUpload: this.nzBeforeUpload,
                    customRequest: this.nzCustomRequest,
                    data: this.nzData,
                    headers: this.nzHeaders,
                    name: this.nzName,
                    multiple: this.nzMultiple,
                    withCredentials: this.nzWithCredentials,
                    filters: filters,
                    onStart: this.onStart,
                    onProgress: this.onProgress,
                    onSuccess: this.onSuccess,
                    onError: this.onError
                };
                return this;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        NzUploadComponent.prototype.fileToObject = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                return {
                    lastModified: file.lastModified,
                    lastModifiedDate: file.lastModifiedDate,
                    name: file.filename || file.name,
                    size: file.size,
                    type: file.type,
                    uid: file.uid,
                    response: file.response,
                    error: file.error,
                    percent: 0,
                    // tslint:disable-next-line:no-any
                    originFileObj: /** @type {?} */ (file)
                };
            };
        /**
         * @param {?} file
         * @param {?} fileList
         * @return {?}
         */
        NzUploadComponent.prototype.getFileItem = /**
         * @param {?} file
         * @param {?} fileList
         * @return {?}
         */
            function (file, fileList) {
                return fileList.filter(function (item) { return item.uid === file.uid; })[0];
            };
        /**
         * @param {?} file
         * @param {?} fileList
         * @return {?}
         */
        NzUploadComponent.prototype.removeFileItem = /**
         * @param {?} file
         * @param {?} fileList
         * @return {?}
         */
            function (file, fileList) {
                return fileList.filter(function (item) { return item.uid !== file.uid; });
            };
        /**
         * @param {?} file
         * @return {?}
         */
        NzUploadComponent.prototype.genErr = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                return file.response && typeof file.response === 'string' ?
                    file.response :
                    (file.error && file.error.statusText) || this.locale.uploadError;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        NzUploadComponent.prototype.genThumb = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                /** @type {?} */
                var win = /** @type {?} */ (window);
                if ((this.nzListType !== 'picture' && this.nzListType !== 'picture-card') ||
                    typeof document === 'undefined' ||
                    typeof win === 'undefined' ||
                    !win.FileReader ||
                    !win.File ||
                    !(file.originFileObj instanceof File) ||
                    file.thumbUrl != null) {
                    return;
                }
                file.thumbUrl = '';
                /** @type {?} */
                var reader = new FileReader();
                reader.onloadend = function () { return file.thumbUrl = /** @type {?} */ (reader.result); };
                reader.readAsDataURL(file.originFileObj);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzUploadComponent.prototype.fileDrop = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.type === this.dragState) {
                    return;
                }
                this.dragState = e.type;
                this.setClassMap();
            };
        /**
         * @return {?}
         */
        NzUploadComponent.prototype.setClassMap = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var subCls = [];
                if (this.nzType === 'drag') {
                    subCls = [
                        this.nzFileList.some(function (file) { return file.status === 'uploading'; }) && this.prefixCls + "-drag-uploading",
                        this.dragState === 'dragover' && this.prefixCls + "-drag-hover"
                    ];
                }
                else {
                    subCls = [
                        this.prefixCls + "-select-" + this.nzListType
                    ];
                }
                this.classList = __spread([
                    this.prefixCls,
                    this.prefixCls + "-" + this.nzType
                ], subCls, [
                    this.nzDisabled && this.prefixCls + "-disabled"
                ]).filter(function (item) { return !!item; });
                this.cdr.detectChanges();
            };
        // #endregion
        /**
         * @return {?}
         */
        NzUploadComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18n$ = this.i18n.localeChange.subscribe(function () {
                    _this.locale = _this.i18n.getLocaleData('Upload');
                    _this.cdr.detectChanges();
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzUploadComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes.nzFileList) {
                    (this.nzFileList || []).forEach(function (file) { return file["message"] = _this.genErr(file); });
                }
                this.zipOptions().setClassMap();
            };
        /**
         * @return {?}
         */
        NzUploadComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.i18n$.unsubscribe();
            };
        NzUploadComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nz-upload',
                        template: "<ng-template #list>\n  <nz-upload-list *ngIf=\"nzShowUploadList\"\n    [locale]=\"locale\"\n    [listType]=\"nzListType\"\n    [items]=\"nzFileList\"\n    [icons]=\"nzShowUploadList\"\n    [onPreview]=\"nzPreview\"\n    [onRemove]=\"onRemove\"></nz-upload-list>\n</ng-template>\n<ng-template #con><ng-content></ng-content></ng-template>\n<ng-template #btn>\n  <div [ngClass]=\"classList\" [style.display]=\"nzShowButton ? '' : 'none'\">\n    <div nz-upload-btn #upload [options]=\"_btnOptions\">\n      <ng-template [ngTemplateOutlet]=\"con\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n<ng-container *ngIf=\"nzType === 'drag'; else select\">\n  <div [ngClass]=\"classList\"\n    (drop)=\"fileDrop($event)\"\n    (dragover)=\"fileDrop($event)\"\n    (dragleave)=\"fileDrop($event)\">\n    <div nz-upload-btn #upload [options]=\"_btnOptions\" [classes]=\"{'ant-upload-btn': true}\">\n      <div class=\"ant-upload-drag-container\">\n        <ng-template [ngTemplateOutlet]=\"con\"></ng-template>\n      </div>\n    </div>\n  </div>\n  <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\n</ng-container>\n<ng-template #select>\n  <ng-container *ngIf=\"nzListType === 'picture-card'; else pic\">\n    <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\n    <ng-template [ngTemplateOutlet]=\"btn\"></ng-template>\n  </ng-container>\n</ng-template>\n<ng-template #pic>\n  <ng-template [ngTemplateOutlet]=\"btn\"></ng-template>\n  <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\n</ng-template>",
                        preserveWhitespaces: false,
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzUploadComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: NzI18nService }
            ];
        };
        NzUploadComponent.propDecorators = {
            upload: [{ type: i0.ViewChild, args: ['upload',] }],
            nzType: [{ type: i0.Input }],
            nzLimit: [{ type: i0.Input }],
            nzSize: [{ type: i0.Input }],
            nzFileType: [{ type: i0.Input }],
            nzAccept: [{ type: i0.Input }],
            nzAction: [{ type: i0.Input }],
            nzDirectory: [{ type: i0.Input }],
            nzOpenFileDialogOnClick: [{ type: i0.Input }],
            nzBeforeUpload: [{ type: i0.Input }],
            nzCustomRequest: [{ type: i0.Input }],
            nzData: [{ type: i0.Input }],
            nzFilter: [{ type: i0.Input }],
            nzFileList: [{ type: i0.Input }],
            nzDisabled: [{ type: i0.Input }],
            nzHeaders: [{ type: i0.Input }],
            nzListType: [{ type: i0.Input }],
            nzMultiple: [{ type: i0.Input }],
            nzName: [{ type: i0.Input }],
            nzShowUploadList: [{ type: i0.Input }],
            nzShowButton: [{ type: i0.Input }],
            nzWithCredentials: [{ type: i0.Input }],
            nzRemove: [{ type: i0.Input }],
            nzPreview: [{ type: i0.Input }],
            nzChange: [{ type: i0.Output }],
            nzFileListChange: [{ type: i0.Output }]
        };
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzUploadComponent.prototype, "nzDirectory", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzUploadComponent.prototype, "nzOpenFileDialogOnClick", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzUploadComponent.prototype, "nzDisabled", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzUploadComponent.prototype, "nzMultiple", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzUploadComponent.prototype, "nzShowButton", void 0);
        __decorate([
            InputBoolean(),
            __metadata("design:type", Object)
        ], NzUploadComponent.prototype, "nzWithCredentials", void 0);
        return NzUploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzUploadModule = /** @class */ (function () {
        function NzUploadModule() {
        }
        NzUploadModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i3.CommonModule, forms.FormsModule, NzToolTipModule, NzProgressModule, NzI18nModule, NzIconModule],
                        declarations: [NzUploadComponent, NzUploadBtnComponent, NzUploadListComponent],
                        exports: [NzUploadComponent]
                    },] }
        ];
        return NzUploadModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NzDropdownService$$1 = /** @class */ (function () {
        /* tslint:disable-next-line:no-any */
        function NzDropdownService$$1(overlay, document, zone) {
            this.overlay = overlay;
            this.document = document;
            this.zone = zone;
            this.positions = [
                new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' }),
                new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
                new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),
                new i2$1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            ];
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        NzDropdownService$$1.prototype.createOverlay = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.createPoint($event);
                /** @type {?} */
                var fakeElementRef = new i0.ElementRef(this.locatePoint);
                this.positionStrategy = this.overlay.position().flexibleConnectedTo(fakeElementRef);
                this.handlePositionChanges(this.positionStrategy);
                /** @type {?} */
                var overlayConfig = new i2$1.OverlayConfig({
                    hasBackdrop: true,
                    scrollStrategy: this.overlay.scrollStrategies.close(),
                    positionStrategy: this.positionStrategy
                });
                return this.overlay.create(overlayConfig);
            };
        /**
         * @param {?} strategy
         * @return {?}
         */
        NzDropdownService$$1.prototype.handlePositionChanges = /**
         * @param {?} strategy
         * @return {?}
         */
            function (strategy) {
                var _this = this;
                strategy.withPositions(this.positions);
                this.onPositionChangeSubscription = this.positionStrategy.positionChanges.subscribe(function (data) {
                    /** @type {?} */
                    var position = data.connectionPair.overlayY === 'bottom' ? 'top' : 'bottom';
                    _this.instance.setDropDownPosition(position);
                });
            };
        /**
         * @param {?} overlayRef
         * @return {?}
         */
        NzDropdownService$$1.prototype.handleCloseEvent = /**
         * @param {?} overlayRef
         * @return {?}
         */
            function (overlayRef) {
                var _this = this;
                this.backdropClickSubscription = overlayRef.backdropClick().subscribe(function (_) { return _this.instance.close(); });
                this.detachmentsSubscription = overlayRef.detachments().subscribe(function (_) { return _this.close(); });
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NzDropdownService$$1.prototype.createPoint = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (!this.locatePoint) {
                    /** @type {?} */
                    var container = this.document.createElement('span');
                    this.document.body.appendChild(container);
                    this.locatePoint = container;
                }
                this.locatePoint.style.position = "fixed";
                this.locatePoint.style.top = e.clientY + "px";
                this.locatePoint.style.left = e.clientX + "px";
            };
        /**
         * @return {?}
         */
        NzDropdownService$$1.prototype.removePoint = /**
         * @return {?}
         */
            function () {
                if (this.locatePoint) {
                    this.document.body.removeChild(this.locatePoint);
                    this.locatePoint = null;
                }
            };
        /**
         * @param {?} instance
         * @param {?} template
         * @return {?}
         */
        NzDropdownService$$1.prototype.setInstanceValue = /**
         * @param {?} instance
         * @param {?} template
         * @return {?}
         */
            function (instance, template) {
                instance.open = true;
                instance.setTemplateRef(template);
                instance.setControl(this);
            };
        /**
         * @param {?} $event
         * @param {?} template
         * @return {?}
         */
        NzDropdownService$$1.prototype.create = /**
         * @param {?} $event
         * @param {?} template
         * @return {?}
         */
            function ($event, template) {
                var _this = this;
                $event.preventDefault();
                if (this.overlayRef && this.overlayRef.hasAttached()) {
                    this.overlayRef.dispose();
                }
                else {
                    this.overlayRef = this.createOverlay($event);
                    setTimeout(function () {
                        if (_this.overlayRef.backdropElement) {
                            _this.zone.runOutsideAngular(function () {
                                _this.overlayRef.backdropElement.addEventListener('contextmenu', function (e) { return e.preventDefault(); });
                            });
                        }
                    });
                    this.instance = this.overlayRef.attach(new portal.ComponentPortal(NzDropdownContextComponent)).instance;
                    this.setInstanceValue(this.instance, template);
                    this.handleCloseEvent(this.overlayRef);
                    return this.instance;
                }
            };
        /**
         * @return {?}
         */
        NzDropdownService$$1.prototype.close = /**
         * @return {?}
         */
            function () {
                this.removePoint();
                this.overlayRef.dispose();
                if (this.backdropClickSubscription) {
                    this.backdropClickSubscription.unsubscribe();
                    this.backdropClickSubscription = null;
                }
                if (this.detachmentsSubscription) {
                    this.detachmentsSubscription.unsubscribe();
                    this.detachmentsSubscription = null;
                }
                if (this.onPositionChangeSubscription) {
                    this.onPositionChangeSubscription.unsubscribe();
                    this.onPositionChangeSubscription = null;
                }
            };
        NzDropdownService$$1.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NzDropdownService$$1.ctorParameters = function () {
            return [
                { type: i2$1.Overlay },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: i0.NgZone }
            ];
        };
        /** @nocollapse */ NzDropdownService$$1.ngInjectableDef = i0.defineInjectable({ factory: function NzDropdownService_Factory() { return new NzDropdownService$$1(i0.inject(i2$1.Overlay), i0.inject(i3.DOCUMENT), i0.inject(i0.NgZone)); }, token: NzDropdownService$$1, providedIn: "root" });
        return NzDropdownService$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$1 = {
        today: 'اليوم',
        now: 'الأن',
        backToToday: 'العودة إلى اليوم',
        ok: 'تأكيد',
        clear: 'مسح',
        month: 'الشهر',
        year: 'السنة',
        timeSelect: 'اختيار الوقت',
        dateSelect: 'اختيار التاريخ',
        monthSelect: 'اختيار الشهر',
        yearSelect: 'اختيار السنة',
        decadeSelect: 'اختيار العقد',
        yearFormat: 'YYYY',
        dateFormat: 'M/D/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'M/D/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'الشهر السابق (PageUp)',
        nextMonth: 'الشهر التالى(PageDown)',
        previousYear: 'العام السابق (Control + left)',
        nextYear: 'العام التالى (Control + right)',
        previousDecade: 'العقد السابق',
        nextDecade: 'العقد التالى',
        previousCentury: 'القرن السابق',
        nextCentury: 'القرن التالى',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$2 = {
        placeholder: 'اختيار الوقت',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$3 = {
        lang: __assign({ placeholder: 'اختيار التاريخ', rangePlaceholder: ['البداية', 'النهاية'] }, CalendarLocale$1),
        timePickerLocale: __assign({}, locale$2),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$1 = {
        // Options.jsx
        items_per_page: '/ الصفحة',
        jump_to: 'الذهاب إلى',
        jump_to_confirm: 'تأكيد',
        page: '',
        // Pagination.jsx
        prev_page: 'الصفحة السابقة',
        next_page: 'الصفحة التالية',
        prev_5: 'خمس صفحات سابقة',
        next_5: 'خمس صفحات تالية',
        prev_3: 'ثلاث صفحات سابقة',
        next_3: 'ثلاث صفحات تالية',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ar_EG = {
        locale: 'ar',
        Pagination: Pagination$1,
        DatePicker: locale$3,
        TimePicker: locale$2,
        Calendar: CalendarLocale$1,
        Table: {
            filterTitle: 'الفلاتر',
            filterConfirm: 'تأكيد',
            filterReset: 'إعادة ضبط',
            emptyText: 'لا توجد بيانات',
            selectAll: 'اختيار الكل',
            selectInvert: 'إلغاء الاختيار',
        },
        Modal: {
            okText: 'تأكيد',
            cancelText: 'إلغاء',
            justOkText: 'تأكيد',
        },
        Popconfirm: {
            okText: 'تأكيد',
            cancelText: 'إلغاء',
        },
        Transfer: {
            notFoundContent: 'لا يوجد محتوى',
            searchPlaceholder: 'ابحث هنا',
            itemUnit: 'عنصر',
            itemsUnit: 'عناصر',
        },
        Select: {
            notFoundContent: 'لايوجد محتوى',
        },
        Upload: {
            uploading: 'جاري الرفع...',
            removeFile: 'احذف الملف',
            uploadError: 'مشكلة فى الرفع',
            previewFile: 'استعرض الملف',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$2 = {
        today: 'Днес',
        now: 'Сега',
        backToToday: 'Към днес',
        ok: 'Добре',
        clear: 'Изчистване',
        month: 'Месец',
        year: 'Година',
        timeSelect: 'Избор на час',
        dateSelect: 'Избор на дата',
        monthSelect: 'Избор на месец',
        yearSelect: 'Избор на година',
        decadeSelect: 'Десетилетие',
        yearFormat: 'YYYY',
        dateFormat: 'D M YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D M YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Предишен месец (PageUp)',
        nextMonth: 'Следващ месец (PageDown)',
        previousYear: 'Последна година (Control + left)',
        nextYear: 'Следваща година (Control + right)',
        previousDecade: 'Предишно десетилетие',
        nextDecade: 'Следващо десетилетие',
        previousCentury: 'Последен век',
        nextCentury: 'Следващ век',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$4 = {
        placeholder: 'Избор на час',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$5 = {
        lang: __assign({ placeholder: 'Избор на дата', rangePlaceholder: ['Начална', 'Крайна'] }, CalendarLocale$2),
        timePickerLocale: __assign({}, locale$4),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$2 = {
        // Options.jsx
        items_per_page: '/ страница',
        jump_to: 'Към',
        jump_to_confirm: 'потвърждавам',
        page: '',
        // Pagination.jsx
        prev_page: 'Предишна страница',
        next_page: 'Следваща страница',
        prev_5: 'Предишни 5 страници',
        next_5: 'Следващи 5 страници',
        prev_3: 'Предишни 3 страници',
        next_3: 'Следващи 3 страници',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var bg_BG = {
        locale: 'bg',
        Pagination: Pagination$2,
        DatePicker: locale$5,
        TimePicker: locale$4,
        Calendar: CalendarLocale$2,
        Table: {
            filterTitle: 'Филтриране',
            filterConfirm: 'Добре',
            filterReset: 'Нулриане',
            emptyText: 'Няма данни',
            selectAll: 'Избор на текуща страница',
            selectInvert: 'Обръщане',
        },
        Modal: {
            okText: 'Добре',
            cancelText: 'Отказ',
            justOkText: 'Добре',
        },
        Popconfirm: {
            okText: 'Добре',
            cancelText: 'Отказ',
        },
        Transfer: {
            notFoundContent: 'Няма намерени',
            searchPlaceholder: 'Търсене',
            itemUnit: 'избор',
            itemsUnit: 'избори',
        },
        Select: {
            notFoundContent: 'Няма намерени',
        },
        Upload: {
            uploading: 'Качване...',
            removeFile: 'Премахване',
            uploadError: 'Грешка при качването',
            previewFile: 'Преглед',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$3 = {
        today: 'Avui',
        now: 'Ara',
        backToToday: 'Tornar a avui',
        ok: 'Acceptar',
        clear: 'Netejar',
        month: 'Mes',
        year: 'Any',
        timeSelect: 'Seleccionar hora',
        dateSelect: 'Seleccionar data',
        monthSelect: 'Escollir un mes',
        yearSelect: 'Escollir un any',
        decadeSelect: 'Escollir una dècada',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Mes anterior (PageUp)',
        nextMonth: 'Mes següent (PageDown)',
        previousYear: 'Any anterior (Control + left)',
        nextYear: 'Mes següent (Control + right)',
        previousDecade: 'Dècada anterior',
        nextDecade: 'Dècada següent',
        previousCentury: 'Segle anterior',
        nextCentury: 'Segle següent',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$6 = {
        placeholder: 'Seleccionar hora',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$7 = {
        lang: __assign({ placeholder: 'Seleccionar data', rangePlaceholder: ['Data inicial', 'Data final'] }, CalendarLocale$3),
        timePickerLocale: __assign({}, locale$6),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$3 = {
        // Options.jsx
        items_per_page: '/ pàgina',
        jump_to: 'Anar a',
        jump_to_confirm: 'Confirma',
        page: '',
        // Pagination.jsx
        prev_page: 'Pàgina prèvia',
        next_page: 'Pàgina següent',
        prev_5: '5 pàgines prèvies',
        next_5: '5 pàgines següents',
        prev_3: '3 pàgines prèvies',
        next_3: '3 pàgines següents',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ca_ES = {
        locale: 'ca',
        Pagination: Pagination$3,
        DatePicker: locale$7,
        TimePicker: locale$6,
        Calendar: CalendarLocale$3,
        Table: {
            filterTitle: 'Filtrar Menu',
            filterConfirm: 'OK',
            filterReset: 'Restablir',
            emptyText: 'Sense dades',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Cancel·lar',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Cancel·lar',
        },
        Transfer: {
            notFoundContent: 'No trobat',
            searchPlaceholder: 'Cercar aquí',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'No trobat',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$4 = {
        today: 'Dnes',
        now: 'Nyní',
        backToToday: 'Zpět na dnešek',
        ok: 'Ok',
        clear: 'Vymazat',
        month: 'Měsíc',
        year: 'Rok',
        timeSelect: 'Vybrat čas',
        dateSelect: 'Vybrat datum',
        monthSelect: 'Vyberte měsíc',
        yearSelect: 'Vyberte rok',
        decadeSelect: 'Vyberte dekádu',
        yearFormat: 'YYYY',
        dateFormat: 'D.M.YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D.M.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Předchozí měsíc (PageUp)',
        nextMonth: 'Následující (PageDown)',
        previousYear: 'Předchozí rok (Control + left)',
        nextYear: 'Následující rok (Control + right)',
        previousDecade: 'Předchozí dekáda',
        nextDecade: 'Následující dekáda',
        previousCentury: 'Předchozí století',
        nextCentury: 'Následující století',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$8 = {
        placeholder: 'Vybrat čas',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$9 = {
        lang: __assign({ placeholder: 'Vybrat datum', rangePlaceholder: ['Od', 'Do'] }, CalendarLocale$4),
        timePickerLocale: __assign({}, locale$8),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$4 = {
        // Options.jsx
        items_per_page: '/ strana',
        jump_to: 'Přejít',
        jump_to_confirm: 'potvrdit',
        page: '',
        // Pagination.jsx
        prev_page: 'Předchozí strana',
        next_page: 'Následující strana',
        prev_5: 'Předchozích 5 stran',
        next_5: 'Následujících 5 stran',
        prev_3: 'Předchozí 3 strany',
        next_3: 'Následující 3 strany',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var cs_CZ = {
        locale: 'cs',
        Pagination: Pagination$4,
        DatePicker: locale$9,
        TimePicker: locale$8,
        Calendar: CalendarLocale$4,
        Table: {
            filterTitle: 'Filtr',
            filterConfirm: 'Potvrdit',
            filterReset: 'Obnovit',
            emptyText: 'Žádná data',
        },
        Modal: {
            okText: 'Ok',
            cancelText: 'Storno',
            justOkText: 'Ok',
        },
        Popconfirm: {
            okText: 'Ok',
            cancelText: 'Storno',
        },
        Transfer: {
            notFoundContent: 'Nenalezeno',
            searchPlaceholder: 'Vyhledávání',
            itemUnit: 'položka',
            itemsUnit: 'položek',
        },
        Select: {
            notFoundContent: 'Nenalezeno',
        },
        Upload: {
            uploading: 'Nahrávání...',
            removeFile: 'Odstranit soubor',
            uploadError: 'Chyba při nahrávání',
            previewFile: 'Zobrazit soubor',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$5 = {
        today: 'Heute',
        now: 'Jetzt',
        backToToday: 'Zurück zu Heute',
        ok: 'OK',
        clear: 'Zurücksetzen',
        month: 'Monat',
        year: 'Jahr',
        timeSelect: 'Zeit wählen',
        dateSelect: 'Datum wählen',
        monthSelect: 'Wähle einen Monat',
        yearSelect: 'Wähle ein Jahr',
        decadeSelect: 'Wähle ein Jahrzehnt',
        yearFormat: 'YYYY',
        dateFormat: 'D.M.YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D.M.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Vorheriger Monat (PageUp)',
        nextMonth: 'Nächster Monat (PageDown)',
        previousYear: 'Vorheriges Jahr (Ctrl + left)',
        nextYear: 'Nächstes Jahr (Ctrl + right)',
        previousDecade: 'Vorheriges Jahrzehnt',
        nextDecade: 'Nächstes Jahrzehnt',
        previousCentury: 'Vorheriges Jahrhundert',
        nextCentury: 'Nächstes Jahrhundert',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$a = {
        placeholder: 'Zeit auswählen',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$b = {
        lang: __assign({ placeholder: 'Datum auswählen', rangePlaceholder: ['Startdatum', 'Enddatum'] }, CalendarLocale$5),
        timePickerLocale: __assign({}, locale$a),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$5 = {
        // Options.jsx
        items_per_page: '/ Seite',
        jump_to: 'Gehe zu',
        jump_to_confirm: 'bestätigen',
        page: '',
        // Pagination.jsx
        prev_page: 'Vorherige Seite',
        next_page: 'Nächste Seite',
        prev_5: '5 Seiten zurück',
        next_5: '5 Seiten vor',
        prev_3: '3 Seiten zurück',
        next_3: '3 Seiten vor',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var de_DE = {
        locale: 'de',
        Pagination: Pagination$5,
        DatePicker: locale$b,
        TimePicker: locale$a,
        Calendar: CalendarLocale$5,
        Table: {
            filterTitle: 'Filter-Menü',
            filterConfirm: 'OK',
            filterReset: 'Zurücksetzen',
            emptyText: 'Keine Daten',
            selectAll: 'Selektiere Alle',
            selectInvert: 'Selektion Invertieren',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Abbrechen',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Abbrechen',
        },
        Transfer: {
            notFoundContent: 'Nicht gefunden',
            searchPlaceholder: 'Suchen',
            itemUnit: 'Eintrag',
            itemsUnit: 'Einträge',
        },
        Select: {
            notFoundContent: 'Nicht gefunden',
        },
        Upload: {
            uploading: 'Hochladen...',
            removeFile: 'Datei entfernen',
            uploadError: 'Fehler beim Hochladen',
            previewFile: 'Dateivorschau',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$6 = {
        today: 'Σήμερα',
        now: 'Τώρα',
        backToToday: 'Πίσω στη σημερινή μέρα',
        ok: 'Ok',
        clear: 'Καθαρισμός',
        month: 'Μήνας',
        year: 'Έτος',
        timeSelect: 'Επιλογή ώρας',
        dateSelect: 'Επιλογή ημερομηνίας',
        monthSelect: 'Επιλογή μήνα',
        yearSelect: 'Επιλογή έτους',
        decadeSelect: 'Επιλογή δεκαετίας',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Προηγούμενος μήνας (PageUp)',
        nextMonth: 'Επόμενος μήνας (PageDown)',
        previousYear: 'Προηγούμενο έτος (Control + αριστερά)',
        nextYear: 'Επόμενο έτος (Control + δεξιά)',
        previousDecade: 'Προηγούμενη δεκαετία',
        nextDecade: 'Επόμενη δεκαετία',
        previousCentury: 'Προηγούμενος αιώνας',
        nextCentury: 'Επόμενος αιώνας',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$c = {
        placeholder: 'Επιλέξτε ώρα',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$d = {
        lang: __assign({ placeholder: 'Επιλέξτε ημερομηνία', rangePlaceholder: ['Αρχική ημερομηνία', 'Τελική ημερομηνία'] }, CalendarLocale$6),
        timePickerLocale: __assign({}, locale$c),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$6 = {
        // Options.jsx
        items_per_page: '/ σελίδα',
        jump_to: 'Μετάβαση',
        jump_to_confirm: 'επιβεβαιώνω',
        page: '',
        // Pagination.jsx
        prev_page: 'Προηγούμενη Σελίδα',
        next_page: 'Επόμενη Σελίδα',
        prev_5: 'Προηγούμενες 5 Σελίδες',
        next_5: 'Επόμενες 5 σελίδες',
        prev_3: 'Προηγούμενες 3 Σελίδες',
        next_3: 'Επόμενες 3 Σελίδες',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var el_GR = {
        locale: 'el',
        Pagination: Pagination$6,
        DatePicker: locale$d,
        TimePicker: locale$c,
        Calendar: CalendarLocale$6,
        Table: {
            filterTitle: 'Μενού φίλτρων',
            filterConfirm: 'ΟΚ',
            filterReset: 'Επαναφορά',
            emptyText: 'Δεν υπάρχουν δεδομένα',
            selectAll: 'Επιλογή τρέχουσας σελίδας',
            selectInvert: 'Αντιστροφή τρέχουσας σελίδας',
        },
        Modal: {
            okText: 'ΟΚ',
            cancelText: 'Άκυρο',
            justOkText: 'ΟΚ',
        },
        Popconfirm: {
            okText: 'ΟΚ',
            cancelText: 'Άκυρο',
        },
        Transfer: {
            notFoundContent: 'Δεν βρέθηκε',
            searchPlaceholder: 'Αναζήτηση',
            itemUnit: 'αντικείμενο',
            itemsUnit: 'αντικείμενα',
        },
        Select: {
            notFoundContent: 'Δεν βρέθηκε',
        },
        Upload: {
            uploading: 'Μεταφόρτωση...',
            removeFile: 'Αφαίρεση αρχείου',
            uploadError: 'Σφάλμα μεταφόρτωσης',
            previewFile: 'Προεπισκόπηση αρχείου',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$7 = {
        today: 'Today',
        now: 'Now',
        backToToday: 'Back to today',
        ok: 'Ok',
        clear: 'Clear',
        month: 'Month',
        year: 'Year',
        timeSelect: 'Select time',
        dateSelect: 'Select date',
        monthSelect: 'Choose a month',
        yearSelect: 'Choose a year',
        decadeSelect: 'Choose a decade',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Previous month (PageUp)',
        nextMonth: 'Next month (PageDown)',
        previousYear: 'Last year (Control + left)',
        nextYear: 'Next year (Control + right)',
        previousDecade: 'Last decade',
        nextDecade: 'Next decade',
        previousCentury: 'Last century',
        nextCentury: 'Next century',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$e = {
        placeholder: 'Select time',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$f = {
        lang: __assign({ placeholder: 'Select date', rangePlaceholder: ['Start date', 'End date'] }, CalendarLocale$7),
        timePickerLocale: __assign({}, locale$e),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$7 = {
        // Options.jsx
        items_per_page: '/ page',
        jump_to: 'Goto',
        jump_to_confirm: 'confirm',
        page: '',
        // Pagination.jsx
        prev_page: 'Previous Page',
        next_page: 'Next Page',
        prev_5: 'Previous 5 Pages',
        next_5: 'Next 5 Pages',
        prev_3: 'Previous 3 Pages',
        next_3: 'Next 3 Pages',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var en_GB = {
        locale: 'en-gb',
        Pagination: Pagination$7,
        DatePicker: locale$f,
        TimePicker: locale$e,
        Calendar: CalendarLocale$7,
        Table: {
            filterTitle: 'Filter menu',
            filterConfirm: 'OK',
            filterReset: 'Reset',
            emptyText: 'No data',
            selectAll: 'Select current page',
            selectInvert: 'Invert current page',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Cancel',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Cancel',
        },
        Transfer: {
            notFoundContent: 'Not Found',
            searchPlaceholder: 'Search here',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Not Found',
        },
        Upload: {
            uploading: 'Uploading...',
            removeFile: 'Remove file',
            uploadError: 'Upload error',
            previewFile: 'Preview file',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$8 = {
        today: 'Today',
        now: 'Now',
        backToToday: 'Back to today',
        ok: 'Ok',
        clear: 'Clear',
        month: 'Month',
        year: 'Year',
        timeSelect: 'Select time',
        dateSelect: 'Select date',
        monthSelect: 'Choose a month',
        yearSelect: 'Choose a year',
        decadeSelect: 'Choose a decade',
        yearFormat: 'YYYY',
        dateFormat: 'M/D/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'M/D/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Previous month (PageUp)',
        nextMonth: 'Next month (PageDown)',
        previousYear: 'Last year (Control + left)',
        nextYear: 'Next year (Control + right)',
        previousDecade: 'Last decade',
        nextDecade: 'Next decade',
        previousCentury: 'Last century',
        nextCentury: 'Next century',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$g = {
        placeholder: 'Select time',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$h = {
        lang: __assign({ placeholder: 'Select date', rangePlaceholder: ['Start date', 'End date'] }, CalendarLocale$8),
        timePickerLocale: __assign({}, locale$g),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$8 = {
        // Options.jsx
        items_per_page: '/ page',
        jump_to: 'Goto',
        jump_to_confirm: 'confirm',
        page: '',
        // Pagination.jsx
        prev_page: 'Previous Page',
        next_page: 'Next Page',
        prev_5: 'Previous 5 Pages',
        next_5: 'Next 5 Pages',
        prev_3: 'Previous 3 Pages',
        next_3: 'Next 3 Pages',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var en_US = {
        locale: 'en',
        Pagination: Pagination$8,
        DatePicker: locale$h,
        TimePicker: locale$g,
        Calendar: CalendarLocale$8,
        Table: {
            filterTitle: 'Filter menu',
            filterConfirm: 'OK',
            filterReset: 'Reset',
            emptyText: 'No data',
            selectAll: 'Select current page',
            selectInvert: 'Invert current page',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Cancel',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Cancel',
        },
        Transfer: {
            titles: ['', ''],
            notFoundContent: 'Not Found',
            searchPlaceholder: 'Search here',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Not Found',
        },
        Upload: {
            uploading: 'Uploading...',
            removeFile: 'Remove file',
            uploadError: 'Upload error',
            previewFile: 'Preview file',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$9 = {
        today: 'Hoy',
        now: 'Ahora',
        backToToday: 'Volver a hoy',
        ok: 'Aceptar',
        clear: 'Limpiar',
        month: 'Mes',
        year: 'Año',
        timeSelect: 'Seleccionar hora',
        dateSelect: 'Seleccionar fecha',
        monthSelect: 'Elegir un mes',
        yearSelect: 'Elegir un año',
        decadeSelect: 'Elegir una década',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Mes anterior (PageUp)',
        nextMonth: 'Mes siguiente (PageDown)',
        previousYear: 'Año anterior (Control + left)',
        nextYear: 'Año siguiente (Control + right)',
        previousDecade: 'Década anterior',
        nextDecade: 'Década siguiente',
        previousCentury: 'Siglo anterior',
        nextCentury: 'Siglo siguiente',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$i = {
        placeholder: 'Seleccionar hora',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$j = {
        lang: __assign({ placeholder: 'Seleccionar fecha', rangePlaceholder: ['Fecha inicial', 'Fecha final'] }, CalendarLocale$9),
        timePickerLocale: __assign({}, locale$i),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$9 = {
        // Options.jsx
        items_per_page: '/ página',
        jump_to: 'Ir a',
        jump_to_confirm: 'confirmar',
        page: '',
        // Pagination.jsx
        prev_page: 'Página anterior',
        next_page: 'Página siguiente',
        prev_5: '5 páginas previas',
        next_5: '5 páginas siguientes',
        prev_3: '3 páginas previas',
        next_3: '3 páginas siguientes',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var es_ES = {
        locale: 'es',
        Pagination: Pagination$9,
        DatePicker: locale$j,
        TimePicker: locale$i,
        Calendar: CalendarLocale$9,
        Table: {
            filterTitle: 'Filtrar menú',
            filterConfirm: 'Aceptar',
            filterReset: 'Reiniciar',
            emptyText: 'No hay datos',
            selectAll: 'Seleccionar todo',
            selectInvert: 'Invertir selección',
        },
        Modal: {
            okText: 'Aceptar',
            cancelText: 'Cancelar',
            justOkText: 'Aceptar',
        },
        Popconfirm: {
            okText: 'Aceptar',
            cancelText: 'Cancelar',
        },
        Transfer: {
            notFoundContent: 'No encontrado',
            searchPlaceholder: 'Buscar aquí',
            itemUnit: 'elemento',
            itemsUnit: 'elementos',
        },
        Select: {
            notFoundContent: 'No encontrado',
        },
        Upload: {
            uploading: 'Subiendo...',
            removeFile: 'Eliminar archivo',
            uploadError: 'Error al subir el archivo',
            previewFile: 'Vista previa',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$a = {
        today: 'Täna',
        now: 'Praegu',
        backToToday: 'Tagasi tänase juurde',
        ok: 'Ok',
        clear: 'Tühista',
        month: 'Kuu',
        year: 'Aasta',
        timeSelect: 'Vali aeg',
        dateSelect: 'Vali kuupäev',
        monthSelect: 'Vali kuu',
        yearSelect: 'Vali aasta',
        decadeSelect: 'Vali dekaad',
        yearFormat: 'YYYY',
        dateFormat: 'D.M.YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D.M.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Eelmine kuu (PageUp)',
        nextMonth: 'Järgmine kuu (PageDown)',
        previousYear: 'Eelmine aasta (Control + left)',
        nextYear: 'Järgmine aasta (Control + right)',
        previousDecade: 'Eelmine dekaad',
        nextDecade: 'Järgmine dekaad',
        previousCentury: 'Eelmine sajand',
        nextCentury: 'Järgmine sajand',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$k = {
        placeholder: 'Vali aeg',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$l = {
        lang: __assign({ placeholder: 'Vali kuupäev', rangePlaceholder: ['Algus kuupäev', 'Lõpu kuupäev'] }, CalendarLocale$a),
        timePickerLocale: __assign({}, locale$k),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$a = {
        // Options.jsx
        items_per_page: '/ leheküljel',
        jump_to: 'Hüppa',
        jump_to_confirm: 'Kinnitage',
        page: '',
        // Pagination.jsx
        prev_page: 'Eelmine leht',
        next_page: 'Järgmine leht',
        prev_5: 'Eelmised 5 lehekülge',
        next_5: 'Järgmised 5 lehekülge',
        prev_3: 'Eelmised 3 lehekülge',
        next_3: 'Järgmised 3 lehekülge',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var et_EE = {
        locale: 'et',
        Pagination: Pagination$a,
        DatePicker: locale$l,
        TimePicker: locale$k,
        Calendar: CalendarLocale$a,
        Table: {
            filterTitle: 'Filtri menüü',
            filterConfirm: 'OK',
            filterReset: 'Nulli',
            emptyText: 'Andmed puuduvad',
            selectAll: 'Vali kõik',
            selectInvert: 'Inverteeri valik',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Tühista',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Tühista',
        },
        Transfer: {
            notFoundContent: 'Ei leitud',
            searchPlaceholder: 'Otsi siit',
            itemUnit: 'kogus',
            itemsUnit: 'kogus',
        },
        Select: {
            notFoundContent: 'Ei leitud',
        },
        Upload: {
            uploading: 'Üleslaadimine...',
            removeFile: 'Eemalda fail',
            uploadError: 'Üleslaadimise tõrge',
            previewFile: 'Faili eelvaade',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$b = {
        today: 'امروز',
        now: 'اکنون',
        backToToday: 'بازگشت به روز',
        ok: 'باشه',
        clear: 'پاک کردن',
        month: 'ماه',
        year: 'سال',
        timeSelect: 'انتخاب زمان',
        dateSelect: 'انتخاب تاریخ',
        monthSelect: 'یک ماه را انتخاب کنید',
        yearSelect: 'یک سال را انتخاب کنید',
        decadeSelect: 'یک دهه را انتخاب کنید',
        yearFormat: 'YYYY',
        dateFormat: 'M/D/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'M/D/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'ماه قبل (PageUp)',
        nextMonth: 'ماه بعد (PageDown)',
        previousYear: 'سال قبل (Control + left)',
        nextYear: 'سال بعد (Control + right)',
        previousDecade: 'دهه قبل',
        nextDecade: 'دهه بعد',
        previousCentury: 'قرن قبل',
        nextCentury: 'قرن بعد',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$m = {
        placeholder: 'انتخاب زمان',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$n = {
        lang: __assign({ placeholder: 'انتخاب تاریخ', rangePlaceholder: ['تاریخ شروع', 'تاریخ پایان'] }, CalendarLocale$b),
        timePickerLocale: __assign({}, locale$m),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$b = {
        // Options.jsx
        items_per_page: '/ صفحه',
        jump_to: 'برو به',
        jump_to_confirm: 'تایید',
        page: '',
        // Pagination.jsx
        prev_page: 'صفحه قبلی',
        next_page: 'صفحه بعدی',
        prev_5: '۵ صفحه قبلی',
        next_5: '۵ صفحه بعدی',
        prev_3: '۳ صفحه قبلی',
        next_3: '۳ صفحه بعدی',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var fa_IR = {
        locale: 'fa',
        Pagination: Pagination$b,
        DatePicker: locale$n,
        TimePicker: locale$m,
        Calendar: CalendarLocale$b,
        Table: {
            filterTitle: 'منوی فیلتر',
            filterConfirm: 'تایید',
            filterReset: 'پاک کردن',
            emptyText: 'داده‌ای موجود نیست',
            selectAll: 'انتخاب صفحه‌ی کنونی',
            selectInvert: 'معکوس کردن انتخاب‌ها در صفحه ی کنونی',
        },
        Modal: {
            okText: 'تایید',
            cancelText: 'لغو',
            justOkText: 'تایید',
        },
        Popconfirm: {
            okText: 'تایید',
            cancelText: 'لغو',
        },
        Transfer: {
            notFoundContent: 'داده‌ای موجود نیست',
            searchPlaceholder: 'جستجو',
            itemUnit: '',
            itemsUnit: '',
        },
        Select: {
            notFoundContent: 'داده‌ای موجود نیست',
        },
        Upload: {
            uploading: 'در حال آپلود...',
            removeFile: 'حذف فایل',
            uploadError: 'خطا در آپلود',
            previewFile: 'مشاهده‌ی فایل',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$c = {
        today: 'Tänään',
        now: 'Nyt',
        backToToday: 'Tämä päivä',
        ok: 'Ok',
        clear: 'Tyhjennä',
        month: 'Kuukausi',
        year: 'Vuosi',
        timeSelect: 'Valise aika',
        dateSelect: 'Valitse päivä',
        monthSelect: 'Valitse kuukausi',
        yearSelect: 'Valitse vuosi',
        decadeSelect: 'Valitse vuosikymmen',
        yearFormat: 'YYYY',
        dateFormat: 'D.M.YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D.M.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Edellinen kuukausi (PageUp)',
        nextMonth: 'Seuraava kuukausi (PageDown)',
        previousYear: 'Edellinen vuosi (Control + left)',
        nextYear: 'Seuraava vuosi (Control + right)',
        previousDecade: 'Edellinen vuosikymmen',
        nextDecade: 'Seuraava vuosikymmen',
        previousCentury: 'Edellinen vuosisata',
        nextCentury: 'Seuraava vuosisata',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$o = {
        placeholder: 'Valitse aika',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$p = {
        lang: __assign({ placeholder: 'Valitse päivä', rangePlaceholder: ['Alku päivä', 'Loppu päivä'] }, CalendarLocale$c),
        timePickerLocale: __assign({}, locale$o),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$c = {
        // Options.jsx
        items_per_page: '/ sivu',
        jump_to: 'Mene',
        jump_to_confirm: 'Potvrdite',
        page: '',
        // Pagination.jsx
        prev_page: 'Edellinen sivu',
        next_page: 'Seuraava sivu',
        prev_5: 'Edelliset 5 sivua',
        next_5: 'Seuraavat 5 sivua',
        prev_3: 'Edelliset 3 sivua',
        next_3: 'Seuraavat 3 sivua',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var fi_FI = {
        locale: 'fi',
        Pagination: Pagination$c,
        DatePicker: locale$p,
        TimePicker: locale$o,
        Calendar: CalendarLocale$c,
        Table: {
            filterTitle: 'Suodatus valikko',
            filterConfirm: 'OK',
            filterReset: 'Tyhjennä',
            emptyText: 'Ei kohteita',
            selectAll: 'Valitse kaikki',
            selectInvert: 'Valitse päinvastoin',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Peruuta',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Peruuta',
        },
        Transfer: {
            notFoundContent: 'Ei löytynyt',
            searchPlaceholder: 'Etsi täältä',
            itemUnit: 'kohde',
            itemsUnit: 'kohdetta',
        },
        Select: {
            notFoundContent: 'Ei löytynyt',
        },
        Upload: {
            uploading: 'Lähetetään...',
            removeFile: 'Poista tiedosto',
            uploadError: 'Virhe lähetyksessä',
            previewFile: 'Esikatsele tiedostoa',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$d = {
        today: 'Aujourd\'hui',
        now: 'Maintenant',
        backToToday: 'Aujourd\'hui',
        ok: 'Ok',
        clear: 'Rétablir',
        month: 'Mois',
        year: 'Année',
        timeSelect: 'Sélectionner l\'heure',
        dateSelect: 'Sélectionner l\'heure',
        monthSelect: 'Choisissez un mois',
        yearSelect: 'Choisissez une année',
        decadeSelect: 'Choisissez une décennie',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Mois précédent (PageUp)',
        nextMonth: 'Mois suivant (PageDown)',
        previousYear: 'Année précédente (Ctrl + gauche)',
        nextYear: 'Année prochaine (Ctrl + droite)',
        previousDecade: 'Décennie précédente',
        nextDecade: 'Décennie suivante',
        previousCentury: 'Siècle précédent',
        nextCentury: 'Siècle suivant',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$q = {
        placeholder: 'Sélectionner l\'heure',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$r = {
        lang: __assign({ placeholder: 'Sélectionner une date', rangePlaceholder: ['Date de début', 'Date de fin'] }, CalendarLocale$d),
        timePickerLocale: __assign({}, locale$q),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$d = {
        // Options.jsx
        items_per_page: '/ page',
        jump_to: 'Aller à',
        jump_to_confirm: 'confirmer',
        page: '',
        // Pagination.jsx
        prev_page: 'Page précédente',
        next_page: 'Page suivante',
        prev_5: '5 Pages précédentes',
        next_5: '5 Pages suivantes',
        prev_3: '3 Pages précédentes',
        next_3: '3 Pages suivantes',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var fr_BE = {
        locale: 'fr',
        Pagination: Pagination$d,
        DatePicker: locale$r,
        TimePicker: locale$q,
        Calendar: CalendarLocale$d,
        Table: {
            filterTitle: 'Filtrer',
            filterConfirm: 'OK',
            filterReset: 'Réinitialiser',
            emptyText: 'Aucune donnée',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Annuler',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Annuler',
        },
        Transfer: {
            notFoundContent: 'Pas de résultat',
            searchPlaceholder: 'Recherche',
            itemUnit: 'élément',
            itemsUnit: 'éléments',
        },
        Select: {
            notFoundContent: 'Pas de résultat',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$e = {
        today: 'Aujourd\'hui',
        now: 'Maintenant',
        backToToday: 'Aujourd\'hui',
        ok: 'Ok',
        clear: 'Rétablir',
        month: 'Mois',
        year: 'Année',
        timeSelect: 'Sélectionner l\'heure',
        dateSelect: 'Sélectionner l\'heure',
        monthSelect: 'Choisissez un mois',
        yearSelect: 'Choisissez une année',
        decadeSelect: 'Choisissez une décennie',
        yearFormat: 'YYYY',
        dateFormat: 'DD/MM/YYYY',
        dayFormat: 'DD',
        dateTimeFormat: 'DD/MM/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Mois précédent (PageUp)',
        nextMonth: 'Mois suivant (PageDown)',
        previousYear: 'Année précédente (Ctrl + gauche)',
        nextYear: 'Année prochaine (Ctrl + droite)',
        previousDecade: 'Décennie précédente',
        nextDecade: 'Décennie suivante',
        previousCentury: 'Siècle précédent',
        nextCentury: 'Siècle suivant',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$s = {
        placeholder: 'Sélectionner l\'heure',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$t = {
        lang: __assign({ placeholder: 'Sélectionner une date', rangePlaceholder: ['Date de début', 'Date de fin'] }, CalendarLocale$e),
        timePickerLocale: __assign({}, locale$s),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$e = {
        // Options.jsx
        items_per_page: '/ page',
        jump_to: 'Aller à',
        jump_to_confirm: 'confirmer',
        page: '',
        // Pagination.jsx
        prev_page: 'Page précédente',
        next_page: 'Page suivante',
        prev_5: '5 Pages précédentes',
        next_5: '5 Pages suivantes',
        prev_3: '3 Pages précédentes',
        next_3: '3 Pages suivantes',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var fr_FR = {
        locale: 'fr',
        Pagination: Pagination$e,
        DatePicker: locale$t,
        TimePicker: locale$s,
        Calendar: CalendarLocale$e,
        Table: {
            filterTitle: 'Filtrer',
            filterConfirm: 'OK',
            filterReset: 'Réinitialiser',
            emptyText: 'Aucune donnée',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Annuler',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Annuler',
        },
        Transfer: {
            notFoundContent: 'Pas de résultat',
            searchPlaceholder: 'Recherche',
            itemUnit: 'élément',
            itemsUnit: 'éléments',
        },
        Select: {
            notFoundContent: 'Pas de résultat',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$f = {
        today: 'Í dag',
        now: 'Núna',
        backToToday: 'Til baka til dagsins í dag',
        ok: 'Í lagi',
        clear: 'Hreinsa',
        month: 'Mánuður',
        year: 'Ár',
        timeSelect: 'Velja tíma',
        dateSelect: 'Velja dag',
        monthSelect: 'Velja mánuð',
        yearSelect: 'Velja ár',
        decadeSelect: 'Velja áratug',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Fyrri mánuður (PageUp)',
        nextMonth: 'Næsti mánuður (PageDown)',
        previousYear: 'Fyrra ár (Control + left)',
        nextYear: 'Næsta ár (Control + right)',
        previousDecade: 'Fyrri áratugur',
        nextDecade: 'Næsti áratugur',
        previousCentury: 'Fyrri öld',
        nextCentury: 'Næsta öld',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$u = {
        placeholder: 'Velja tíma',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$v = {
        lang: __assign({ placeholder: 'Veldu dag', rangePlaceholder: ['Upphafsdagur', 'Lokadagur'] }, CalendarLocale$f),
        timePickerLocale: __assign({}, locale$u),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$f = {
        // Options.jsx
        items_per_page: '/ síðu',
        jump_to: 'Síða',
        jump_to_confirm: 'staðfest',
        page: '',
        // Pagination.jsx
        prev_page: 'Fyrri síða',
        next_page: 'Næsta síða',
        prev_5: 'Til baka 5 síður',
        next_5: 'Áfram 5 síður',
        prev_3: 'Til baka 3 síður',
        next_3: 'Áfram 3 síður',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var is_IS = {
        locale: 'is',
        Pagination: Pagination$f,
        DatePicker: locale$v,
        TimePicker: locale$u,
        Calendar: CalendarLocale$f,
        Table: {
            filterTitle: 'Afmarkanir',
            filterConfirm: 'Staðfesta',
            filterReset: 'Núllstilla',
            emptyText: 'Engin gögn',
            selectAll: 'Velja allt',
            selectInvert: 'Viðsnúa vali',
        },
        Modal: {
            okText: 'Áfram',
            cancelText: 'Hætta við',
            justOkText: 'Í lagi',
        },
        Popconfirm: {
            okText: 'Áfram',
            cancelText: 'Hætta við',
        },
        Transfer: {
            notFoundContent: 'Engar færslur',
            searchPlaceholder: 'Leita hér',
            itemUnit: 'færsla',
            itemsUnit: 'færslur',
        },
        Select: {
            notFoundContent: 'Ekkert finnst',
        },
        Upload: {
            uploading: 'Hleð upp...',
            removeFile: 'Fjarlægja skrá',
            uploadError: 'Villa við að hlaða upp',
            previewFile: 'Forskoða skrá',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$g = {
        today: 'Oggi',
        now: 'adesso',
        backToToday: 'Torna ad oggi',
        ok: 'Ok',
        clear: 'Chiaro',
        month: 'Mese',
        year: 'Anno',
        timeSelect: 'Seleziona il tempo',
        dateSelect: 'Select date',
        monthSelect: 'Seleziona la data',
        yearSelect: 'Scegli un anno',
        decadeSelect: 'Scegli un decennio',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Il mese scorso (PageUp)',
        nextMonth: 'Il prossimo mese (PageDown)',
        previousYear: 'L\'anno scorso (Control + sinistra)',
        nextYear: 'L\'anno prossimo (Control + destra)',
        previousDecade: 'Ultimo decennio',
        nextDecade: 'Prossimo decennio',
        previousCentury: 'Secolo precedente',
        nextCentury: 'Prossimo secolo',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$w = {
        placeholder: 'Selezionare il tempo',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$x = {
        lang: __assign({ placeholder: 'Selezionare la data', rangePlaceholder: ['Data d\'inizio', 'Data di fine'] }, CalendarLocale$g),
        timePickerLocale: __assign({}, locale$w),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$g = {
        // Options.jsx
        items_per_page: '/ pagina',
        jump_to: 'vai a',
        jump_to_confirm: 'Conferma',
        page: '',
        // Pagination.jsx
        prev_page: 'Pagina precedente',
        next_page: 'Pagina successiva',
        prev_5: 'Precedente 5 pagine',
        next_5: 'Prossime 5 pagine',
        prev_3: 'Precedente 3 pagine',
        next_3: 'Prossime 3 pagine',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var it_IT = {
        locale: 'it',
        Pagination: Pagination$g,
        DatePicker: locale$x,
        TimePicker: locale$w,
        Calendar: CalendarLocale$g,
        Table: {
            filterTitle: 'Menu Filtro',
            filterConfirm: 'OK',
            filterReset: 'Reset',
            emptyText: 'Nessun dato',
            selectAll: 'Seleziona pagina corrente',
            selectInvert: 'Selezionare Inverti',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Annulla',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Annulla',
        },
        Transfer: {
            notFoundContent: 'Non trovato',
            searchPlaceholder: 'Cerca qui',
            itemUnit: 'articolo',
            itemsUnit: 'elementi',
        },
        Select: {
            notFoundContent: 'Non trovato',
        },
        Upload: {
            uploading: 'Caricamento...',
            removeFile: 'Rimuovi il file',
            uploadError: 'Errore di caricamento',
            previewFile: 'Anteprima file',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$h = {
        today: '今日',
        now: '現在時刻',
        backToToday: '今日に戻る',
        ok: '決定',
        timeSelect: '時間を選択',
        dateSelect: '日時を選択',
        clear: 'クリア',
        month: '月',
        year: '年',
        previousMonth: '前月 (ページアップキー)',
        nextMonth: '翌月 (ページダウンキー)',
        monthSelect: '月を選択',
        yearSelect: '年を選択',
        decadeSelect: '年代を選択',
        yearFormat: 'YYYY年',
        dayFormat: 'D日',
        dateFormat: 'YYYY年M月D日',
        dateTimeFormat: 'YYYY年M月D日 HH時mm分ss秒',
        previousYear: '前年 (Controlを押しながら左キー)',
        nextYear: '翌年 (Controlを押しながら右キー)',
        previousDecade: '前の年代',
        nextDecade: '次の年代',
        previousCentury: '前の世紀',
        nextCentury: '次の世紀',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$y = {
        placeholder: '時刻を選択',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$z = {
        lang: __assign({ placeholder: '日付を選択', rangePlaceholder: ['開始日付', '終了日付'] }, CalendarLocale$h),
        timePickerLocale: __assign({}, locale$y),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$h = {
        // Options.jsx
        items_per_page: '/ ページ',
        jump_to: '移動',
        jump_to_confirm: '確認する',
        page: 'ページ',
        // Pagination.jsx
        prev_page: '前のページ',
        next_page: '次のページ',
        prev_5: '前 5ページ',
        next_5: '次 5ページ',
        prev_3: '前 3ページ',
        next_3: '次 3ページ',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ja_JP = {
        locale: 'ja',
        Pagination: Pagination$h,
        DatePicker: locale$z,
        TimePicker: locale$y,
        Calendar: CalendarLocale$h,
        Table: {
            filterTitle: 'メニューをフィルター',
            filterConfirm: 'OK',
            filterReset: 'リセット',
            emptyText: 'データがありません',
            selectAll: 'すべてを選択',
            selectInvert: '選択を反転',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'キャンセル',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'キャンセル',
        },
        Transfer: {
            notFoundContent: '結果はありません',
            searchPlaceholder: 'ここを検索',
            itemUnit: 'アイテム',
            itemsUnit: 'アイテム',
        },
        Select: {
            notFoundContent: '結果はありません',
        },
        Upload: {
            uploading: 'アップロード中...',
            removeFile: 'ファイルを削除',
            uploadError: 'アップロードエラー',
            previewFile: 'ファイルをプレビュー',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$i = {
        today: '오늘',
        now: '현재 시각',
        backToToday: '오늘로 돌아가기',
        ok: '확인',
        clear: '지우기',
        month: '월',
        year: '년',
        timeSelect: '시간 선택',
        dateSelect: '날짜 선택',
        monthSelect: '달 선택',
        yearSelect: '연 선택',
        decadeSelect: '연대 선택',
        yearFormat: 'YYYY년',
        dateFormat: 'YYYY-MM-DD',
        dayFormat: 'Do',
        dateTimeFormat: 'YYYY-MM-DD HH:mm:ss',
        monthBeforeYear: false,
        previousMonth: '이전 달 (PageUp)',
        nextMonth: '다음 달 (PageDown)',
        previousYear: '이전 해 (Control + left)',
        nextYear: '다음 해 (Control + right)',
        previousDecade: '이전 연대',
        nextDecade: '다음 연대',
        previousCentury: '이전 세기',
        nextCentury: '다음 세기',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$A = {
        placeholder: '날짜 선택',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$B = {
        lang: __assign({ placeholder: '날짜 선택', rangePlaceholder: ['시작일', '종료일'] }, CalendarLocale$i),
        timePickerLocale: __assign({}, locale$A),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$i = {
        // Options.jsx
        items_per_page: '/ 쪽',
        jump_to: '이동하기',
        jump_to_confirm: '확인하다',
        page: '',
        // Pagination.jsx
        prev_page: '이전 페이지',
        next_page: '다음 페이지',
        prev_5: '이전 5 페이지',
        next_5: '다음 5 페이지',
        prev_3: '이전 3 페이지',
        next_3: '다음 3 페이지',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ko_KR = {
        locale: 'ko',
        Pagination: Pagination$i,
        DatePicker: locale$B,
        TimePicker: locale$A,
        Calendar: CalendarLocale$i,
        Table: {
            filterTitle: '필터 메뉴',
            filterConfirm: '확인',
            filterReset: '초기화',
            emptyText: '데이터 없음',
            selectAll: '전체 선택',
            selectInvert: '선택 토글',
        },
        Modal: {
            okText: '확인',
            cancelText: '취소',
            justOkText: '확인',
        },
        Popconfirm: {
            okText: '확인',
            cancelText: '취소',
        },
        Transfer: {
            notFoundContent: '데이터 없음',
            searchPlaceholder: '여기에 검색하세요',
            itemUnit: '개',
            itemsUnit: '개',
        },
        Select: {
            notFoundContent: '데이터 없음',
        },
        Upload: {
            uploading: '업로드 중...',
            removeFile: '파일 삭제',
            uploadError: '업로드 실패',
            previewFile: '파일 미리보기',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$j = {
        today: 'I dag',
        now: 'Nå',
        backToToday: 'Gå til i dag',
        ok: 'Ok',
        clear: 'Annuller',
        month: 'Måned',
        year: 'År',
        timeSelect: 'Velg tidspunkt',
        dateSelect: 'Velg dato',
        monthSelect: 'Velg måned',
        yearSelect: 'Velg år',
        decadeSelect: 'Velg årti',
        yearFormat: 'YYYY',
        dateFormat: 'DD.MM.YYYY',
        dayFormat: 'DD',
        dateTimeFormat: 'DD.MM.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Forrige måned(PageUp)',
        nextMonth: 'Neste måned (PageDown)',
        previousYear: 'Forrige år (Control + left)',
        nextYear: 'Neste år (Control + right)',
        previousDecade: 'Forrige tiår',
        nextDecade: 'Neste tiår',
        previousCentury: 'Forrige århundre',
        nextCentury: 'Neste århundre',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$C = {
        placeholder: 'Velg tid',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$D = {
        lang: __assign({ placeholder: 'Velg dato', rangePlaceholder: ['Startdato', 'Sluttdato'] }, CalendarLocale$j),
        timePickerLocale: __assign({}, locale$C),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$j = {
        // Options.jsx
        items_per_page: '/ side',
        jump_to: 'Gå til side',
        page: '',
        // Pagination.jsx
        prev_page: 'Forrige side',
        next_page: 'Neste side',
        prev_5: '5 forrige',
        next_5: '5 neste',
        prev_3: '3 forrige',
        next_3: '3 neste',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var nb_NO = {
        locale: 'nb',
        DatePicker: locale$D,
        TimePicker: locale$C,
        Calendar: CalendarLocale$j,
        Pagination: Pagination$j,
        Table: {
            filterTitle: 'Filtermeny',
            filterConfirm: 'OK',
            filterReset: 'Nullstill',
            emptyText: 'Ingen data',
            selectAll: 'Velg alle',
            selectInvert: 'Inverter valg',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Avbryt',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Avbryt',
        },
        Transfer: {
            notFoundContent: 'Ingen treff',
            searchPlaceholder: 'Søk her',
            itemUnit: 'element',
            itemsUnit: 'elementer',
        },
        Select: {
            notFoundContent: 'Ingen treff',
        },
        Upload: {
            uploading: 'Laster opp...',
            removeFile: 'Fjern fil',
            uploadError: 'Feil ved opplastning',
            previewFile: 'Forhåndsvisning',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$k = {
        today: 'Vandaag',
        now: 'Nu',
        backToToday: 'Terug naar vandaag',
        ok: 'Ok',
        clear: 'Reset',
        month: 'Maand',
        year: 'Jaar',
        timeSelect: 'Selecteer tijd',
        dateSelect: 'Selecteer datum',
        monthSelect: 'Kies een maand',
        yearSelect: 'Kies een jaar',
        decadeSelect: 'Kies een decennium',
        yearFormat: 'YYYY',
        dateFormat: 'D-M-YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D-M-YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Vorige maand (PageUp)',
        nextMonth: 'Volgende maand (PageDown)',
        previousYear: 'Vorig jaar (Control + left)',
        nextYear: 'Volgend jaar (Control + right)',
        previousDecade: 'Vorig decennium',
        nextDecade: 'Volgend decennium',
        previousCentury: 'Vorige eeuw',
        nextCentury: 'Volgende eeuw',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$E = {
        placeholder: 'Selecteer tijd',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$F = {
        lang: __assign({ placeholder: 'Selecteer datum', rangePlaceholder: ['Begin datum', 'Eind datum'] }, CalendarLocale$k),
        timePickerLocale: __assign({}, locale$E),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$k = {
        // Options.jsx
        items_per_page: '/ pagina',
        jump_to: 'Ga naar',
        jump_to_confirm: 'bevestigen',
        page: '',
        // Pagination.jsx
        prev_page: 'Vorige pagina',
        next_page: 'Volgende pagina',
        prev_5: 'Vorige 5 pagina\'s',
        next_5: 'Volgende 5 pagina\'s',
        prev_3: 'Vorige 3 pagina\'s',
        next_3: 'Volgende 3 pagina\'s',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var nl_BE = {
        locale: 'nl-be',
        Pagination: Pagination$k,
        DatePicker: locale$F,
        TimePicker: locale$E,
        Calendar: CalendarLocale$k,
        Table: {
            filterTitle: 'FilterMenu',
            filterConfirm: 'OK',
            filterReset: 'Reset',
            emptyText: 'Geen gegevens',
            selectAll: 'Selecteer huidige pagina',
            selectInvert: 'Selecteer huidige pagina',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Annuleer',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Annuleer',
        },
        Transfer: {
            notFoundContent: 'Niet gevonden',
            searchPlaceholder: 'Zoek hier',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Niet gevonden',
        },
        Upload: {
            uploading: 'Uploaden...',
            removeFile: 'Bestand verwijderen',
            uploadError: 'Upload fout',
            previewFile: 'Preview bestand',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$l = {
        today: 'Vandaag',
        now: 'Nu',
        backToToday: 'Terug naar vandaag',
        ok: 'Ok',
        clear: 'Reset',
        month: 'Maand',
        year: 'Jaar',
        timeSelect: 'Selecteer tijd',
        dateSelect: 'Selecteer datum',
        monthSelect: 'Kies een maand',
        yearSelect: 'Kies een jaar',
        decadeSelect: 'Kies een decennium',
        yearFormat: 'YYYY',
        dateFormat: 'D-M-YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D-M-YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Vorige maand (PageUp)',
        nextMonth: 'Volgende maand (PageDown)',
        previousYear: 'Vorig jaar (Control + left)',
        nextYear: 'Volgend jaar (Control + right)',
        previousDecade: 'Vorig decennium',
        nextDecade: 'Volgend decennium',
        previousCentury: 'Vorige eeuw',
        nextCentury: 'Volgende eeuw',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$G = {
        placeholder: 'Selecteer tijd',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$H = {
        lang: __assign({ placeholder: 'Selecteer datum', rangePlaceholder: ['Begin datum', 'Eind datum'] }, CalendarLocale$l),
        timePickerLocale: __assign({}, locale$G),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$l = {
        // Options.jsx
        items_per_page: '/ pagina',
        jump_to: 'Ga naar',
        jump_to_confirm: 'bevestigen',
        page: '',
        // Pagination.jsx
        prev_page: 'Vorige pagina',
        next_page: 'Volgende pagina',
        prev_5: 'Vorige 5 pagina\'s',
        next_5: 'Volgende 5 pagina\'s',
        prev_3: 'Vorige 3 pagina\'s',
        next_3: 'Volgende 3 pagina\'s',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var nl_NL = {
        locale: 'nl',
        Pagination: Pagination$l,
        DatePicker: locale$H,
        TimePicker: locale$G,
        Calendar: CalendarLocale$l,
        Table: {
            filterTitle: 'Filteren',
            filterConfirm: 'OK',
            filterReset: 'Reset',
            emptyText: 'Geen gegevens',
            selectAll: 'Selecteer huidige pagina',
            selectInvert: 'Deselecteer huidige pagina',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Annuleren',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Annuleren',
        },
        Transfer: {
            notFoundContent: 'Niet gevonden',
            searchPlaceholder: 'Zoeken',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Niet gevonden',
        },
        Upload: {
            uploading: 'Uploaden...',
            removeFile: 'Verwijder bestand',
            uploadError: 'Fout tijdens uploaden',
            previewFile: 'Bekijk bestand',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$m = {
        today: 'Dzisiaj',
        now: 'Teraz',
        backToToday: 'Ustaw dzisiaj',
        ok: 'Ok',
        clear: 'Wyczyść',
        month: 'Miesiąc',
        year: 'Rok',
        timeSelect: 'Ustaw czas',
        dateSelect: 'Ustaw datę',
        monthSelect: 'Wybierz miesiąc',
        yearSelect: 'Wybierz rok',
        decadeSelect: 'Wybierz dekadę',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Poprzedni miesiąc (PageUp)',
        nextMonth: 'Następny miesiąc (PageDown)',
        previousYear: 'Ostatni rok (Ctrl + left)',
        nextYear: 'Następny rok (Ctrl + right)',
        previousDecade: 'Ostatnia dekada',
        nextDecade: 'Następna dekada',
        previousCentury: 'Ostatni wiek',
        nextCentury: 'Następny wiek',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$I = {
        placeholder: 'Wybierz godzinę',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$J = {
        lang: __assign({ placeholder: 'Wybierz datę', rangePlaceholder: ['Data początkowa', 'Data końcowa'] }, CalendarLocale$m),
        timePickerLocale: __assign({}, locale$I),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$m = {
        // Options.jsx
        items_per_page: '/ stronę',
        jump_to: 'Idź do',
        jump_to_confirm: 'potwierdzać',
        page: '',
        // Pagination.jsx
        prev_page: 'Poprzednia strona',
        next_page: 'Następna strona',
        prev_5: 'Poprzednie 5 stron',
        next_5: 'Następne 5 stron',
        prev_3: 'Poprzednie 3 strony',
        next_3: 'Następne 3 strony',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var pl_PL = {
        locale: 'pl',
        Pagination: Pagination$m,
        DatePicker: locale$J,
        TimePicker: locale$I,
        Calendar: CalendarLocale$m,
        Table: {
            filterTitle: 'Menu filtra',
            filterConfirm: 'OK',
            filterReset: 'Wyczyść',
            emptyText: 'Brak danych',
            selectAll: 'Zaznacz bieżącą stronę',
            selectInvert: 'Odwróć zaznaczenie',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Anuluj',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Anuluj',
        },
        Transfer: {
            notFoundContent: 'Nie znaleziono',
            searchPlaceholder: 'Szukaj',
            itemUnit: 'obiekt',
            itemsUnit: 'obiekty',
        },
        Select: {
            notFoundContent: 'Nie znaleziono',
        },
        Upload: {
            uploading: 'Wysyłanie...',
            removeFile: 'Usuń plik',
            uploadError: 'Błąd wysyłania',
            previewFile: 'Podejrzyj plik',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$n = {
        today: 'Hoje',
        now: 'Agora',
        backToToday: 'Voltar para hoje',
        ok: 'Ok',
        clear: 'Limpar',
        month: 'Mês',
        year: 'Ano',
        timeSelect: 'Selecionar tempo',
        dateSelect: 'Selecionar data',
        monthSelect: 'Escolher mês',
        yearSelect: 'Escolher ano',
        decadeSelect: 'Escolher década',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: false,
        previousMonth: 'Mês anterior (PageUp)',
        nextMonth: 'Próximo mês (PageDown)',
        previousYear: 'Ano anterior (Control + esquerda)',
        nextYear: 'Próximo ano (Control + direita)',
        previousDecade: 'Década anterior',
        nextDecade: 'Próxima década',
        previousCentury: 'Século anterior',
        nextCentury: 'Próximo século',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$K = {
        placeholder: 'Hora',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$L = {
        lang: __assign({ placeholder: 'Selecionar data', rangePlaceholder: ['Data de início', 'Data de fim'] }, CalendarLocale$n),
        timePickerLocale: __assign({}, locale$K),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$n = {
        // Options.jsx
        items_per_page: '/ páginas',
        jump_to: 'Vá até',
        jump_to_confirm: 'confirme',
        page: '',
        // Pagination.jsx
        prev_page: 'Página anterior',
        next_page: 'Próxima página',
        prev_5: '5 páginas anteriores',
        next_5: '5 próximas páginas',
        prev_3: '3 páginas anteriores',
        next_3: '3 próximas páginas',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var pt_BR = {
        locale: 'pt-br',
        Pagination: Pagination$n,
        DatePicker: locale$L,
        TimePicker: locale$K,
        Calendar: CalendarLocale$n,
        Table: {
            filterTitle: 'Filtro',
            filterConfirm: 'OK',
            filterReset: 'Resetar',
            emptyText: 'Não há dados',
            selectAll: 'Selecionar página atual',
            selectInvert: 'Inverter seleção',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Cancelar',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Cancelar',
        },
        Transfer: {
            notFoundContent: 'Não encontrado',
            searchPlaceholder: 'Procurar',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Não encontrado',
        },
        Upload: {
            uploading: 'Enviando...',
            removeFile: 'Remover arquivo',
            uploadError: 'Erro no envio',
            previewFile: 'Visualizar arquivo',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$o = {
        today: 'Hoje',
        now: 'Agora',
        backToToday: 'Hoje',
        ok: 'Ok',
        clear: 'Limpar',
        month: 'Mês',
        year: 'Ano',
        timeSelect: 'Selecionar hora',
        dateSelect: 'Selecionar data',
        monthSelect: 'Selecionar mês',
        yearSelect: 'Selecionar ano',
        decadeSelect: 'Selecionar década',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Mês anterior (PageUp)',
        nextMonth: 'Mês seguinte (PageDown)',
        previousYear: 'Ano anterior (Control + left)',
        nextYear: 'Ano seguinte (Control + right)',
        previousDecade: 'Década anterior',
        nextDecade: 'Década seguinte',
        previousCentury: 'Século anterior',
        nextCentury: 'Século seguinte',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$M = {
        placeholder: 'Hora',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$N = {
        lang: __assign({}, CalendarLocale$o, { placeholder: 'Data', rangePlaceholder: ['Data inicial', 'Data final'], today: 'Hoje', now: 'Agora', backToToday: 'Hoje', ok: 'Ok', clear: 'Limpar', month: 'Mês', year: 'Ano', timeSelect: 'Hora', dateSelect: 'Selecionar data', monthSelect: 'Selecionar mês', yearSelect: 'Selecionar ano', decadeSelect: 'Selecionar década', yearFormat: 'YYYY', dateFormat: 'D/M/YYYY', dayFormat: 'D', dateTimeFormat: 'D/M/YYYY HH:mm:ss', monthFormat: 'MMMM', monthBeforeYear: false, previousMonth: 'Mês anterior (PageUp)', nextMonth: 'Mês seguinte (PageDown)', previousYear: 'Ano anterior (Control + left)', nextYear: 'Ano seguinte (Control + right)', previousDecade: 'Última década', nextDecade: 'Próxima década', previousCentury: 'Último século', nextCentury: 'Próximo século' }),
        timePickerLocale: __assign({}, locale$M, { placeholder: 'Hora' }),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$o = {
        // Options.jsx
        items_per_page: '/ página',
        jump_to: 'Saltar',
        jump_to_confirm: 'confirmar',
        page: '',
        // Pagination.jsx
        prev_page: 'Página Anterior',
        next_page: 'Página Seguinte',
        prev_5: 'Recuar 5 Páginas',
        next_5: 'Avançar 5 Páginas',
        prev_3: 'Recuar 3 Páginas',
        next_3: 'Avançar 3 Páginas',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var pt_PT = {
        locale: 'pt',
        Pagination: Pagination$o,
        DatePicker: locale$N,
        TimePicker: locale$M,
        Calendar: CalendarLocale$o,
        Table: {
            filterTitle: 'Filtro',
            filterConfirm: 'Aplicar',
            filterReset: 'Reiniciar',
            emptyText: 'Sem resultados',
            selectAll: 'Selecionar página atual',
            selectInvert: 'Inverter seleção',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Cancelar',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Cancelar',
        },
        Transfer: {
            notFoundContent: 'Sem resultados',
            searchPlaceholder: 'Procurar...',
            itemUnit: 'item',
            itemsUnit: 'itens',
        },
        Select: {
            notFoundContent: 'Sem resultados',
        },
        Upload: {
            uploading: 'A carregar...',
            removeFile: 'Remover',
            uploadError: 'Erro ao carregar',
            previewFile: 'Pré-visualizar',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$p = {
        today: 'Сегодня',
        now: 'Сейчас',
        backToToday: 'Текущая дата',
        ok: 'Ok',
        clear: 'Очистить',
        month: 'Месяц',
        year: 'Год',
        timeSelect: 'Выбрать время',
        dateSelect: 'Выбрать дату',
        monthSelect: 'Выбрать месяц',
        yearSelect: 'Выбрать год',
        decadeSelect: 'Выбрать десятилетие',
        yearFormat: 'YYYY',
        dateFormat: 'D-M-YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D-M-YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Предыдущий месяц (PageUp)',
        nextMonth: 'Следующий месяц (PageDown)',
        previousYear: 'Предыдущий год (Control + left)',
        nextYear: 'Следующий год (Control + right)',
        previousDecade: 'Предыдущее десятилетие',
        nextDecade: 'Следущее десятилетие',
        previousCentury: 'Предыдущий век',
        nextCentury: 'Следующий век',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** *
     * Created by Andrey Gayvoronsky on 13/04/16.
      @type {?} */
    var locale$O = {
        placeholder: 'Выберите время',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$P = {
        lang: __assign({ placeholder: 'Выберите дату', rangePlaceholder: ['Начальная дата', 'Конечная дата'] }, CalendarLocale$p),
        timePickerLocale: __assign({}, locale$O),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$p = {
        // Options.jsx
        items_per_page: '/странице',
        jump_to: 'Перейти',
        jump_to_confirm: 'подтвердить',
        page: '',
        // Pagination.jsx
        prev_page: 'Назад',
        next_page: 'Вперед',
        prev_5: 'Предыдущие 5',
        next_5: 'Следующие 5',
        prev_3: 'Предыдущие 3',
        next_3: 'Следующие 3',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ru_RU = {
        locale: 'ru',
        Pagination: Pagination$p,
        DatePicker: locale$P,
        TimePicker: locale$O,
        Calendar: CalendarLocale$p,
        Table: {
            filterTitle: 'Фильтр',
            filterConfirm: 'OK',
            filterReset: 'Сбросить',
            emptyText: 'Нет данных',
            selectAll: 'Выбрать всё',
            selectInvert: 'Инвертировать выбор',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Отмена',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Отмена',
        },
        Transfer: {
            notFoundContent: 'Ничего не найдено',
            searchPlaceholder: 'Введите название для поиска',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Ничего не найдено',
        },
        Upload: {
            uploading: 'Закачиваю...',
            removeFile: 'Удалить файл',
            uploadError: 'Ошибка при закачке',
            previewFile: 'Предпросмотр файла',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$q = {
        today: 'Dnes',
        now: 'Teraz',
        backToToday: 'Späť na dnes',
        ok: 'Ok',
        clear: 'Vymazať',
        month: 'Mesiac',
        year: 'Rok',
        timeSelect: 'Vybrať čas',
        dateSelect: 'Vybrať dátum',
        monthSelect: 'Vybrať mesiac',
        yearSelect: 'Vybrať rok',
        decadeSelect: 'Vybrať dekádu',
        yearFormat: 'YYYY',
        dateFormat: 'D.M.YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D.M.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Predchádzajúci mesiac (PageUp)',
        nextMonth: 'Nasledujúci mesiac (PageDown)',
        previousYear: 'Predchádzajúci rok (Control + left)',
        nextYear: 'Nasledujúci rok (Control + right)',
        previousDecade: 'Predchádzajúca dekáda',
        nextDecade: 'Nasledujúca dekáda',
        previousCentury: 'Predchádzajúce storočie',
        nextCentury: 'Nasledujúce storočie',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$Q = {
        placeholder: 'Vybrať čas',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$R = {
        lang: __assign({ placeholder: 'Vybrať dátum', rangePlaceholder: ['Od', 'Do'] }, CalendarLocale$q),
        timePickerLocale: __assign({}, locale$Q),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$q = {
        // Options.jsx
        items_per_page: '/ strana',
        jump_to: 'Choď na',
        jump_to_confirm: 'potvrdit',
        page: '',
        // Pagination.jsx
        prev_page: 'Predchádzajúca strana',
        next_page: 'Nasledujúca strana',
        prev_5: 'Predchádzajúcich 5 strán',
        next_5: 'Nasledujúcich 5 strán',
        prev_3: 'Predchádzajúce 3 strany',
        next_3: 'Nasledujúce 3 strany',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var sk_SK = {
        locale: 'sk',
        Pagination: Pagination$q,
        DatePicker: locale$R,
        TimePicker: locale$Q,
        Calendar: CalendarLocale$q,
        Table: {
            filterTitle: 'Filter',
            filterConfirm: 'OK',
            filterReset: 'Obnoviť',
            emptyText: 'Žiadne dáta',
            selectAll: 'Vybrať všetko',
            selectInvert: 'Vybrať opačné',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Zrušiť',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Zrušiť',
        },
        Transfer: {
            notFoundContent: 'Nenájdené',
            searchPlaceholder: 'Vyhľadávanie',
            itemUnit: 'položka',
            itemsUnit: 'položiek',
        },
        Select: {
            notFoundContent: 'Nenájdené',
        },
        Upload: {
            uploading: 'Nahrávanie...',
            removeFile: 'Odstrániť súbor',
            uploadError: 'Chyba pri nahrávaní',
            previewFile: 'Zobraziť súbor',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$r = {
        today: 'Danas',
        now: 'Sada',
        backToToday: 'Vrati se na danas',
        ok: 'U redu',
        clear: 'Obriši',
        month: 'Mesec',
        year: 'Godina',
        timeSelect: 'Izaberi vreme',
        dateSelect: 'Izaberi datum',
        monthSelect: 'Izaberi mesec',
        yearSelect: 'Izaberi godinu',
        decadeSelect: 'Izaberi deceniju',
        yearFormat: 'YYYY',
        dateFormat: 'DD.MM.YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'DD.MM.YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Prethodni mesec (PageUp)',
        nextMonth: 'Sledeći mesec (PageDown)',
        previousYear: 'Prethodna godina (Control + left)',
        nextYear: 'Sledeća godina (Control + right)',
        previousDecade: 'Prethodna decenija',
        nextDecade: 'Sledeća decenija',
        previousCentury: 'Prethodni vek',
        nextCentury: 'Sledeći vek',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$S = {
        placeholder: 'Izaberite vreme',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$T = {
        lang: __assign({ placeholder: 'Izaberite datum', rangePlaceholder: ['Početni datum', 'Krajnji datum'] }, CalendarLocale$r),
        timePickerLocale: __assign({}, locale$S),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$r = {
        // Options.jsx
        items_per_page: '/ strani',
        jump_to: 'Idi na',
        page: '',
        // Pagination.jsx
        prev_page: 'Prethodna strana',
        next_page: 'Sledeća strana',
        prev_5: 'Prethodnih 5 Strana',
        next_5: 'Sledećih 5 Strana',
        prev_3: 'Prethodnih 3 Strane',
        next_3: 'Sledećih 3 Strane',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var sr_RS = {
        locale: 'sr',
        Pagination: Pagination$r,
        DatePicker: locale$T,
        TimePicker: locale$S,
        Calendar: CalendarLocale$r,
        Table: {
            filterTitle: 'Filter',
            filterConfirm: 'Primeni filter',
            filterReset: 'Resetuj filter',
            emptyText: 'Nema podataka',
            selectAll: 'Obeleži sve na trenutnoj strani',
            selectInvert: 'Obrni selekciju na trenutnoj stranici',
        },
        Modal: {
            okText: 'U redu',
            cancelText: 'Otkaži',
            justOkText: 'U redu',
        },
        Popconfirm: {
            okText: 'U redu',
            cancelText: 'Otkaži',
        },
        Transfer: {
            notFoundContent: 'Nisu pronađeni rezultati pretrage',
            searchPlaceholder: 'Pretražite ovde',
            itemUnit: 'stavka',
            itemsUnit: 'stavki',
        },
        Select: {
            notFoundContent: 'Nije pronađeno',
        },
        Upload: {
            uploading: 'Slanje...',
            removeFile: 'Ukloni fajl',
            uploadError: 'Greška prilikom slanja',
            previewFile: 'Pogledaj fajl',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$s = {
        today: 'I dag',
        now: 'Nu',
        backToToday: 'Till idag',
        ok: 'Ok',
        clear: 'Avbryt',
        month: 'Månad',
        year: 'År',
        timeSelect: 'Välj tidpunkt',
        dateSelect: 'Välj datum',
        monthSelect: 'Välj månad',
        yearSelect: 'Välj år',
        decadeSelect: 'Välj årtionde',
        yearFormat: 'YYYY',
        dateFormat: 'YYYY-MM-DD',
        dayFormat: 'D',
        dateTimeFormat: 'YYYY-MM-DD H:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Förra månaden (PageUp)',
        nextMonth: 'Nästa månad (PageDown)',
        previousYear: 'Föreg år (Control + left)',
        nextYear: 'Nästa år (Control + right)',
        previousDecade: 'Föreg årtionde',
        nextDecade: 'Nästa årtionde',
        previousCentury: 'Föreg århundrade',
        nextCentury: 'Nästa århundrade',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$U = {
        placeholder: 'Välj tid',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$V = {
        lang: __assign({ placeholder: 'Välj datum', rangePlaceholder: ['Startdatum', 'Slutdatum'] }, CalendarLocale$s),
        timePickerLocale: __assign({}, locale$U),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$s = {
        // Options.jsx
        items_per_page: '/ sida',
        jump_to: 'Gå till',
        jump_to_confirm: 'bekräfta',
        page: '',
        // Pagination.jsx
        prev_page: 'Föreg sida',
        next_page: 'Nästa sida',
        prev_5: 'Föreg 5 sidor',
        next_5: 'Nästa 5 sidor',
        prev_3: 'Föreg 3 sidor',
        next_3: 'Nästa 3 sidor',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var sv_SE = {
        locale: 'sv',
        Pagination: Pagination$s,
        DatePicker: locale$V,
        TimePicker: locale$U,
        Calendar: CalendarLocale$s,
        Table: {
            filterTitle: 'Filtermeny',
            filterConfirm: 'OK',
            filterReset: 'Rensa',
            emptyText: 'Ingen information',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Avbryt',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Avbryt',
        },
        Transfer: {
            notFoundContent: 'Info saknas',
            searchPlaceholder: 'Sök',
            itemUnit: 'element',
            itemsUnit: 'element',
        },
        Select: {
            notFoundContent: 'Info saknas',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$t = {
        today: 'วันนี้',
        now: 'ตอนนี้',
        backToToday: 'กลับไปยังวันนี้',
        ok: 'ตกลง',
        clear: 'ลบล้าง',
        month: 'เดือน',
        year: 'ปี',
        timeSelect: 'เลือกเวลา',
        dateSelect: 'เลือกวัน',
        monthSelect: 'เลือกเดือน',
        yearSelect: 'เลือกปี',
        decadeSelect: 'เลือกทศวรรษ',
        yearFormat: 'YYYY',
        dateFormat: 'D/M/YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D/M/YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'เดือนก่อนหน้า (PageUp)',
        nextMonth: 'เดือนถัดไป (PageDown)',
        previousYear: 'ปีก่อนหน้า (Control + left)',
        nextYear: 'ปีถัดไป (Control + right)',
        previousDecade: 'ทศวรรษก่อนหน้า',
        nextDecade: 'ทศวรรษถัดไป',
        previousCentury: 'ศตวรรษก่อนหน้า',
        nextCentury: 'ศตวรรษถัดไป',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$W = {
        placeholder: 'เลือกเวลา',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$X = {
        lang: __assign({ placeholder: 'เลือกวันที่', rangePlaceholder: ['วันเริ่มต้น', 'วันสิ้นสุด'] }, CalendarLocale$t),
        timePickerLocale: __assign({}, locale$W)
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$t = {
        // Options.jsx
        items_per_page: '/ หน้า',
        jump_to: 'ไปยัง',
        jump_to_confirm: 'ยืนยัน',
        page: '',
        // Pagination.jsx
        prev_page: 'หน้าก่อนหน้า',
        next_page: 'หน้าถัดไป',
        prev_5: 'ย้อนกลับ 5 หน้า',
        next_5: 'ถัดไป 5 หน้า',
        prev_3: 'ย้อนกลับ 3 หน้า',
        next_3: 'ถัดไป 3 หน้า',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var th_TH = {
        locale: 'th',
        Pagination: Pagination$t,
        DatePicker: locale$X,
        TimePicker: locale$W,
        Calendar: CalendarLocale$t,
        Table: {
            filterTitle: 'ตัวกรอง',
            filterConfirm: 'ยืนยัน',
            filterReset: 'รีเซ็ต',
            emptyText: 'ไม่มีข้อมูล',
            selectAll: 'เลือกทั้งหมดในหน้านี้',
            selectInvert: 'เลือกสถานะตรงกันข้าม',
        },
        Modal: {
            okText: 'ตกลง',
            cancelText: 'ยกเลิก',
            justOkText: 'ตกลง',
        },
        Popconfirm: {
            okText: 'ตกลง',
            cancelText: 'ยกเลิก',
        },
        Transfer: {
            notFoundContent: 'ไม่พบข้อมูล',
            searchPlaceholder: 'ค้นหา',
            itemUnit: 'ชิ้น',
            itemsUnit: 'ชิ้น',
        },
        Select: {
            notFoundContent: 'ไม่พบข้อมูล',
        },
        Upload: {
            uploading: 'กำลังอัปโหลด...',
            removeFile: 'ลบไฟล์',
            uploadError: 'เกิดข้อผิดพลาดในการอัปโหลด',
            previewFile: 'ดูตัวอย่างไฟล์',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$Y = {
        placeholder: 'Zaman Seç',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$Z = {
        lang: __assign({ placeholder: 'Tarih Seç', rangePlaceholder: ['Başlangıç Tarihi', 'Bitiş Tarihi'] }, CalendarLocale$8),
        timePickerLocale: __assign({}, locale$Y),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var tr_TR = {
        locale: 'tr',
        Pagination: Pagination$8,
        DatePicker: locale$Z,
        TimePicker: locale$Y,
        Calendar: CalendarLocale$8,
        Table: {
            filterTitle: 'Menü Filtrele',
            filterConfirm: 'Tamam',
            filterReset: 'Sıfırla',
            emptyText: 'Veri Yok',
            selectAll: 'Hepsini Seç',
            selectInvert: 'Tersini Seç',
        },
        Modal: {
            okText: 'Tamam',
            cancelText: 'İptal',
            justOkText: 'Tamam',
        },
        Popconfirm: {
            okText: 'Tamam',
            cancelText: 'İptal',
        },
        Transfer: {
            notFoundContent: 'Bulunamadı',
            searchPlaceholder: 'Arama',
            itemUnit: 'Öğe',
            itemsUnit: 'Öğeler',
        },
        Select: {
            notFoundContent: 'Bulunamadı',
        },
        Upload: {
            uploading: 'Yükleniyor...',
            removeFile: "Dosyay\u0131 kald\u0131r",
            uploadError: 'Yükleme Hatası',
            previewFile: "Dosyay\u0131 \u00D6nizle",
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$u = {
        today: 'Сьогодні',
        now: 'Зараз',
        backToToday: 'Поточна дата',
        ok: 'Ok',
        clear: 'Очистити',
        month: 'Місяць',
        year: 'Рік',
        timeSelect: 'Обрати час',
        dateSelect: 'Обрати дату',
        monthSelect: 'Обрати місяць',
        yearSelect: 'Обрати рік',
        decadeSelect: 'Обрати десятиріччя',
        yearFormat: 'YYYY',
        dateFormat: 'D-M-YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D-M-YYYY HH:mm:ss',
        monthBeforeYear: true,
        previousMonth: 'Попередній місяць (PageUp)',
        nextMonth: 'Наступний місяць (PageDown)',
        previousYear: 'Попередній рік (Control + left)',
        nextYear: 'Наступний рік (Control + right)',
        previousDecade: 'Попереднє десятиріччя',
        nextDecade: 'Наступне десятиріччя',
        previousCentury: 'Попереднє століття',
        nextCentury: 'Наступне століття',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$_ = {
        placeholder: 'Оберіть час',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$10 = {
        lang: __assign({ placeholder: 'Оберіть дату', rangePlaceholder: ['Початкова дата', 'Кінцева дата'] }, CalendarLocale$u),
        timePickerLocale: __assign({}, locale$_),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$u = {
        // Options.jsx
        items_per_page: '/ сторінці',
        jump_to: 'Перейти',
        jump_to_confirm: 'підтвердити',
        page: '',
        // Pagination.jsx
        prev_page: 'Попередня сторінка',
        next_page: 'Наступна сторінка',
        prev_5: 'Попередні 5 сторінок',
        next_5: 'Наступні 5 сторінок',
        prev_3: 'Попередні 3 сторінки',
        next_3: 'Наступні 3 сторінки',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var uk_UA = {
        locale: 'uk',
        Pagination: Pagination$u,
        DatePicker: locale$10,
        TimePicker: locale$_,
        Calendar: CalendarLocale$u,
        Table: {
            filterTitle: 'Фільтрувати',
            filterConfirm: 'OK',
            filterReset: 'Скинути',
            emptyText: 'Даних немає',
            selectAll: 'Обрати всі',
            selectInvert: 'Інвертувати вибір',
        },
        Modal: {
            okText: 'Гаразд',
            cancelText: 'Скасувати',
            justOkText: 'Гаразд',
        },
        Popconfirm: {
            okText: 'Гаразд',
            cancelText: 'Скасувати',
        },
        Transfer: {
            notFoundContent: 'Нічого не знайдено',
            searchPlaceholder: 'Введіть текст для пошуку',
            itemUnit: 'item',
            itemsUnit: 'items',
        },
        Select: {
            notFoundContent: 'Нічого не знайдено',
        },
        Upload: {
            uploading: 'Завантаження ...',
            removeFile: 'Видалити файл',
            uploadError: 'Помилка завантаження',
            previewFile: 'Попередній перегляд файлу',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$11 = {
        lang: __assign({ placeholder: 'Chọn thời điểm', rangePlaceholder: ['Ngày bắt đầu', 'Ngày kết thúc'] }, CalendarLocale$8),
        timePickerLocale: __assign({}, locale$g),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$v = {
        // Options.jsx
        items_per_page: '/ trang',
        jump_to: 'Đến',
        jump_to_confirm: 'xác nhận',
        page: '',
        // Pagination.jsx
        prev_page: 'Trang Trước',
        next_page: 'Trang Kế',
        prev_5: 'Về 5 Trang Trước',
        next_5: 'Đến 5 Trang Kế',
        prev_3: 'Về 3 Trang Trước',
        next_3: 'Đến 3 Trang Kế',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$12 = {
        placeholder: 'Chọn thời gian',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var vi_VN = {
        locale: 'vi',
        Pagination: Pagination$v,
        DatePicker: locale$11,
        TimePicker: locale$12,
        Calendar: locale$11,
        Table: {
            filterTitle: 'Bộ ',
            filterConfirm: 'OK',
            filterReset: 'Tạo Lại',
            emptyText: 'Trống',
            selectAll: 'Chọn Tất Cả',
            selectInvert: 'Chọn Ngược Lại',
        },
        Modal: {
            okText: 'OK',
            cancelText: 'Huỷ',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: 'OK',
            cancelText: 'Huỷ',
        },
        Transfer: {
            notFoundContent: 'Không Tìm Thấy',
            searchPlaceholder: 'Tìm ở đây',
            itemUnit: 'mục',
            itemsUnit: 'mục',
        },
        Select: {
            notFoundContent: 'Không Tìm Thấy',
        },
        Upload: {
            uploading: 'Đang tải lên...',
            removeFile: 'Gỡ bỏ tập tin',
            uploadError: 'Lỗi tải lên',
            previewFile: 'Xem thử tập tin',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CalendarLocale$v = {
        today: '今天',
        now: '此刻',
        backToToday: '返回今天',
        ok: '確定',
        timeSelect: '選擇時間',
        dateSelect: '選擇日期',
        clear: '清除',
        month: '月',
        year: '年',
        previousMonth: '上個月 (翻頁上鍵)',
        nextMonth: '下個月 (翻頁下鍵)',
        monthSelect: '選擇月份',
        yearSelect: '選擇年份',
        decadeSelect: '選擇年代',
        yearFormat: 'YYYY年',
        dayFormat: 'D日',
        dateFormat: 'YYYY年M月D日',
        dateTimeFormat: 'YYYY年M月D日 HH時mm分ss秒',
        previousYear: '上一年 (Control鍵加左方向鍵)',
        nextYear: '下一年 (Control鍵加右方向鍵)',
        previousDecade: '上一年代',
        nextDecade: '下一年代',
        previousCentury: '上一世紀',
        nextCentury: '下一世紀',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$13 = {
        placeholder: '請選擇時間',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var locale$14 = {
        lang: __assign({ placeholder: '請選擇日期', rangePlaceholder: ['開始日期', '結束日期'] }, CalendarLocale$v),
        timePickerLocale: __assign({}, locale$13),
    };
    locale$14.lang.ok = '確 定';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Pagination$w = {
        // Options.jsx
        items_per_page: '條/頁',
        jump_to: '跳至',
        jump_to_confirm: '確定',
        page: '頁',
        // Pagination.jsx
        prev_page: '上一頁',
        next_page: '下一頁',
        prev_5: '向前 5 頁',
        next_5: '向後 5 頁',
        prev_3: '向前 3 頁',
        next_3: '向後 3 頁',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var zh_TW = {
        locale: 'zh-tw',
        Pagination: Pagination$w,
        DatePicker: locale$14,
        TimePicker: locale$13,
        Calendar: CalendarLocale$v,
        Table: {
            filterTitle: '篩選器',
            filterConfirm: '確 定',
            filterReset: '重 置',
            emptyText: '目前尚無資料',
            selectAll: '全部選取',
            selectInvert: '反向選取',
        },
        Modal: {
            okText: '確 定',
            cancelText: '取 消',
            justOkText: 'OK',
        },
        Popconfirm: {
            okText: '確 定',
            cancelText: '取 消',
        },
        Transfer: {
            notFoundContent: '查無此資料',
            searchPlaceholder: '搜尋資料',
            itemUnit: '項目',
            itemsUnit: '項目',
        },
        Select: {
            notFoundContent: '查無此資料',
        },
        Upload: {
            uploading: '正在上傳...',
            removeFile: '刪除檔案',
            uploadError: '上傳失敗',
            previewFile: '檔案預覽',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var VERSION = new i0.Version('0.0.0-PLACEHOLDER');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgZorroAntdModule = /** @class */ (function () {
        function NgZorroAntdModule() {
        }
        /**
         * @deprecated Use `NgZorroAntdModule` instead.
         */
        /**
         * @deprecated Use `NgZorroAntdModule` instead.
         * @return {?}
         */
        NgZorroAntdModule.forRoot = /**
         * @deprecated Use `NgZorroAntdModule` instead.
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgZorroAntdModule
                };
            };
        NgZorroAntdModule.decorators = [
            { type: i0.NgModule, args: [{
                        exports: [
                            NzButtonModule,
                            NzCalendarModule,
                            NzGridModule,
                            NzSwitchModule,
                            NzSelectModule,
                            NzMenuModule,
                            NzMentionModule,
                            NzAnchorModule,
                            NzAffixModule,
                            NzDropDownModule,
                            NzLayoutModule,
                            NzBreadCrumbModule,
                            NzPaginationModule,
                            NzStepsModule,
                            NzInputModule,
                            NzCheckboxModule,
                            NzInputNumberModule,
                            NzSliderModule,
                            NzRateModule,
                            NzBadgeModule,
                            NzRadioModule,
                            NzAlertModule,
                            NzSpinModule,
                            NzProgressModule,
                            NzTabsModule,
                            NzIconModule,
                            NzCardModule,
                            NzAvatarModule,
                            NzTimelineModule,
                            NzTransferModule,
                            NzCarouselModule,
                            NzCollapseModule,
                            NzTableModule,
                            NzDatePickerModule,
                            NzDividerModule,
                            NzDrawerModule,
                            NzFormModule,
                            NzListModule,
                            NzI18nModule,
                            NzUploadModule,
                            NzAutocompleteModule,
                            NzTagModule,
                            NzMessageModule,
                            NzNotificationModule,
                            NzPopoverModule,
                            NzToolTipModule,
                            NzPopconfirmModule,
                            NzModalModule,
                            NzBackTopModule,
                            NzCascaderModule,
                            NzTreeModule,
                            NzTreeSelectModule,
                            NzTimePickerModule,
                            NzWaveModule,
                            NzSkeletonModule
                        ]
                    },] }
        ];
        return NgZorroAntdModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.MAC_ENTER = keycodes.MAC_ENTER;
    exports.BACKSPACE = keycodes.BACKSPACE;
    exports.TAB = keycodes.TAB;
    exports.NUM_CENTER = keycodes.NUM_CENTER;
    exports.ENTER = keycodes.ENTER;
    exports.SHIFT = keycodes.SHIFT;
    exports.CONTROL = keycodes.CONTROL;
    exports.ALT = keycodes.ALT;
    exports.PAUSE = keycodes.PAUSE;
    exports.CAPS_LOCK = keycodes.CAPS_LOCK;
    exports.ESCAPE = keycodes.ESCAPE;
    exports.SPACE = keycodes.SPACE;
    exports.PAGE_UP = keycodes.PAGE_UP;
    exports.PAGE_DOWN = keycodes.PAGE_DOWN;
    exports.END = keycodes.END;
    exports.HOME = keycodes.HOME;
    exports.LEFT_ARROW = keycodes.LEFT_ARROW;
    exports.UP_ARROW = keycodes.UP_ARROW;
    exports.RIGHT_ARROW = keycodes.RIGHT_ARROW;
    exports.DOWN_ARROW = keycodes.DOWN_ARROW;
    exports.PLUS_SIGN = keycodes.PLUS_SIGN;
    exports.PRINT_SCREEN = keycodes.PRINT_SCREEN;
    exports.INSERT = keycodes.INSERT;
    exports.DELETE = keycodes.DELETE;
    exports.ZERO = keycodes.ZERO;
    exports.ONE = keycodes.ONE;
    exports.TWO = keycodes.TWO;
    exports.THREE = keycodes.THREE;
    exports.FOUR = keycodes.FOUR;
    exports.FIVE = keycodes.FIVE;
    exports.SIX = keycodes.SIX;
    exports.SEVEN = keycodes.SEVEN;
    exports.EIGHT = keycodes.EIGHT;
    exports.NINE = keycodes.NINE;
    exports.FF_SEMICOLON = keycodes.FF_SEMICOLON;
    exports.FF_EQUALS = keycodes.FF_EQUALS;
    exports.QUESTION_MARK = keycodes.QUESTION_MARK;
    exports.AT_SIGN = keycodes.AT_SIGN;
    exports.A = keycodes.A;
    exports.B = keycodes.B;
    exports.C = keycodes.C;
    exports.D = keycodes.D;
    exports.E = keycodes.E;
    exports.F = keycodes.F;
    exports.G = keycodes.G;
    exports.H = keycodes.H;
    exports.I = keycodes.I;
    exports.J = keycodes.J;
    exports.K = keycodes.K;
    exports.L = keycodes.L;
    exports.M = keycodes.M;
    exports.N = keycodes.N;
    exports.O = keycodes.O;
    exports.P = keycodes.P;
    exports.Q = keycodes.Q;
    exports.R = keycodes.R;
    exports.S = keycodes.S;
    exports.T = keycodes.T;
    exports.U = keycodes.U;
    exports.V = keycodes.V;
    exports.W = keycodes.W;
    exports.X = keycodes.X;
    exports.Y = keycodes.Y;
    exports.Z = keycodes.Z;
    exports.META = keycodes.META;
    exports.MAC_WK_CMD_LEFT = keycodes.MAC_WK_CMD_LEFT;
    exports.MAC_WK_CMD_RIGHT = keycodes.MAC_WK_CMD_RIGHT;
    exports.CONTEXT_MENU = keycodes.CONTEXT_MENU;
    exports.NUMPAD_ZERO = keycodes.NUMPAD_ZERO;
    exports.NUMPAD_ONE = keycodes.NUMPAD_ONE;
    exports.NUMPAD_TWO = keycodes.NUMPAD_TWO;
    exports.NUMPAD_THREE = keycodes.NUMPAD_THREE;
    exports.NUMPAD_FOUR = keycodes.NUMPAD_FOUR;
    exports.NUMPAD_FIVE = keycodes.NUMPAD_FIVE;
    exports.NUMPAD_SIX = keycodes.NUMPAD_SIX;
    exports.NUMPAD_SEVEN = keycodes.NUMPAD_SEVEN;
    exports.NUMPAD_EIGHT = keycodes.NUMPAD_EIGHT;
    exports.NUMPAD_NINE = keycodes.NUMPAD_NINE;
    exports.NUMPAD_MULTIPLY = keycodes.NUMPAD_MULTIPLY;
    exports.NUMPAD_PLUS = keycodes.NUMPAD_PLUS;
    exports.NUMPAD_MINUS = keycodes.NUMPAD_MINUS;
    exports.NUMPAD_PERIOD = keycodes.NUMPAD_PERIOD;
    exports.NUMPAD_DIVIDE = keycodes.NUMPAD_DIVIDE;
    exports.F1 = keycodes.F1;
    exports.F2 = keycodes.F2;
    exports.F3 = keycodes.F3;
    exports.F4 = keycodes.F4;
    exports.F5 = keycodes.F5;
    exports.F6 = keycodes.F6;
    exports.F7 = keycodes.F7;
    exports.F8 = keycodes.F8;
    exports.F9 = keycodes.F9;
    exports.F10 = keycodes.F10;
    exports.F11 = keycodes.F11;
    exports.F12 = keycodes.F12;
    exports.NUM_LOCK = keycodes.NUM_LOCK;
    exports.SCROLL_LOCK = keycodes.SCROLL_LOCK;
    exports.FIRST_MEDIA = keycodes.FIRST_MEDIA;
    exports.FF_MINUS = keycodes.FF_MINUS;
    exports.MUTE = keycodes.MUTE;
    exports.VOLUME_DOWN = keycodes.VOLUME_DOWN;
    exports.VOLUME_UP = keycodes.VOLUME_UP;
    exports.FF_MUTE = keycodes.FF_MUTE;
    exports.FF_VOLUME_DOWN = keycodes.FF_VOLUME_DOWN;
    exports.LAST_MEDIA = keycodes.LAST_MEDIA;
    exports.FF_VOLUME_UP = keycodes.FF_VOLUME_UP;
    exports.SEMICOLON = keycodes.SEMICOLON;
    exports.EQUALS = keycodes.EQUALS;
    exports.COMMA = keycodes.COMMA;
    exports.DASH = keycodes.DASH;
    exports.SLASH = keycodes.SLASH;
    exports.APOSTROPHE = keycodes.APOSTROPHE;
    exports.TILDE = keycodes.TILDE;
    exports.OPEN_SQUARE_BRACKET = keycodes.OPEN_SQUARE_BRACKET;
    exports.BACKSLASH = keycodes.BACKSLASH;
    exports.CLOSE_SQUARE_BRACKET = keycodes.CLOSE_SQUARE_BRACKET;
    exports.SINGLE_QUOTE = keycodes.SINGLE_QUOTE;
    exports.MAC_META = keycodes.MAC_META;
    exports.hasModifierKey = keycodes.hasModifierKey;
    exports.NgZorroAntdModule = NgZorroAntdModule;
    exports.NzAffixComponent = NzAffixComponent;
    exports.NzAffixModule = NzAffixModule;
    exports.NzAlertComponent = NzAlertComponent;
    exports.NzAlertModule = NzAlertModule;
    exports.NzAnchorLinkComponent = NzAnchorLinkComponent;
    exports.NzAnchorComponent = NzAnchorComponent;
    exports.NzAnchorModule = NzAnchorModule;
    exports.NzAvatarComponent = NzAvatarComponent;
    exports.NzAvatarModule = NzAvatarModule;
    exports.NzBackTopComponent = NzBackTopComponent;
    exports.NzBackTopModule = NzBackTopModule;
    exports.NzBadgeComponent = NzBadgeComponent;
    exports.NzBadgeModule = NzBadgeModule;
    exports.NzBreadCrumbItemComponent = NzBreadCrumbItemComponent;
    exports.NZ_ROUTE_DATA_BREADCRUMB = NZ_ROUTE_DATA_BREADCRUMB;
    exports.NzBreadCrumbComponent = NzBreadCrumbComponent;
    exports.NzBreadCrumbModule = NzBreadCrumbModule;
    exports.NzButtonComponent = NzButtonComponent;
    exports.NzButtonGroupComponent = NzButtonGroupComponent;
    exports.NzButtonModule = NzButtonModule;
    exports.NzCalendarComponent = NzCalendarComponent;
    exports.NzCalendarModule = NzCalendarModule;
    exports.NzCardGridDirective = NzCardGridDirective;
    exports.NzCardComponent = NzCardComponent;
    exports.NzCardModule = NzCardModule;
    exports.NzCardLoadingComponent = NzCardLoadingComponent;
    exports.NzCardMetaComponent = NzCardMetaComponent;
    exports.NzCardTabComponent = NzCardTabComponent;
    exports.NzCarouselModule = NzCarouselModule;
    exports.NzCarouselComponent = NzCarouselComponent;
    exports.NzCarouselContentDirective = NzCarouselContentDirective;
    exports.NzCheckboxComponent = NzCheckboxComponent;
    exports.NzCheckboxModule = NzCheckboxModule;
    exports.NzCheckboxGroupComponent = NzCheckboxGroupComponent;
    exports.NzCheckboxWrapperComponent = NzCheckboxWrapperComponent;
    exports.NzCollapsePanelComponent = NzCollapsePanelComponent;
    exports.NzCollapseComponent = NzCollapseComponent;
    exports.NzCollapseModule = NzCollapseModule;
    exports.CandyDate = CandyDate;
    exports.NzDatePickerModule = NzDatePickerModule;
    exports.NzDatePickerComponent = NzDatePickerComponent;
    exports.NzRangePickerComponent = NzRangePickerComponent;
    exports.NzMonthPickerComponent = NzMonthPickerComponent;
    exports.NzWeekPickerComponent = NzWeekPickerComponent;
    exports.NzDividerComponent = NzDividerComponent;
    exports.NzDividerModule = NzDividerModule;
    exports.DRAWER_ANIMATE_DURATION = DRAWER_ANIMATE_DURATION;
    exports.NzDrawerComponent = NzDrawerComponent;
    exports.NzDrawerModule = NzDrawerModule;
    exports.DrawerBuilderForService = DrawerBuilderForService$$1;
    exports.NzDrawerService = NzDrawerService$$1;
    exports.NzDrawerRef = NzDrawerRef;
    exports.NzDropdownContextComponent = NzDropdownContextComponent;
    exports.NzDropDownComponent = NzDropDownComponent;
    exports.NzDropDownDirective = NzDropDownDirective;
    exports.NzDropdownService = NzDropdownService$$1;
    exports.NzDropDownButtonComponent = NzDropDownButtonComponent;
    exports.NzDropDownModule = NzDropDownModule;
    exports.NzFormModule = NzFormModule;
    exports.NzFormDirective = NzFormDirective;
    exports.NzFormControlComponent = NzFormControlComponent;
    exports.NzFormExplainComponent = NzFormExplainComponent;
    exports.NzFormItemComponent = NzFormItemComponent;
    exports.NzFormExtraComponent = NzFormExtraComponent;
    exports.NzFormLabelComponent = NzFormLabelComponent;
    exports.NzFormSplitComponent = NzFormSplitComponent;
    exports.NzFormTextComponent = NzFormTextComponent;
    exports.NzRowDirective = NzRowDirective;
    exports.Breakpoint = Breakpoint;
    exports.NzRowComponent = NzRowComponent;
    exports.NzColComponent = NzColComponent;
    exports.NzColDirective = NzColDirective;
    exports.NzGridModule = NzGridModule;
    exports.NzI18nModule = NzI18nModule;
    exports.NZ_I18N = NZ_I18N;
    exports.NzI18nService = NzI18nService;
    exports.ar_EG = ar_EG;
    exports.bg_BG = bg_BG;
    exports.ca_ES = ca_ES;
    exports.cs_CZ = cs_CZ;
    exports.de_DE = de_DE;
    exports.el_GR = el_GR;
    exports.en_GB = en_GB;
    exports.en_US = en_US;
    exports.es_ES = es_ES;
    exports.et_EE = et_EE;
    exports.fa_IR = fa_IR;
    exports.fi_FI = fi_FI;
    exports.fr_BE = fr_BE;
    exports.fr_FR = fr_FR;
    exports.is_IS = is_IS;
    exports.it_IT = it_IT;
    exports.ja_JP = ja_JP;
    exports.ko_KR = ko_KR;
    exports.nb_NO = nb_NO;
    exports.nl_BE = nl_BE;
    exports.nl_NL = nl_NL;
    exports.pl_PL = pl_PL;
    exports.pt_BR = pt_BR;
    exports.pt_PT = pt_PT;
    exports.ru_RU = ru_RU;
    exports.sk_SK = sk_SK;
    exports.sr_RS = sr_RS;
    exports.sv_SE = sv_SE;
    exports.th_TH = th_TH;
    exports.tr_TR = tr_TR;
    exports.uk_UA = uk_UA;
    exports.vi_VN = vi_VN;
    exports.zh_CN = zh_CN;
    exports.zh_TW = zh_TW;
    exports.NzIconModule = NzIconModule;
    exports.NzIconDirective = NzIconDirective;
    exports.NZ_ICONS = NZ_ICONS$$1;
    exports.NZ_ICON_DEFAULT_TWOTONE_COLOR = NZ_ICON_DEFAULT_TWOTONE_COLOR$$1;
    exports.DEFAULT_TWOTONE_COLOR = DEFAULT_TWOTONE_COLOR$$1;
    exports.NZ_ICONS_USED_BY_ZORRO = NZ_ICONS_USED_BY_ZORRO$$1;
    exports.NzIconService = NzIconService$$1;
    exports.NzInputGroupComponent = NzInputGroupComponent;
    exports.NzInputModule = NzInputModule;
    exports.NzInputNumberComponent = NzInputNumberComponent;
    exports.NzInputNumberModule = NzInputNumberModule;
    exports.NzContentComponent = NzContentComponent;
    exports.NzFooterComponent = NzFooterComponent;
    exports.NzHeaderComponent = NzHeaderComponent;
    exports.NzLayoutComponent = NzLayoutComponent;
    exports.NzSiderComponent = NzSiderComponent;
    exports.NzLayoutModule = NzLayoutModule;
    exports.NzListItemMetaComponent = NzListItemMetaComponent;
    exports.NzListItemComponent = NzListItemComponent;
    exports.NzListComponent = NzListComponent;
    exports.NzListModule = NzListModule;
    exports.NzMentionModule = NzMentionModule;
    exports.NzMentionComponent = NzMentionComponent;
    exports.NZ_MENTION_TRIGGER_ACCESSOR = NZ_MENTION_TRIGGER_ACCESSOR;
    exports.NzMentionTriggerDirective = NzMentionTriggerDirective;
    exports.NzMentionSuggestionDirective = NzMentionSuggestionDirective;
    exports.NzMenuDirective = NzMenuDirective;
    exports.NzMenuGroupComponent = NzMenuGroupComponent;
    exports.NzMenuDividerDirective = NzMenuDividerDirective;
    exports.NzMenuItemDirective = NzMenuItemDirective;
    exports.NzSubMenuComponent = NzSubMenuComponent;
    exports.NzMenuModule = NzMenuModule;
    exports.NzPaginationComponent = NzPaginationComponent;
    exports.NzPaginationModule = NzPaginationModule;
    exports.NzProgressModule = NzProgressModule;
    exports.NzProgressComponent = NzProgressComponent;
    exports.NzRadioButtonComponent = NzRadioButtonComponent;
    exports.NzRadioGroupComponent = NzRadioGroupComponent;
    exports.NzRadioComponent = NzRadioComponent;
    exports.NzRadioModule = NzRadioModule;
    exports.NzRateComponent = NzRateComponent;
    exports.NzRateModule = NzRateModule;
    exports.NzOptionGroupComponent = NzOptionGroupComponent;
    exports.NzOptionContainerComponent = NzOptionContainerComponent;
    exports.NzOptionComponent = NzOptionComponent;
    exports.NzSelectComponent = NzSelectComponent;
    exports.NzSelectModule = NzSelectModule;
    exports.NzSpinComponent = NzSpinComponent;
    exports.NzSpinModule = NzSpinModule;
    exports.NzStepsComponent = NzStepsComponent;
    exports.NzStepComponent = NzStepComponent;
    exports.NzStepsModule = NzStepsModule;
    exports.NzSwitchComponent = NzSwitchComponent;
    exports.NzSwitchModule = NzSwitchModule;
    exports.NzTableComponent = NzTableComponent;
    exports.NzTableModule = NzTableModule;
    exports.NzTbodyDirective = NzTbodyDirective;
    exports.NzTdComponent = NzTdComponent;
    exports.NzThComponent = NzThComponent;
    exports.NzTheadComponent = NzTheadComponent;
    exports.NzTrDirective = NzTrDirective;
    exports.NzTabBodyComponent = NzTabBodyComponent;
    exports.NzTabLabelDirective = NzTabLabelDirective;
    exports.NzTabComponent = NzTabComponent;
    exports.NzTabsInkBarDirective = NzTabsInkBarDirective;
    exports.NzTabsModule = NzTabsModule;
    exports.NzTabsNavComponent = NzTabsNavComponent;
    exports.NzTabChangeEvent = NzTabChangeEvent;
    exports.NzTabSetComponent = NzTabSetComponent;
    exports.NzTimelineItemComponent = NzTimelineItemComponent;
    exports.NzTimelineComponent = NzTimelineComponent;
    exports.NzTimelineModule = NzTimelineModule;
    exports.NzTransferListComponent = NzTransferListComponent;
    exports.NzTransferSearchComponent = NzTransferSearchComponent;
    exports.NzTransferComponent = NzTransferComponent;
    exports.NzTransferModule = NzTransferModule;
    exports.NzUploadBtnComponent = NzUploadBtnComponent;
    exports.NzUploadListComponent = NzUploadListComponent;
    exports.NzUploadComponent = NzUploadComponent;
    exports.NzUploadModule = NzUploadModule;
    exports.NzTagComponent = NzTagComponent;
    exports.NzTagModule = NzTagModule;
    exports.NzAutocompleteModule = NzAutocompleteModule;
    exports.NzAutocompleteComponent = NzAutocompleteComponent;
    exports.getNzAutocompleteMissingPanelError = getNzAutocompleteMissingPanelError;
    exports.NZ_AUTOCOMPLETE_VALUE_ACCESSOR = NZ_AUTOCOMPLETE_VALUE_ACCESSOR;
    exports.NzAutocompleteTriggerDirective = NzAutocompleteTriggerDirective;
    exports.NzOptionSelectionChange = NzOptionSelectionChange;
    exports.NzAutocompleteOptionComponent = NzAutocompleteOptionComponent;
    exports.NzAutocompleteOptgroupComponent = NzAutocompleteOptgroupComponent;
    exports.NzMessageBaseService = NzMessageBaseService$$1;
    exports.NzMessageService = NzMessageService$$1;
    exports.NzMessageModule = NzMessageModule;
    exports.NzMessageComponent = NzMessageComponent;
    exports.NzMessageContainerComponent = NzMessageContainerComponent;
    exports.NZ_MESSAGE_DEFAULT_CONFIG = NZ_MESSAGE_DEFAULT_CONFIG;
    exports.NZ_MESSAGE_CONFIG = NZ_MESSAGE_CONFIG;
    exports.NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER = NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER;
    exports.NzTimePickerComponent = NzTimePickerComponent;
    exports.NzTimePickerModule = NzTimePickerModule;
    exports.NzToolTipComponent = NzToolTipComponent;
    exports.NzTooltipDirective = NzTooltipDirective;
    exports.NzToolTipModule = NzToolTipModule;
    exports.NzSkeletonComponent = NzSkeletonComponent;
    exports.NzSkeletonModule = NzSkeletonModule;
    exports.SliderHandle = SliderHandle;
    exports.NzSliderComponent = NzSliderComponent;
    exports.NzSliderModule = NzSliderModule;
    exports.NzSliderService = NzSliderService;
    exports.NzSliderHandleComponent = NzSliderHandleComponent;
    exports.NzSliderMarksComponent = NzSliderMarksComponent;
    exports.Marks = Marks;
    exports.MarksArray = MarksArray;
    exports.NzSliderStepComponent = NzSliderStepComponent;
    exports.NzSliderTrackComponent = NzSliderTrackComponent;
    exports.NzPopoverComponent = NzPopoverComponent;
    exports.NzPopoverDirective = NzPopoverDirective;
    exports.NzPopoverModule = NzPopoverModule;
    exports.NZ_NOTIFICATION_DEFAULT_CONFIG = NZ_NOTIFICATION_DEFAULT_CONFIG;
    exports.NZ_NOTIFICATION_CONFIG = NZ_NOTIFICATION_CONFIG;
    exports.NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER = NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER;
    exports.NzNotificationComponent = NzNotificationComponent;
    exports.NzNotificationModule = NzNotificationModule;
    exports.NzNotificationService = NzNotificationService$$1;
    exports.NzNotificationContainerComponent = NzNotificationContainerComponent;
    exports.NzPopconfirmComponent = NzPopconfirmComponent;
    exports.NzPopconfirmDirective = NzPopconfirmDirective;
    exports.NzPopconfirmModule = NzPopconfirmModule;
    exports.NzModalComponent = NzModalComponent;
    exports.NzModalRef = NzModalRef;
    exports.NzModalModule = NzModalModule;
    exports.NzModalService = NzModalService;
    exports.NZ_MODAL_CONFIG = NZ_MODAL_CONFIG;
    exports.NzCascaderModule = NzCascaderModule;
    exports.NzCascaderComponent = NzCascaderComponent;
    exports.NzTreeModule = NzTreeModule;
    exports.NzTreeComponent = NzTreeComponent;
    exports.NzTreeNodeComponent = NzTreeNodeComponent;
    exports.NzTreeNode = NzTreeNode;
    exports.NzTreeService = NzTreeService;
    exports.isCheckDisabled = isCheckDisabled;
    exports.isInArray = isInArray;
    exports.NzTreeSelectComponent = NzTreeSelectComponent;
    exports.NzTreeSelectModule = NzTreeSelectModule;
    exports.VERSION = VERSION;
    exports.NzWaveRenderer = NzWaveRenderer;
    exports.NzWaveDirective = NzWaveDirective;
    exports.NzWaveModule = NzWaveModule;
    exports.isNotNil = isNotNil;
    exports.shallowEqual = shallowEqual;
    exports.isInteger = isInteger;
    exports.isEmpty = isEmpty;
    exports.filterNotEmptyNode = filterNotEmptyNode;
    exports.isNonEmptyString = isNonEmptyString;
    exports.isTemplateRef = isTemplateRef;
    exports.isComponent = isComponent;
    exports.toBoolean = toBoolean;
    exports.toNumber = toNumber;
    exports.toCssPixel = toCssPixel;
    exports.valueFunctionProp = valueFunctionProp;
    exports.InputBoolean = InputBoolean;
    exports.InputCssPixel = InputCssPixel;
    exports.getRegExp = getRegExp;
    exports.getMentions = getMentions;
    exports.NzGlobalMonitorService = NzGlobalMonitorService;
    exports.getCaretCoordinates = getCaretCoordinates;
    exports.createDebugEle = createDebugEle;
    exports.properties = properties;
    exports.throttleByAnimationFrameDecorator = throttleByAnimationFrameDecorator;
    exports.ɵcz = NzAffixComponent;
    exports.ɵcy = NzAffixModule;
    exports.ɵer = NzAlertComponent;
    exports.ɵeq = NzAlertModule;
    exports.ɵcx = NzAnchorLinkComponent;
    exports.ɵct = NzAnchorComponent;
    exports.ɵcs = NzAnchorModule;
    exports.ɵil = NzAutocompleteOptgroupComponent;
    exports.ɵii = NzAutocompleteOptionComponent;
    exports.ɵij = NZ_AUTOCOMPLETE_VALUE_ACCESSOR;
    exports.ɵik = NzAutocompleteTriggerDirective;
    exports.ɵih = NzAutocompleteComponent;
    exports.ɵig = NzAutocompleteModule;
    exports.ɵfk = NzAvatarComponent;
    exports.ɵfj = NzAvatarModule;
    exports.ɵju = NzBackTopComponent;
    exports.ɵjt = NzBackTopModule;
    exports.ɵeo = NzBadgeComponent;
    exports.ɵen = NzBadgeModule;
    exports.ɵdl = NzBreadCrumbItemComponent;
    exports.ɵdk = NzBreadCrumbComponent;
    exports.ɵdj = NzBreadCrumbModule;
    exports.ɵh = NzButtonGroupComponent;
    exports.ɵb = NzButtonComponent;
    exports.ɵa = NzButtonModule;
    exports.ɵx = NzDateCellDirective;
    exports.ɵz = NzDateFullCellDirective;
    exports.ɵy = NzMonthCellDirective;
    exports.ɵba = NzMonthFullCellDirective;
    exports.ɵm = NzCalendarHeaderComponent;
    exports.ɵw = NzCalendarComponent;
    exports.ɵl = NzCalendarModule;
    exports.ɵfg = NzCardGridDirective;
    exports.ɵfi = NzCardLoadingComponent;
    exports.ɵfh = NzCardMetaComponent;
    exports.ɵff = NzCardTabComponent;
    exports.ɵfe = NzCardComponent;
    exports.ɵfd = NzCardModule;
    exports.ɵfu = NzCarouselContentDirective;
    exports.ɵft = NzCarouselComponent;
    exports.ɵfs = NzCarouselModule;
    exports.ɵjx = NzCascaderOptionComponent;
    exports.ɵjw = NzCascaderComponent;
    exports.ɵjv = NzCascaderModule;
    exports.ɵdx = NzCheckboxGroupComponent;
    exports.ɵdw = NzCheckboxWrapperComponent;
    exports.ɵdv = NzCheckboxComponent;
    exports.ɵdu = NzCheckboxModule;
    exports.ɵfw = NzCollapsePanelComponent;
    exports.ɵfx = NzCollapseComponent;
    exports.ɵfv = NzCollapseModule;
    exports.ɵca = NzAddOnModule;
    exports.ɵcb = NzStringTemplateOutletDirective;
    exports.ɵep = AnimationCurves;
    exports.ɵch = dropDownAnimation;
    exports.ɵej = fadeAnimation;
    exports.ɵke = selectDropDownAnimation;
    exports.ɵkf = selectTagAnimation;
    exports.ɵhn = NzScrollStrategyOptions;
    exports.ɵcu = NzScrollService;
    exports.ɵcw = SCROLL_SERVICE_PROVIDER;
    exports.ɵcv = SCROLL_SERVICE_PROVIDER_FACTORY;
    exports.ɵgb = NzMeasureScrollbarService;
    exports.ɵc = NzUpdateHostClassService;
    exports.ɵco = InputBoolean;
    exports.ɵbg = InputBoolean;
    exports.ɵbc = LoggerModule;
    exports.ɵv = LOGGER_SERVICE_PROVIDER;
    exports.ɵu = LOGGER_SERVICE_PROVIDER_FACTORY;
    exports.ɵs = LoggerService;
    exports.ɵt = NZ_LOGGER_STATE;
    exports.ɵda = throttleByAnimationFrameDecorator;
    exports.ɵj = NzWaveDirective;
    exports.ɵi = NzWaveModule;
    exports.ɵhb = AbstractPickerComponent;
    exports.ɵgz = NzDatePickerComponent;
    exports.ɵgg = NzDatePickerModule;
    exports.ɵha = DateRangePickerComponent;
    exports.ɵhf = HeaderPickerComponent;
    exports.ɵgo = CalendarFooterComponent;
    exports.ɵgm = CalendarHeaderComponent;
    exports.ɵgn = CalendarInputComponent;
    exports.ɵgp = OkButtonComponent;
    exports.ɵgq = TimePickerButtonComponent;
    exports.ɵgr = TodayButtonComponent;
    exports.ɵgs = DateTableComponent;
    exports.ɵgw = DecadePanelComponent;
    exports.ɵgh = LibPackerModule;
    exports.ɵgu = MonthPanelComponent;
    exports.ɵgv = MonthTableComponent;
    exports.ɵgy = DateRangePopupComponent;
    exports.ɵgx = InnerPopupComponent;
    exports.ɵgt = YearPanelComponent;
    exports.ɵhe = NzMonthPickerComponent;
    exports.ɵhc = NzPickerComponent;
    exports.ɵhd = NzRangePickerComponent;
    exports.ɵhh = NzWeekPickerComponent;
    exports.ɵhg = NzYearPickerComponent;
    exports.ɵhj = NzDividerComponent;
    exports.ɵhi = NzDividerModule;
    exports.ɵhm = NzDrawerRef;
    exports.ɵhl = NzDrawerComponent;
    exports.ɵhk = NzDrawerModule;
    exports.ɵho = NzDrawerService$$1;
    exports.ɵcj = NzDropDownButtonComponent;
    exports.ɵdc = NzDropdownContextComponent;
    exports.ɵcg = NzDropDownComponent;
    exports.ɵci = NzDropDownDirective;
    exports.ɵdb = NzDropDownModule;
    exports.ɵhv = NzFormControlComponent;
    exports.ɵht = NzFormExplainComponent;
    exports.ɵhq = NzFormExtraComponent;
    exports.ɵhs = NzFormItemComponent;
    exports.ɵhr = NzFormLabelComponent;
    exports.ɵhx = NzFormSplitComponent;
    exports.ɵhw = NzFormTextComponent;
    exports.ɵhu = NzFormDirective;
    exports.ɵhp = NzFormModule;
    exports.ɵbw = NzColComponent;
    exports.ɵbv = NzColDirective;
    exports.ɵbt = NzGridModule;
    exports.ɵbu = NzRowComponent;
    exports.ɵbx = NzRowDirective;
    exports.ɵbb = NzI18nModule;
    exports.ɵbd = NzI18nPipe;
    exports.ɵp = NZ_I18N_SERVICE_PROVIDER;
    exports.ɵo = NZ_LOCALE_SERVICE_PROVIDER_FACTORY;
    exports.ɵn = NzI18nService;
    exports.ɵq = NZ_I18N;
    exports.ɵd = NzIconDirective;
    exports.ɵk = NzIconModule;
    exports.ɵe = NZ_ICONS$$1;
    exports.ɵf = NZ_ICON_DEFAULT_TWOTONE_COLOR$$1;
    exports.ɵg = NzIconService$$1;
    exports.ɵdz = NzInputNumberComponent;
    exports.ɵdy = NzInputNumberModule;
    exports.ɵdt = NzInputGroupComponent;
    exports.ɵds = NzInputDirective;
    exports.ɵdr = NzInputModule;
    exports.ɵdg = NzContentComponent;
    exports.ɵdh = NzFooterComponent;
    exports.ɵdf = NzHeaderComponent;
    exports.ɵde = NzLayoutComponent;
    exports.ɵdd = NzLayoutModule;
    exports.ɵdi = NzSiderComponent;
    exports.ɵib = NzListItemMetaComponent;
    exports.ɵia = NzListItemComponent;
    exports.ɵhz = NzListComponent;
    exports.ɵhy = NzListModule;
    exports.ɵcr = NzMentionSuggestionDirective;
    exports.ɵcp = NZ_MENTION_TRIGGER_ACCESSOR;
    exports.ɵcq = NzMentionTriggerDirective;
    exports.ɵcn = NzMentionComponent;
    exports.ɵcm = NzMentionModule;
    exports.ɵck = NzMenuDividerDirective;
    exports.ɵcl = NzMenuGroupComponent;
    exports.ɵce = NzMenuItemDirective;
    exports.ɵcd = NzMenuDirective;
    exports.ɵcc = NzMenuModule;
    exports.ɵcf = NzSubMenuComponent;
    exports.ɵis = NZ_MESSAGE_CONFIG;
    exports.ɵir = NZ_MESSAGE_DEFAULT_CONFIG;
    exports.ɵit = NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER;
    exports.ɵip = NzMessageContainerComponent;
    exports.ɵiu = NzMessageComponent;
    exports.ɵio = NzMessageModule;
    exports.ɵiv = NzMessageBaseService$$1;
    exports.ɵiw = NzMessageService$$1;
    exports.ɵjr = CssUnitPipe;
    exports.ɵjo = NZ_MODAL_CONFIG;
    exports.ɵjq = NzModalControlService;
    exports.ɵjn = NzModalRef;
    exports.ɵjm = NzModalComponent;
    exports.ɵjl = NzModalModule;
    exports.ɵjs = NzModalService;
    exports.ɵjc = NZ_NOTIFICATION_CONFIG;
    exports.ɵjb = NZ_NOTIFICATION_DEFAULT_CONFIG;
    exports.ɵjd = NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER;
    exports.ɵiz = NzNotificationContainerComponent;
    exports.ɵiy = NzNotificationComponent;
    exports.ɵix = NzNotificationModule;
    exports.ɵje = NzNotificationService$$1;
    exports.ɵdn = NzPaginationComponent;
    exports.ɵdm = NzPaginationModule;
    exports.ɵjj = NzPopconfirmComponent;
    exports.ɵjk = NzPopconfirmDirective;
    exports.ɵji = NzPopconfirmModule;
    exports.ɵjg = NzPopoverComponent;
    exports.ɵjh = NzPopoverDirective;
    exports.ɵjf = NzPopoverModule;
    exports.ɵev = NzProgressComponent;
    exports.ɵeu = NzProgressModule;
    exports.ɵbh = NzRadioButtonComponent;
    exports.ɵbi = NzRadioGroupComponent;
    exports.ɵbf = NzRadioComponent;
    exports.ɵbe = NzRadioModule;
    exports.ɵem = NzRateComponent;
    exports.ɵel = NzRateModule;
    exports.ɵbp = NzOptionContainerComponent;
    exports.ɵbr = NzOptionGroupComponent;
    exports.ɵbq = NzOptionLiComponent;
    exports.ɵbm = NzOptionComponent;
    exports.ɵbk = NzOptionPipe;
    exports.ɵbl = NzSubOptionPipe;
    exports.ɵbo = NzSelectTopControlComponent;
    exports.ɵbs = NzSelectUnselectableDirective;
    exports.ɵbn = NzSelectComponent;
    exports.ɵbj = NzSelectModule;
    exports.ɵkh = NzSkeletonComponent;
    exports.ɵkg = NzSkeletonModule;
    exports.ɵee = NzSliderHandleComponent;
    exports.ɵeg = NzSliderMarksComponent;
    exports.ɵef = NzSliderStepComponent;
    exports.ɵed = NzSliderTrackComponent;
    exports.ɵeb = NzSliderComponent;
    exports.ɵea = NzSliderModule;
    exports.ɵec = NzSliderService;
    exports.ɵet = NzSpinComponent;
    exports.ɵes = NzSpinModule;
    exports.ɵdq = NzStepComponent;
    exports.ɵdp = NzStepsComponent;
    exports.ɵdo = NzStepsModule;
    exports.ɵbz = NzSwitchComponent;
    exports.ɵby = NzSwitchModule;
    exports.ɵfz = NzTableComponent;
    exports.ɵfy = NzTableModule;
    exports.ɵge = NzTbodyDirective;
    exports.ɵgc = NzTdComponent;
    exports.ɵga = NzThComponent;
    exports.ɵgd = NzTheadComponent;
    exports.ɵgf = NzTrDirective;
    exports.ɵfc = NzTabBodyComponent;
    exports.ɵfa = NzTabLabelDirective;
    exports.ɵex = NzTabComponent;
    exports.ɵfb = NzTabsInkBarDirective;
    exports.ɵez = NzTabsNavComponent;
    exports.ɵew = NzTabsModule;
    exports.ɵey = NzTabSetComponent;
    exports.ɵin = NzTagComponent;
    exports.ɵim = NzTagModule;
    exports.ɵgk = NzTimePickerPanelComponent;
    exports.ɵgj = NzTimePickerComponent;
    exports.ɵgi = NzTimePickerModule;
    exports.ɵgl = NzTimeValueAccessorDirective;
    exports.ɵfm = NzTimelineItemComponent;
    exports.ɵfn = NzTimelineComponent;
    exports.ɵfl = NzTimelineModule;
    exports.ɵei = NzToolTipComponent;
    exports.ɵek = NzTooltipDirective;
    exports.ɵeh = NzToolTipModule;
    exports.ɵfq = NzTransferListComponent;
    exports.ɵfr = NzTransferSearchComponent;
    exports.ɵfp = NzTransferComponent;
    exports.ɵfo = NzTransferModule;
    exports.ɵkd = NzTreeSelectComponent;
    exports.ɵkc = NzTreeSelectModule;
    exports.ɵkb = NzTreeNodeComponent;
    exports.ɵjz = NzTreeComponent;
    exports.ɵjy = NzTreeModule;
    exports.ɵka = NzTreeService;
    exports.ɵie = NzUploadBtnComponent;
    exports.ɵif = NzUploadListComponent;
    exports.ɵid = NzUploadComponent;
    exports.ɵic = NzUploadModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,